<!--
***************************************************************************
* Software Testing Automation Framework (STAF)
* (C) Copyright IBM Corp. 2002, 2004
*
* This software is licensed under the Eclipse Public License (EPL) V1.0.
****************************************************************************
-->

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Generator" content="Lotus Word Pro">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; U) [Netscape]">
   <title>Event Service User's Guide</title>
</head>
<body bgcolor="#FFFFFF">

<h1>
Event Service User's Guide</h1>
<b>Version 3.1.5</b>
<p><b>Last updated: September 28, 2012</b>

<p>
<hr>
<h2><a name="ToC"></a>Table of Contents</h2>
<p>
<a name="ToC_Overview" href="#Header_Overview"><b>Overview</b></a>
<p>
<a name="ToC_Installation" href="#Header_Installation"><b>Installation and Configuration</b></a>
<p>
<a name="ToC_RequestSyntax" href="#Header_RequestSyntax"><b>Request Syntax</b></a>
  <menu>
  <li><a name="ToC_Register" href="#Header_Register">REGISTER</a></li>
  <li><a name="ToC_Acknowledge" href="#Header_Acknowledge">ACKNOWLEDGE</a></li>
  <li><a name="ToC_Generate" href="#Header_Generate">GENERATE</a></li>
  <li><a name="ToC_Unregister" href="#Header_Unregister">UNREGISTER</a></li>
  <li><a name="ToC_List" href="#Header_List">LIST</a></li>
  <li><a name="ToC_Query" href="#Header_Query">QUERY</a></li>
  <li><a name="ToC_Reset" href="#Header_Reset">RESET</a></li>
  <li><a name="ToC_Version" href="#Header_Version">VERSION</a></li>
  <li><a name="ToC_Help" href="#Header_Help">HELP</a></li>
  </menu>
<a name="ToC_ErrorCodes" href="#Header_ErrorCodes"><b>Error Code Reference</b></a>
<p>
<a name="ToC_EventManager" href="#Header_EventManager"><b>EventManager Service</b></a>
<p>
<a name="ToC_Examples" href="#Header_Examples"><b>Examples</b></a>
  <menu>
  <li><a name="ToC_Example1" href="#Header_Example1">Example 1: Using the Event Service via Two Java Applications</a></li>
  <li><a name="ToC_Example2" href="#Header_Example2">Example 2: Using the EventManager Service</a></li>
  </menu>
<p>
<hr>
<p>
<h1>
<a NAME="Header_Overview" href="#ToC_Overview">Overview</a></h1>
The EVENT service is an external STAF service. The purpose of the EVENT
service is to provide an interface to allow process communication based
on events occuring. For instance, a process registers with the EVENT service
that it is interested in builds completing. A different process tell the
EVENT service when a build has completed. The EVENT service then notifies
all processes that have registered interest in the build completing that
the build has completed.
<p> 
Communication is done by using the STAF QUEUE service. The EVENT service
notifies a process that an event has occurred by queueing a message with
queue type "STAF/Service/Event" with the content of the message being a
<tt> &lt;Map></tt> defined as follows:
<p>
<table border>
<thead>
<tr>
<th colspan="3">Definition for message map for a "STAF/Service/Event" type queued message
</tr>
<tr>
<th colspan="3"><b>Description: </b>This map represents information about a
generated event.
</tr>
<tr>
<th width=30%>Key Name
<th width=30%>Type
<th width=40%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>eventServiceName
<td><tt>&lt;String></tt>
<td>
<tr>
<td>eventID
<td><tt>&lt;String></tt>
<td>
<tr>
<td>machine
<td><tt>&lt;String></tt>
<td>
<tr>
<td>handleName
<td><tt>&lt;String></tt>
<td>
<tr>
<td>handle
<td><tt>&lt;String></tt>
<td>
<tr>
<td>timestamp
<td><tt>&lt;String></tt>
<td><tt>&lt;YYYYMMDD-HH:MM:SS></tt>
<tr>
<td>type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtype
<td><tt>&lt;String></tt>
<td>
<tr>
<td>propertyMap
<td><tt>&lt;Map></tt>
</tbody>
<tfoot>
<tr>
<td colspan="3">
<b>Notes:</b>
<ol compact>
<li>Keys "machine", "handleName", and "handle" represent the machine,
handle name, and handle number of the process who generated the event.
<li>The value for "propertyMap" will contain a map representing the specified
properties.  If no <tt>PROPERTY</tt> options were specified on the generate request,
the map will be empty.  Otherwise, for each <tt>PROPERTY &lt;Name>=[&lt;Value>]</tt>
specified, the property map will contain an entry with key set to <tt>&lt;Name></tt>
and it's value set to <tt>&lt;Value></tt> (or <tt>&lt;None></tt> if no <tt>&lt;Value></tt>
is specified).
</ol>
</tr>
</tfoot>
</table>
<p>
Here's an example of a queued message with type "STAF/Service/Event"
generated by the STAX service for use by the STAX Monitor:
<pre>
STAF local QUEUE GET WAIT

{
  Priority   : 5,
  Date-Time  : 20041019-21:52:45
  Machine    : mach1
  Handle Name: STAF/SERVICE/Event
  Handle     : 8
  User       : none://anonymous
  Type       : STAF/Service/Event
  Message    : {
    eventID         : 5686
    eventServiceName: Event
    handle          : 36
    handleName      : STAX/Job/1
    machine         : mach1.austin.ibm.com
    propertyMap     : {
      elapsed-time: 00:00:34
      laststatus  : pass
      message     : 
      name        : TestSTAF.Win2000.local.DEVICE_C++
      num-starts  : 68
      status      : update
      status-fail : 0
      status-pass : 68
    }
    subtype         : TestcaseStatus
    timestamp       : 20041019-21:52:45
    type            : STAX/mach1/1
  }
}
</pre>
<p>
<hr>
<p>
<h1>
<a NAME="Header_Installation" href="#ToC_Installation">Installation and Configuration</a></h1>

<ol>
<li>Install Java 1.2 or later.
<p>
<li>Install STAF 3.1.0 or later by following
the installation instructions in the STAF documentation.
<p>
<li>Install the Event V3.1.5 service:
<p>Download the EventV315.zip/tar
file from <a href="http://staf.sourceforge.net/getservices.php">Get STAF Services</a>
into a local directory (e.g. C:/STAF/services or /usr/local/staf/services) and extract it.
<p>
<li>Configure the Event service:
<p>Add the following statement to your staf.cfg file:
<p><tt>
SERVICE &lt;Service Name> LIBRARY JSTAF EXECUTE &lt;Service Jar File Name></tt>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <tt>[PARMS "MAXATTEMPTS &lt;Max Attempts> ACKNOWLEDGETIMEOUT &lt;Timeout>"]</tt>
<p>where:
<ul>
<li>
<tt>&lt;Service Name></tt>
is the name by which the Event service will be known on this machine.</li>
<li>
<tt>&lt;Service Jar File Name></tt>
is the fully-qualified name of the STAFEvent.jar file.</li>
<li>
<tt>&lt;Max Attempts></tt>
is the maximum number of times that the EVENT Service should notify this
process that the event has occurred.  The default is 1.
This option will resolve STAF variables.</li>
<li>
<tt>&lt;Timeout></tt>
is the length of time between notification attempts in milliseconds.
The default is 60000 (60 seconds). This option will resolve variables.

<p><b>Examples:</b>
<p><tt>
SERVICE Event LIBRARY JSTAF EXECUTE {STAF/Config/STAFRoot}/services/event/STAFEvent.jar</tt>
<p><tt>
SERVICE Event LIBRARY JSTAF EXECUTE C:/STAF/services/event/STAFEvent.jar</tt>
<p><tt>
SERVICE Event LIBRARY JSTAF EXECUTE /usr/local/staf/services/event/STAFEvent.jar</tt>
<p><tt>
SERVICE Event LIBRARY JSTAF EXECUTE C:/STAF/services/event/STAFEvent.jar \
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PARMS "MAXATTEMPTS 2 ACKNOWLEDGETIMEOUT 80000"
</tt>
<p>Or, you can dynamically add the EVENT service using the SERVICE service's ADD SERVICE
request.
</ul>
</ol>
<p>In most cases, the way that you would use this service is that you would
designate a system as the EVENT Server. That system would have STAF installed,
plus the EVENT service with the SERVICE configuration statement in the
configuration file that is shown above. Assuming that the machine name
for the Event server is EventServer, an example of the command line interface
to generate an event would be:
<p>
<tt>
&nbsp;&nbsp;  STAF EventServer EVENT GENERATE TYPE MyEvent SUBTYPE SubtypeA</tt>
<p>
<hr>
<p>
<h1>
<a NAME="Header_RequestSyntax" href="#ToC_RequestSyntax">Request Syntax</a></b></h1>

The Event service provides the following requests:
<ul type=disc>
<li>REGISTER- registers with the EVENT service to be notified of an event</li>
<li>UNREGISTER - unregister for a previously registered event</li>
<li>ACKNOWLEDGE - tell the EVENT service that an event has been recieved</li>
<li>GENERATE - tell the EVENT service that an event has occurred so that the
service can tell all processes REGISTERed for that event that the event
has occurred</li>
<li>LIST - returns a list of types, subtypes, registrations, event ids, or
service operational settings depending on the options selected.</li>
<li>QUERY - returns information about the specified event ID including its event
type, subtype, and properties, who generated the event, and the pending
notifications for this event.</li>
<li>RESET - clears all registered and/or generated events</li>
<li>VERSION - displays the version of the running event service</li>
<li>HELP - provides a list of commands and how to use them</li>
</ul>

<h2><a NAME="Header_Register" href="#ToC_Register">REGISTER</a></h2>

REGISTER tells the EVENT service that the requesting process is interested
in a particular event. If a process needs to be notified about multiple
types of events, it can use multiple invocations of the REGISTER command.

<h4>Syntax</h4>

<tt>
REGISTER          TYPE &lt;Type> [SUBTYPE &lt;Subtype>]...
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ACKNOWLEDGETIMEOUT &lt;Timeout>] [MAXATTEMPTS &lt;Number>]
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [PRIORITY &lt;Number>] [PRIORITYDELTA &lt;Number>]
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [BYNAME | BYHANDLE]
</tt>

<p>
<tt>TYPE</tt>
specifies the type of event. This can be any string, but must match
the <tt>TYPE</tt> value specified on the <tt>GENERATE</tt>
request in order to be notified for this event.  
Note that this match is case insensitive.  This option will resolve variables.
<p>
<tt>SUBTYPE</tt>
is used to further qualify this event.  Any number of
<tt>SUBTYPE</tt> options may be specified.
One of the <tt>&lt;value></tt>'s
specified for a <tt>SUBTYPE</tt>
must match the (unique) <tt>SUBTYPE</tt>
value specified on the <tt>GENERATE</tt>
request in order to be notified for this event.  Note that this match is case insensitive.
If no <tt>SUBTYPE</tt>s were
specified on the <tt>REGISTER</tt>
command, the process will be notified for all
<tt>SUBTYPE</tt>s of a
given event <tt>TYPE</tt>.
This option will resolve variables.
<p>
<tt>ACKNOWLEDGETIMEOUT</tt>
specifies the length of time in milliseconds between notification attempts.
If not specified, the default timeout specified when configuring
the Event service is used. This option will resolve variables.
<p>
<tt>MAXATTEMPTS</tt>
specifies the maximum number of times that the EVENT Service
should notify this process that the event has occurred. If not specified,
the default maximum attempts specified when configuring the Event service
is used.  This option will resolve variables.
<p>
<tt>PRIORITY</tt>
specifies the priority of the event notification. The default is 5.
This option will resolve variables.
<p>
<tt>PRIORITYDELTA</tt>
specifies a number that will be used to decrement the priority for this
process after the process is notified of the event. The default is 1.
This option will resolve variables.
<p>
<tt>BYNAME</tt>
indicates that the process should be registered by handle name.
<p>
<tt>BYHANDLE</tt>
indicates that the process should be registered by handle number rather
than handle name. If the <tt>BYHANDLE</tt>
option is not selected, registration will be by handle name.

<h4>Security</h4>

<p>This command requires trust level 3.

<h4>Results</h4>

<p>Upon successful return, the result buffer will be empty.

<h4>Examples:</h4>
<p>
<ul>
<li><b>Goal:</b> Register the requesting process by handle name for events with type build:
<p><tt>
REGISTER TYPE build</tt>
<p>
<li><b>Goal:</b> Register the requesting process by handle name for events with type build, 
but only for subtype Windows:
<p><tt>
REGISTER TYPE build SUBTYPE Windows</tt>
<p>
<li><b>Goal:</b> Register the requesting process by handle name for events with type build, 
but only for subtypes Linux, AIX, and HP-UX:
<p><tt>
REGISTER TYPE build SUBTYPE Linux SUBTYPE AIX SUBTYPE HP-UX</tt>
<p>
<li><b>Goal:</b> Register the requesting process by handle number rather than by handle name
for events with type build:
<p><tt>
REGISTER TYPE build BYHANDLE</tt>
<p>
<li><b>Goal:</b> Register the requesting process by handle name for events with type build,
making 2 notification attempts (rather the the default of 1 attempt)
with a 30 second timeout between notification attempts:
<p><tt>
REGISTER TYPE build MAXATTEMPTS 2 ACKNOWLEDGETIMEOUT 30000</tt>
<p>
<li><b>Goal:</b> Register the requesting process by handle number for events with type build,
but only for subtypes En and Sp.  Make a maximum of 3 notification attempts
if not acknowledgement is received:
<p><tt>
<p>REGISTER TYPE build SUBTYPE En SUBTYPE Sp MAXATTEMPTS 3 BYHANDLE</tt>
</ul>

<h2><a NAME="Header_Acknowledge" href="#ToC_Acknowledge">ACKNOWLEDGE</a></h2>

ACKNOWLEDGE is used to tell the EVENT Service that an event has been
received.

<h4>Syntax</h4>

<tt>
ACKNOWLEDGE EVENTID &lt;Event ID>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [FORCE [MACHINE &lt;Machine>] [HANDLE &lt;Handle> | NAME &lt;Name>]]</tt>

<p>
<tt>EVENTID</tt>
specifies the Event ID that was part of the message queued to the process
when the process was notified that the event occurred.
<p>
<tt>FORCE</tt>
allows one process to acknowledge an event for a different process.
<p>
<tt>MACHINE</tt>
is used with <tt>FORCE</tt>
to force acknowledgement for a process running on 
<tt>MACHINE &lt;Machine></tt>.
<p>
<tt>HANDLE</tt>
is used with <tt>FORCE</tt>
to force acknowledgement for a process with
<tt>HANDLE &lt;Handle></tt>.
<p>
<tt>NAME</tt>
is used with <tt>FORCE</tt>
to force acknowledgment for a process with handle
<tt>NAME &lt;Name></tt>.

<h4>Security</h4>

<p>This command requires trust level 3 unless the
<tt>FORCE</tt> option is
specified which requires trust level 4.

<h4>Results</h4>

<p>Upon successful return, the result buffer will contain the Event ID.

<h4>Examples</h4>

<p>
<ul>
<li><b>Goal:</b> Notify Event Service that process "MyProcess" has successfully
retrieved message for Event ID 25 from the "MyProcess" STAF queue:
<p>
<tt>
ACKNOWLEDGE EVENTID 25</tt>
<p>
<li><b>Goal:</b> Acknowledge that process "YourProcess" on machine machineA
has been notified for Event ID 25 from "SomeProcess":
<p>
<tt>
ACKNOWLEDGE EVENTID 25 FORCE MACHINE machineA NAME YourProcess</tt>
<p>
<li><b>Goal:</b> Acknowledge that the process with handle 7 on machine machineA
has been notified for Event ID 25.
<p>
<tt>
ACKNOWLEDGE EVENTID 25 FORCE MACHINE machineA HANDLE 7</tt>
<p>
<li><b>Goal:</b> Acknowledge that process "YourProcess" on the local machine has
been notified for Event ID 25.
<p>
<tt>
ACKNOWLEDGE EVENTID 25 FORCE NAME YourProcess</tt>
<br>or
<br><tt>
ACKNOWLEDGE EVENTID 25 FORCE MACHINE local NAME YourProcess
</tt>
</ul>

<h2><a NAME="Header_Generate" href="#ToC_Generate">GENERATE</a></h2>

GENERATE is used to tell the EVENT service that an event has occurred so that the
service can tell all processes REGISTERed for that event that the event has occurred.

<h4>Syntax</h4>

<p>
<tt>
GENERATE TYPE &lt;Type> SUBTYPE &lt;Subtype> [PROPERTY &lt;Name>[=&lt;Value>]]...
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [NOTIFY]</tt>

<p>
<tt>TYPE</tt>
specifies the type of event. This can be any string, but must match
the <tt>TYPE</tt> value
specified on the <tt>REGISTER</tt>
request in order to be notified for this event. Note that this match is case insensitive.
This option resolves variables.
<p>
<tt>SUBTYPE</tt>
is used to further qualify this event. This can be any string,
but must match the <tt>SUBTYPE</tt>
value specified on the <tt>REGISTER</tt>
command in order to be notified for this event.  Note that this match is case insensitive.
This option resolves variables.
<p>
<tt>PROPERTY</tt>
is used to pass information to further qualify the event.  The format is
<tt>&lt;Name>[=&lt;Value>]</tt>.
This option does not resolve variables.
This option will handle private data in the &lt;Value> specified for a property.
<p>
<tt>NOTIFY</tt>
is used to request notification when all registered processes have acknowledged 
receiving the event.  The notification will be a message sent to the queue of the
process that submitted the GENERATE request.  The message will have queue type
"STAF/Service/Event/AllAcksReceived" and the content of the message being a
marshalled <tt> &lt;Map></tt> defined as follows:
<p>
<table border>
<thead>
<tr>
<th colspan="3">Definition for message map for a "STAF/Service/Event/AllAcksReceived"
type queued message
</tr>
<tr>
<th width=30%>Key Name
<th width=30%>Type
<th width=40%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>eventServiceName
<td><tt>&lt;String></tt>
<td>
<tr>
<td>eventID
<td><tt>&lt;String></tt>
<td>
</tbody>
</table>

<h4>Security</h4>
<p>This command requires trust level 4.

<h4>Results</h4>
<p>Upon successful return, the result buffer will contain the Event ID of
the generating event.

<h4>Examples</h4>

<p>
<ul>
<li><b>Goal:</b> Notify the Event Service that an event of type "build" and subtype
"Sp" has occurred:
<p>
<tt>
GENERATE TYPE build SUBTYPE Sp</tt>
<p>
<li><b>Goal:</b> Notify the Event Service that an event of type "build" and subtype
"Sp" with the following three properties:  Version=2.1.0, "Status=Passed BVT", and Save:
<p>
<tt>
GENERATE TYPE build SUBTYPE Sp PROPERTY Version=2.1.0 PROPERTY "Status=Passed BVT" PROPERTY Save</tt>
<p>
<li><b>Goal:</b> Notify the Event Service that an event of type "build" and subtype
"En" has occurred and request notification when all registered processes have
acknowledged receiving the event.
<p>
<tt>
GENERATE TYPE build SUBTYPE En NOTIFY</tt>
</ul>

<h2><a NAME="Header_Unregister" href="#ToC_Unregister">UNREGISTER</a></h2>

UNREGISTER tells the Event Service to no longer notify this process about
events of specified TYPE and SUBTYPE for which this process was previously
registered.

<h4>Syntax</h4>

<p>
<tt>
UNREGISTER TYPE &lt;Type> [SUBTYPE &lt;Subtype>]...
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  [FORCE [MACHINE &lt;Machine>] [HANDLE &lt;Handle> | NAME &lt;Name>]]
</tt>

<p>
<tt>TYPE</tt>
specifies the type of event. This can be any value, but must match
the <tt>TYPE</tt>
value specified on the <tt>REGISTER</tt>
request.  Note that this match is case insensitive.
This option resolves variables.
<p>
<tt>SUBTYPE</tt>
is used to further qualify this event. This can be any value,
but must match the <tt>SUBTYPE</tt>
value specified on the <tt>REGISTER</tt> request
in order to unregister the process for that
<tt>SUBTYPE</tt>.
Note that this match is case insensitive.
This option resolves variables.
<p>
<tt>FORCE</tt>
allows one process to unregister a different process from the submitting process.
<p>
<tt>MACHINE</tt>
is used with <tt>FORCE</tt> to
force unregistration of a process running on
<tt>MACHINE &lt;Machine></tt>.
<p>
<tt>HANDLE</tt>
is used with <tt>FORCE</tt>
to force unregistration of a process with
<tt>HANDLE &lt;Handle></tt>.
<p>
<tt>NAME</tt>
is used with <tt>FORCE</tt>
to force unregistration of a process with handle
<tt>NAME &lt;Name></tt>.

<h4>Security</h4>

<p>This command requires trust level 3, unless the
<tt>FORCE</tt> option
is specified which requires trust level 4.

<h4>Results</h4>

<p>Upon successful return, the result buffer will be empty.

<h4>Examples</h4>

<p>
<ul>
<li><b>Goal:</b> Unregister the requesting process by handle name, the default,
for all events of TYPE build:
<p>
<tt>
UNREGISTER TYPE build</tt>
<p>
<li><b>Goal:</b> Unregister the process(es) with handle name "YourProcess" on machine
machineA for all events of TYPE build.
<p>
<tt>
UNREGISTER TYPE build FORCE MACHINE machineA NAME YourProcess</tt>
<p>
<li><b>Goal:</b> Unregister the process with handle 7 on machine machineA for events
of TYPE build, SUBTYPEs sp and fr only.
<p>
<tt>
UNREGISTER TYPE build SUBTYPE sp SUBTYPE fr FORCE MACHINE machineA HANDLE 7</tt>
<p>
<li><b>Goal:</b> Unregister the process(es) with handle name "YourProcess"
on the local machine for events of TYPE build..
<p>
<tt>
UNREGISTER TYPE build FORCE NAME YourProcess</tt>
<br>or
<br>
<tt>
UNREGISTER TYPE build FORCE MACHINE local NAME YourProcess</tt>
</ul>
<p>

<h2>
<a NAME="Header_List" href="#ToC_List">LIST</a></h2>

<p>LIST returns a list of types, subtypes, registrations, event ids, or
service operational settings depending on the options selected.

<h4>Syntax</h4>

<pre>
LIST TYPES [LONG]
LIST SUBTYPES TYPE &lt;Type>
LIST REGISTRATIONS [TYPE &lt;Type> [SUBTYPE &lt;Subtype>]] [LONG]
LIST EVENTIDS [LONG]
LIST SETTINGS
</pre>
<p>
<tt>TYPES</tt> specifies to list the event types that are registered.
<p>
<tt>SUBTYPES</tt> specifies to list the event subtypes that are registered
for the specified event type.
<p>
<tt>REGISTRATIONS</tt> specifies to list the processes that are registered
for events as follows:
<ul compact>
<li>If <tt>TYPE</tt> is not specified, all of the registered processes along
with the <tt>TYPE</tt>s and <tt>SUBTYPE</tt>s for which they are registered
are listed.
<li>If <tt>TYPE</tt> is specified, but not <tt>SUBTYPE</tt>,
all of the processes registered for events of the specified type are listed,
regardless of the subtype.  
<li>If <tt>TYPE</tt> and <tt>SUBTYPE</tt> are specified,
all of the processes registered for events of the specified type and subtype
are listed.  
</ul>
<p>
<tt>TYPE</tt> specifies the type of event.  This can be any value,
but must match the <tt>TYPE</tt> value specified on the <tt>REGISTER</tt>
request.  Note that this match is case insensitive.
This option resolves variables.
<p>
<tt>SUBTYPE</tt> is used to further qualify this event. This can be any value,
but must match the <tt>SUBTYPE</tt> value specified on the <tt>REGISTER</tt>
request.  Note that this match is case insensitive.
This option resolves variables.
<p>
<tt>EVENTIDS</tt> specifies to list information about all Event IDs.
<p>
<tt>LONG</tt> specifies to list additional information about the type,
registrations, or event IDs.
<p>
<tt>SETTINGS</tt> is specified, the operational settings for the
Event service are listed.  The operational settings include the
default values for maximum attempts, acknowledge timeout, priority,
and priority delta.

<h4>Security</h4>

<p>This command requires trust level 2.

<h4>Results</h4>
<p>
Upon successful return,
<p>
<ul>
<li>The result buffer for a <tt>"LIST TYPES"</tt> request will contain a
marshalled <tt>&lt;List> of &lt;String></tt> which represents a list of
all registered event types.
<p>
<li>The result buffer for a <tt>"LIST TYPES LONG"</tt> request will 
contain a marshalled <tt>&lt;List> of &lt;Map:STAF/Service/Event/Type></tt>
which represents a list of all registered event types and their subtypes.
The map is defined as follows:
<p>
<table border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/Type</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents an event type and
its subtypes.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>type
<td>Type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtypeList
<td>Subtypes
<td><tt>&lt;List> of &lt;String></tt>
<td>
</tbody>
</table>
<p>
<li>The result buffer for a
<tt>"LIST SUBTYPES TYPE &lt;Type>"</tt>
request will contain a marshalled
<tt>&lt;List> of &lt;String></tt>
which represents a list of all registered subtypes for the specified event type.
<p>
<li>The result buffer for a 
<tt>LIST REGISTRATIONS</tt>
request (without the LONG option) will contain a marshalled
<tt>
&lt;List> of &lt;Map:STAF/Service/Event/ListRegistrations></tt>
which represents a list of registrations for events.
The map is defined as follows:
<p>
<table border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/ListRegistrations</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents a registration
for an event.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>type
<td>Type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtype
<td>Subtype
<td><tt>&lt;String> | &lt;None></tt>
<td>
<tr>
<td>machine
<td>Machine
<td><tt>&lt;String></tt>
<td>
<tr>
<td>notifyBy
<td>Notify By
<td><tt>&lt;String></tt>
<td><tt>'Name' | 'Handle'</tt>
<tr>
<td>notifiee
<td>Notifiee
<td><tt>&lt;String></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
<ol compact>
<li>If "Subtype" is &lt;None>, this indicates that a process did not
specify a specific subtype when registering so that any subtype for an event
with the specified type will match.
<li>"Machine" is the machine which registered to be notified for this event.
<li>"Notify By" indicates whether the process registered by handle name ('Name')
or by handle number ('Handle').
<li>"Notifiee" is the handle name or handle number of the process that
registered to be notified of this event.
</ol>
</tr>
</tfoot>
</table>
<p>
<li>The result buffer for a 
<tt>LIST REGISTRATIONS LONG</tt>
request will contain a marshalled
<tt>
&lt;List> of &lt;Map:STAF/Service/Event/ListRegistrationsLong></tt>
which represents a list of registrations for events.
The map is defined as follows:
<p>
<table border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/ListRegistrationsLong</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents a registration
for an event, with detailed information.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>type
<td>Type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtype
<td>Subtype
<td><tt>&lt;String> | &lt;None></tt>
<td>
<tr>
<td>machine
<td>Machine
<td><tt>&lt;String></tt>
<td>
<tr>
<td>notifyBy
<td>Notify By
<td><tt>&lt;String></tt>
<td><tt>'Name' | 'Handle'</tt>
<tr>
<td>notifiee
<td>Notifiee
<td><tt>&lt;String></tt>
<td>
<tr>
<td>attempts
<td>Max Attempts
    <br>(Att)
<td><tt>&lt;String></tt>
<td>
<tr>
<td>timeout
<td>Timeout
<td><tt>&lt;String></tt>
<td>
<tr>
<td>priority
<td>Priority
    <br>(P)
<td><tt>&lt;String></tt>
<td>
<tr>
<td>priorityDelta
<td>Priority Delta
    <br>(D)
<td><tt>&lt;String></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
<ol compact>
<li>If "Subtype" is &lt;None>, this indicates that a process did not
specify a specific subtype when registering so that any subtype for an event
with the specified type will match.
<li>"Machine" is the machine which registered to be notified for this event.
<li>"Notify By" indicates whether the process registered by handle name ('Name')
or by handle number ('Handle').
<li>"Notifiee" is the handle name or handle number of the process that
registered to be notified of this event.
<li>"Max Attempts" is the maximum number of attempts that will be made to
notify a registered process that this event occurred, specified when
registering the type/subtype (or the default if not specified).
<li>"Timeout" is the acknowledge timeout, the length of time in
milliseconds between notification attempts, specified when registering the
type/subtype (or the default if not specified).
<li>"Priority" is the starting priority specified when registering the
type/subtype (or the default if not specified).
<li>"Priority Delta" is a number that will be used to decrement the priority
after each notification attempt, specified when registering the type/subtype
(or the default if not specified).
</ol>
</tr>
</tfoot>
</table>
<p>
<li>The result buffer for a 
<tt>LIST EVENTIDS</tt>
request (without the LONG option) will contain a marshalled
<tt>
&lt;List> of &lt;Map:STAF/Service/Event/EventID></tt>
which represents a list of event IDs with at least one pending notification.
The maps is defined as follows:
<p>
<table id=eventIDTable border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/EventID</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents an event ID that
has at least one pending notification.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=20%>Type
<th width=20%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>eventID
<td>Event ID
<td><tt>&lt;String></tt>
<td>
<tr>
<td>type
<td>Type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtype
<td>Subtype
<td><tt>&lt;String></tt>
<td>
<tr>
<td>numNotifiees
<td># Notifiees
<td><tt>&lt;String></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
The "# Notifiees" value is set to the number of registered processes
that have been notified, but have not yet acknowledged, the event ID.
There will be at least 1 notifiee. 
</tr>
</tfoot>
</table>
<p>
<li>The result buffer for a
<tt>LIST EVENTIDS LONG</tt>
request will contain a marshalled
<tt>
&lt;List> of &lt;Map:STAF/Service/Event/EventIDLong></tt>
which represents a more detailed of event IDs with at least one pending
notification.
See table <a href="#eventIDLongTable">"Definition of map class
STAF/Service/Event/EventIDLong"</a> for a description of this map.
<p>
<li>The result buffer for a <tt>LIST SETTINGS</tt> request will 
contain a marshalled <tt>&lt;Map:STAF/Service/Event/Settings></tt>
which represents a list of the operational settings for the Event service.
The map is defined as follows:
<p>
<table border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/Settings</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents the operational
settings for the service.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>maxAttempts
<td>Maximum Attempts
<td><tt>&lt;String></tt>
<td>
<tr>
<td>ackTimeout
<td>Acknowledge Timeout
<td><tt>&lt;String></tt>
<td>
<tr>
<td>priority
<td>Priority
<td><tt>&lt;String></tt>
<td>
<tr>
<td>priorityDelta
<td>Priority Delta
<td><tt>&lt;String></tt>
<td>
</tbody>
</table>
</ul>

<h4>Examples</h4>

<p>For the following examples, assume that there are only&nbsp; 2 processes
registered, both for TYPE build (SpanishJavaTest and EnglishJavaTest).
SpanishJavaTest is registered only for SUBTYPE Sp.&nbsp; EnglishJavaTest
is not registered for any&nbsp; specific SUBTYPE's. Both processes are
runing on machine client2.austin.ibm.com.
All option values are the default REGISTRATION values.
<p>
<ul>
<li><b>Goal:</b> List all types:
<p>
<tt>LIST TYPES</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the default format, would look like:
<p>
<pre>
build
</pre>
<p>
<li><b>Goal:</b> List all event types, along with their subtypes:
<p>
<tt>LIST TYPES</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the verbose format, would look like:
<pre>
[
  {
    Type    : build
    Subtypes: [
      sp
    ]
  }
]
</pre>
<p>
<li><b>Goal:</b> List all subtypes of type build:
<p>
<tt>LIST SUBTYPES TYPE build</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the default format, would look like:
<pre>
Sp
</pre>
<p>
<li><b>Goal:</b> List all registered processes (in the short format):
<p>
<tt>LIST REGISTRATIONS</tt>
<p>Result:
<p>
<pre>
Type  Subtype Machine                Notify By Notifiee
----- ------- ---------------------- --------- ---------------
build Sp      client2.austin.ibm.com Name      SpanishJavaTest
build &lt;None>  client2.austin.ibm.com Name      EnglishJavaTest
</pre>
<p>
<li><b>Goal:</b> List all registered processes (in the long format):
<p>
<tt>LIST REGISTRATIONS LONG</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the verbose format, would look like:
<p>
<pre>
[
  {
    Type          : build
    Subtype       : Sp
    Machine       : client2.austin.ibm.com
    Notify By     : Name
    Notifiee      : SpanishJavaTest
    Max Attempts  : 1
    Timeout       : 60000
    Priority      : 5
    Priority Delta: 1
  }
  {
    Type          : build
    Subtype       : &lt;None>
    Machine       : client2.austin.ibm.com
    Notify By     : Name
    Notifiee      : EnglishJavaTest
    Max Attempts  : 1
    Timeout       : 60000
    Priority      : 5
    Priority Delta: 1
  }
]
</pre>
<p>
<li><b>Goal:</b> List processes registered to be notified of event
type build (in the short format):
<p>
<tt>LIST REGISTRATIONS TYPE build</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the table format, would look like:
<p>
<pre>
Type  Subtype Machine                Notify By Notifiee
----- ------- ---------------------- --------- ---------------
build Sp      client2.austin.ibm.com Name      SpanishJavaTest
build &lt;None>  client2.austin.ibm.com Name      EnglishJavaTest
</pre>
<p>
<p>
<li><b>Goal:</b> List processes registered to be notified of event
type build and subtype Sp (in the long format):
<p>
<tt>LIST REGISTRATIONS TYPE build SUBTYPE Sp LONG</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the verbose format, would look like:
<p>
<pre>
[
  {
    Type          : build
    Subtype       : Sp
    Machine       : client2.austin.ibm.com
    Notify By     : Name
    Notifiee      : SpanishJavaTest
    Max Attempts  : 1
    Timeout       : 60000
    Priority      : 5
    Priority Delta: 1
  }
]
</pre>
<p>
<li><b>Goal:</b> List all processes that have been notified about any Event ID but
have not yet acknowledged (assume 2 events of TYPE build have generated,
and one event of TYPE build and SUBTYPE en,
generated from the STAF command line with generating handle 30, and event ID's
310 and 311, respectively):
<p>
List in the short format:
<p>
<tt>LIST EVENTIDS</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the table format, would look like:
<pre>
Event ID Type  Subtype # Notifiees
-------- ----- ------- -----------
310      build Sp      2
311      build En      1
</pre>
<p>
List in the long format:
<p>
<tt>LIST EVENTIDS LONG</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the verbose format, would look like:
<pre>
[
  {
    Event ID             : 310
    Type                 : build
    Subtype              : Sp
    Properties           : {
      Status : Passed BVT
      Version: 2.1.0
    }
    Generated By         : {
      Machine    : client2.austin.ibm.com
      Handle Name: STAF/Client
      Handle     : 30
    }
    Pending Notifications': [
      {
        Machine           : client2.austin.ibm.com
        Notify By         : Name
        Notifiee          : SpanishJavaTest
        Attempts Remaining: 0
        Timeout           : 60000
        Priority          : 4
        Priority Delta    : 1
      }
      {
        Machine           : client2.austin.ibm.com
        Notify By         : Name
        Notifiee          : EnglishJavaTest
        Attempts Remaining: 0
        Timeout           : 60000
        Priority          : 4
        Priority Delta    : 1
      }
    ]
  }
  {
    Event ID             : 311
    Type                 : build
    Subtype              : En
    Properties           : {
      Status : Failed BVT
      Version: 2.1.0
    }
    Generated By         : {
      Machine    : client2.austin.ibm.com
      Handle Name: STAF/Client
      Handle     : 30
    }
    Pending Notifications: [
      {
        Machine           : client2.austin.ibm.com
        Notify By         : Name
        Notifiee          : EnglishJavaTest
        Attempts Remaining: 0
        Timeout           : 60000
        Priority          : 4
        Priority Delta    : 1
      }
    ]
  }
]
</pre>
<p>
<li><b>Goal:</b> List the operational settings for the event service:
<p>
<tt>LIST SETTINGS</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result could look like:
<pre>
Maximum Attempts       : 1
Acknowledgement Timeout: 60000
Priority               : 5
Priority Delta         : 1
</pre>
</ul>

<h2>
<a NAME="Header_Query" href="#ToC_Query">QUERY</a></h2>
<p>
QUERY returns information about the specified event ID including its event
type, subtype, and properties, who generated the event, and the pending
notifications for this event.  A pending notification
is one where a registered process was been notified but has not yet
acknowledged the event ID.  Only event IDs with one or more pending
notifications can be queried.
<p>
<h4>Syntax</h4>

<p>
<tt>
QUERY EVENTID &lt;Event ID> [LONG]</tt>
<p>
<p>
<tt>EVENTID</tt> specifies
the event ID to query. 
<p>
<tt>LONG</tt> specifies
to provide more information about the pending notifications for the
specified event ID instead of just the number of pending notifications.

<h4>Security</h4>

<p>This command requires trust level 2.

<h4>Results</h4>

<p>
Upon successful return:
<p>
<ul>
<li>The result buffer for a 
<tt>"QUERY EVENTID &lt;Event ID>"</tt>
request will contain a marshalled
<tt>&lt;Map:STAF/Service/Event/QueryEventID></tt>
which represents an event ID that has at least one pending notification.
The maps are defined as follows:
<p>
<table id=eventIDTable border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/QueryEventID</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents an event ID that
has at least one pending notification.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>eventID
<td>Event ID
<td><tt>&lt;String></tt>
<td>
<tr>
<td>type
<td>Type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtype
<td>Subtype
<td><tt>&lt;String></tt>
<td>
<tr>
<td>propertyMap
<td>Properties
<td><tt>&lt;Map></tt>
<td>Private data will be masked.
<tr>
<td>generatedBy
<td>Generated By
<td><tt>&lt;Map:STAF/Service/Event/Generator></tt>
<td>
<tr>
<td>numNotifiees
<td># Notifiees
<td><tt>&lt;String></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
<ol compact>
<li>Each entry in the "Properties" map will have a key set to the specified property name,
and the value will be set to the specified value for the property (or &lt;None> if
no value is specified).
<li>The "# Notifiees" value is set to the number of registered processes
that have been notified, but have not yet acknowledged, the event ID.
There will be at least 1 notifiee. 
</tr>
</tfoot>
</table>
<p>
<table border id="generatorTable">
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/Generator</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents who generated
the event ID.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>machine
<td>Machine
<td><tt>&lt;String></tt>
<td>
<tr>
<td>handleName
<td>Handle Name
<td><tt>&lt;String></tt>
<td>
<tr>
<td>handle
<td>Handle
<td><tt>&lt;String></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
<ol compact>
<li>"Machine" is the machine where the event ID was generated.
<li>"Handle Name" is the handle name of the process that generated the event ID.
<li>"Handle" is the handle number of the process that generated the event ID.
</ol>
</tr>
</tfoot>
</table>
<p>
<li>The result buffer for a 
<tt>"QUERY EVENTID &lt;Event ID> LONG"</tt>
request will contain a marshalled
<tt>&lt;Map:STAF/Service/Event/EventIDLong></tt>
which represents an event ID that has at least one pending notification.  This
map class provides additional information about the pending notifications for
the event ID.
The maps are defined as follows:
<p>
<table id=eventIDLongTable border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/EventIDLong</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents an event ID that
has at least one pending notification and provided more detailed information
about the event ID.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=40%>Type
<th width=20%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>eventID
<td>Event ID
<td><tt>&lt;String></tt>
<td>
<tr>
<td>type
<td>Type
<td><tt>&lt;String></tt>
<td>
<tr>
<td>subtype
<td>Subtype
<td><tt>&lt;String></tt>
<td>
<tr>
<td>propertyMap
<td>Properties
<td><tt>&lt;Map></tt>
<td>Private data will be masked.
<tr>
<td>generatedBy
<td>Generated By
<td><tt>&lt;Map:STAF/Service/Event/Generator></tt>
<td>
<tr>
<td>notificationList
<td>Pending Notifications
<td><tt>&lt;List> of &lt;Map:STAF/Service/Event/PendingNotification></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
<ol compact>
<li>Each entry in the "Properties" map will have a key set to the specified property name,
and the value will be set to the specified value for the property (or &lt;None> if no
value is specified).
<li>See table <a href="#generatorTable">"Definition of map class STAF/Service/Event/Generator"</a>
for a description of this map.
<li>Each entry in the "Pending Notifications" list contains information about
a registered process that has been notified, but have not yet acknowledged,
the event ID.  There will be at least 1 notifiee in the list.
</ol>
</tr>
</tfoot>
</table>
<p>
<table border>
<thead>
<tr>
<th COLSPAN="4">Definition of map class STAF/Service/Event/PendingNotification</th>
</tr>
<tr>
<td colspan="4"><b>Description: </b>This map class represents a pending
notification for the event ID.</td>
</tr>
<tr>
<th width=20%>Key Name
<th width=20%>Display Name
<th width=30%>Type
<th width=30%>Format / Value
</tr>
</thead>
<tbody>
<tr>
<td>machine
<td>Machine
<td><tt>&lt;String></tt>
<td>
<tr>
<td>notifyBy
<td>Notify By
<td><tt>&lt;String></tt>
<td><tt>'Name' | 'Handle'</tt>
<tr>
<td>notifiee
<td>Notifiee
<td><tt>&lt;String></tt>
<td>
<tr>
<td>attempts
<td>Attempts Remaining
<td><tt>&lt;String></tt>
<td>
<tr>
<td>timeout
<td>Timeout
<td><tt>&lt;String></tt>
<td>
<tr>
<td>priority
<td>Priority
<td><tt>&lt;String></tt>
<td>
<tr>
<td>priorityDelta
<td>Priority Delta
<td><tt>&lt;String></tt>
<td>
</tbody>
<tfoot>
<tr>
<td colspan="4">
<b>Notes:</b>
<ol compact>
<li>"Machine" is the machine which registered to be notified for this event.
<li>"Notify By" indicates whether the process registered by handle name ('Name')
or by handle number ('Handle').
<li>"Notifiee" is the handle name or handle number of the process that
registered to be notified of this event.
<li>"Attempts Remaining" is the number of attempts remaining to notify the
registered process that this event occurred.
<li>"Timeout" is the acknowledge timeout which is the length of time in
milliseconds between notification attempts.
<li>"Priority" is the current priority.
<li>"Priority Delta" is a number that is used to decrement the priority
after each notification attempt.
</ol>
</tr>
</tfoot>
</table>

</ul>

<h4>Examples</h4>

<p>For the following examples, assume that there are 2 processes
(SpanishFVTTest and SpanishSVTTest) registered
for events with <tt>TYPE</tt>
build and <tt>SUBTYPE</tt>
Sp. Process SpanishFVTTest is running on machine client2.austin.ibm.com and
process SpanishSVTTest is running on machine client3.austin.ibm.com.
All option values are the default registration values.
<p>
<ul>
<li><b>Goal:</b> Query processes that have been notified about Event ID 310
(of <tt>TYPE</tt> build,
<tt>SUBTYPE</tt> sp,
<tt>PROPERTY</tt> Version=2.1.0,
and <tt>PROPERTY</tt> "Status=Passed BVT",
generated from the STAF command line on machine client1.austin.ibm.com by handle 25),
but which have not yet been acknowledged.
<p>
<tt>
QUERY EVENTID 310</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the verbose format, would look like:
<pre>
(
  Event ID    : 310
  Type        : build
  Subtype     : Sp
  Properties  : {
    Status : Passed BVT
    Version: 2.1.0
  }
  Generated By: {
    Machine    : client1.austin.ibm.com
    Handle Name: STAF/Client
    Handle     : 25
  }
  # Notifiees : 2
}
</pre>
<p>
<li><b>Goal:</b> Query processes that have been notified about Event ID 310
(of <tt>TYPE</tt> build,
<tt>SUBTYPE</tt> sp,
<tt>PROPERTY</tt> Version=2.1.0,
and <tt>PROPERTY</tt> "Status=Passed BVT",
generated from the STAF command line on machine client1.austin.ibm.com by handle 25),
but which have not yet been acknowledged.
Use the <tt>LONG</tt>
format option:
<p>
<tt>
QUERY EVENTID 310 LONG</tt>
<p><b>Result:</b>&nbsp; If the request is submitted from the command line,
the result, in the verbose format, would look like:
<pre>
{
  Event ID             : 310
  Type                 : build
  Subtype              : Sp
  Properties           : {
    Status : Passed BVT
    Version: 2.1.0
  }
  Generated By         : {
    Machine    : client1.austin.ibm.com
    Handle Name: STAF/Client
    Handle     : 25
  }
  Pending Notifications: [
    {
      Machine           : client2.austin.ibm.com
      Notify By         : Name
      Notifiee          : SpanishFVTTest
      Attempts Remaining: 0
      Timeout           : 60000
      Priority          : 4
      Priority Delta    : 1
    }
    {
      Machine           : client3.austin.ibm.com
      Notify By         : Name
      Notifiee          : SpanishSVTTest
      Attempts Remaining: 0
      Timeout           : 60000
      Priority          : 4
      Priority Delta    : 1
    }
  ]
}
</pre>
</ul>

<h2>
<a NAME="Header_Reset" href="#ToC_Reset">RESET</a></h2>

<p>RESET clears all information about the registered and/or generated events.

<h4>Syntax</h4>

<p>
<tt>
RESET&nbsp; &lt;REG | GEN> FORCE
</tt>

<p>
<tt>REG</tt>
indicates that all information about the currently registered events is to be cleared.
<p>
<tt>GEN</tt>
indicates that all information about the currently generated events is to be cleared.
<p>
<tt>FORCE</tt>
is a confirmation that you want the specified information to be cleared.

<h4>Security</h4>

<p>This command requires trust level 4.

<h4>Results</h4>

<p>On a successful reset, the result buffer will be empty.

<h4>Examples</h4>
<p>
<ul>
<li><b>Goal:</b> Clear all information about the currently registered events.
<p>
<tt>RESET REG FORCE</tt>
<p>
<li><b>Goal:</b> Clear all information about the currently generated events.
<p>
<tt>RESET GEN FORCE</tt>
</ul>


<h2><a NAME="Header_Version" href="#ToC_Version">VERSION</a></h2>

VERSION displays the Event Service version.

<h4>Syntax</h4>

<tt>VERSION</tt>

<h4>Security</h4>

This request requires at least trust level 1.

<h4>Results</h4>

The result is the version number of the Event service.

<h4>Examples</h4>

<ul>
<li><b>Goal:</b> Display the version of the Event service on machine server1.company.com:
<p><tt>STAF server1.company.com EVENT VERSION</tt>
<p><b>Output:</b>
<pre>
3.1.5
</pre>
</ul>

<h2><a NAME="Header_Help" href="#ToC_Help">HELP</a></h2>

HELP displays the request options and how to use them.

<h4>Syntax</h4>

<tt>HELP</tt>

<h4>Security</h4>

This request requires at least trust level 1.

<h4>Results</h4>

The result buffer contains the Help messages for the request options for
the Event service.

<h4>Examples</h4>

<ul>
<li><b>Goal:</b> Display the syntax for the EVENT service requests:
<p><tt>STAF local EVENT HELP</tt>
<p><b>Output:</b>
<pre>
EVENT Service Help

REGISTER          TYPE &lt;Type> [SUBTYPE &lt;Subtype>]...
                  [ACKNOWLEDGETIMEOUT &lt;Timeout>] [MAXATTEMPTS &lt;Number>]
                  PRIORITY &lt;Number>] [PRIORITYDELTA &lt;Number>]
                  [BYNAME | BYHANDLE]

UNREGISTER        TYPE &lt;Type> [SUBTYPE &lt;Subtype>]...
                  [FORCE [MACHINE &lt;Machine>] [HANDLE &lt;Handle> | NAME &lt;Name>]]

ACKNOWLEDGE       EVENTID &lt;Event ID>
                  [FORCE [MACHINE &lt;Machine>] [HANDLE &lt;Handle> | NAME &lt;Name>]]

GENERATE          TYPE &lt;Type> SUBTYPE &lt;Subtype> [PROPERTY &lt;Name>[=&lt;Value>]]...

LIST              TYPES [LONG]
LIST              SUBTYPES TYPE &lt;Type>
LIST              REGISTRATIONS [TYPE &lt;Type> [SUBTYPE &lt;Subtype>]] [LONG]
LIST              EVENTIDS [LONG]
LIST              SETTINGS

QUERY             EVENTID &lt;Event ID> [LONG]

RESET             &lt;REG | GEN> FORCE

VERSION

HELP</pre>
</ul>

<p>
<hr>
<p>
<h1>
<a NAME="Header_ErrorCodes" href="#ToC_ErrorCodes">Error Code Reference</a></h1>
<p>
In addition to the common STAF return codes (see Appendix A, "API Return
Codes" in the STAF User's Guide for additional information),
the following Event Service return codes are defined:
<br>&nbsp;
<table BORDER CELLPADDING=4 BORDERCOLOR="#000000" >
<tr>
<td ALIGN=LEFT VALIGN=TOP WIDTH="13%"><b>Error Code</b></td>
<td ALIGN=LEFT VALIGN=TOP WIDTH="27%"><b>Meaning</b></td>
<td ALIGN=LEFT VALIGN=TOP WIDTH="60%"><b>Comment</b></td>
</tr>

<tr>
<td ALIGN=CENTER VALIGN=TOP><b>4001</b></td>
<td ALIGN=LEFT VALIGN=TOP>No Acknowledgement Pending</td>
<td ALIGN=LEFT VALIGN=TOP>Event Service has already received an acknowledgement
for this event from the acknowledgeing process</td>
</tr>

<tr>
<td ALIGN=CENTER VALIGN=TOP><b>4002</b></td>
<td ALIGN=LEFT VALIGN=TOP>No such event ID</td>
<td ALIGN=LEFT VALIGN=TOP>An acknowledgement was received but no event
with the submitted Event ID has been generated.</td>
</tr>

<tr>
<td ALIGN=CENTER VALIGN=TOP><b>4003</b></td>
<td ALIGN=LEFT VALIGN=TOP>Not Registered for Type</td>
<td ALIGN=LEFT VALIGN=TOP>A process tried to unregister for an event Type
that it was not currently registered for.</td>
</tr>

<tr>
<td ALIGN=CENTER VALIGN=TOP><b>4004</b></td>
<td ALIGN=LEFT VALIGN=TOP>Not Registered for Subtype</td>
<td ALIGN=LEFT VALIGN=TOP>A process tried to unregister for an event Subype
that it was not currently registered for.</td>
</tr>

<tr>
<td ALIGN=CENTER VALIGN=TOP><b>4005</b></td>
<td ALIGN=LEFT VALIGN=TOP>No clients registered</td>
<td ALIGN=LEFT VALIGN=TOP>No clients were registered for the event.&nbsp;</td>
</tr>
</table>

<p>
<hr>
<p>
<h1><a NAME="Header_EventManager" href="#ToC_EventManager">EventManager Service</a></h1>
<p>
Using the EventManager service can simplify using the Event service.
The EventManager service allows you to register with the Event service
in order to execute a STAF service request when an event type/subtype is
generated.  When an event is generated, the Event Service sends a
STAF/Service/Event message to the EventManager service machine that
registered for the event and the EventManager submits the STAF service
request that was registered for the event type/subtype.  This way, you
don't have to write a program to listen for STAF/Service/Event messages
on your queue because the EventManager service does this for you.
The EventManager also provides a User Interface to simplify interaction
with the EventManager service.
<p>
The EventManager service is a STAF Java service available via
<a href="http://staf.sourceforge.net/getservices.php#EventManager">
http://staf.sourceforge.net/getservices.php#EventManager</a>.
For more information on the EventManager service, see the
<a href="http://staf.sourceforge.net/current/eventmanager.pdf">
EventManager Service User's Guide</a>.  Also, for an example of how you
can use the EventManager service to simplify interaction with the Event
service, see <a href="#Header_Example2">Example 2: Using the EventManager
Service</a> in this document.
<p>
<hr>
<p>
<h1><a NAME="Header_Examples" href="#ToC_Examples">Examples</a></h1>
<p>
Here are a couple of examples that demonstrate how you can use the Event service.

<h2><a NAME="Header_Example1" href="#ToC_Example1">
Example 1: Using the Event Service via Two Java Applications</a></h2>
<p>
This example shows how one process (in this case, a Java application) creates new
builds for a product named MyApp.  Whenever it generates a new build, it submits
a GENERATE request to the Event service.  The GENERATE request must specify the
event type and subtype of the event it is generating via the TYPE and SUBTYPE
options.  Optionally, it can specify one or more properties if you want to provide
additional information in the event message that gets generated.  Whenever an event
is generated, the Event service creates an event ID that is associated with the
event.  This example has a second process (in this case, another Java application) 
that wants to be notified when these build events occurs.  So, it submits a REGISTER
request to the Event service, specifying the event type for which it is registering,
and optionally, it can specify an event subtype if it only wants to be notified when
a particular event subtype is generated.
You can also specify whether to register to be notified by your handle's name
(via the BYNAME option, which is the default) or by your handle's number (via
the BYHANDLE option).  When an event with this type/subtype is generated, a message
about this event will be automatically sent to the queue of the handle(s) that are
registered to be notified about this event.  The process(es) whose STAF handle is
sent the event message can get the message by submitting a GET request to the QUEUE
service. Generally, you'd have your process run a separate thread that has a loop
to continually receive event messages by submitting a GET WAIT request to the QUEUE
service on the local machine so that when a message appears on your queue the QUEUE
GET WAIT request completes and you can process that message and then continue on in
the loop to wait for more messages on your queue. 
<p> 
The first Java application is named MyAppBuild.java and generates two events
when it creates a build for a product named MyApp: 
<ol compact>
<li>An event with type <i>build</i> and subtype <i>win32</i> with a couple of
    properties (buildFile, buildType) 
<li>An event with type <i>build</i> and subtype <i>linux</i> with a couple of
    properties (buildFile, buildType) 
</ol>
<p> 
The second Java application is named MyAppTest.java and it registers to be
notified when any event with type "build" is generated.  It runs a thread
that listens for STAF/Service/Event type messages and for each message with
event type <i>build</i>, prints a message about the STAF/Service/Event
type message it received on its queue.  Note that in a real example,
it would do something more useful when it receives a event message such as
installing this build of MyApp on a test machine and running tests on it. 
<p> 
To run this example, compile both files and then from one command prompt,
run MyAppTest, and from another command prompt, run MyAppBuild.java.
Note that you can kill MyAppTest when the test completes to end it. 
<p> 
For example (assuming the directory containing MyAppBuild.class and
MyAppTest.class is in the CLASSPATH), here's the output you could get
running these two Java applications.  Note that if you run these Java
applications on a machine other than the machine where you have the Event
service registered, you'll need to modify the two .java files to set
fEventServiceName to the host name or IP address of the machine the Event
service is registered. 
 
<ul>
<font color="darkblue">
<pre>
C:\>java MyAppTest 
 
Registered to be notified when event type 'build' with any subtype is generated 
 
Starting thread to listen for STAF/Service/Event messages... 
 
Received STAF/Service/Event message: 
Event Service : Event 
Event ID : 24 
Event Type : build 
Event Subtype : win32 
Generating Machine: local://local 
Generating Process: MyApp/Build 
Generating Handle : 64 
Event Timestamp : 20090430-15:01:36 
Properties : {buildID=MyApp123, buildFile=C:/Builds/MyApp-win32.zip} 
 
Received STAF/Service/Event message: 
Event Service : Event 
Event ID : 25 
Event Type : build 
Event Subtype : linux 
Generating Machine: local://local 
Generating Process: MyApp/Build 
Generating Handle : 64 
Event Timestamp : 20090430-15:01:41 
Properties : {buildID=MyApp456, buildFile=C:/Builds/MyApp-linux.zip} 
</pre>
</font>
</ul>

<ul>
<font color="darkblue">
<pre>
C:\>java MyAppBuild 
 
Building a Windows 32-bit build for MyApp... 
Generated event ID 24 for the win32 build for MyApp 
 
Building a Linux build for MyApp... 
Generated event ID 25 for the linux build for MyApp 
</pre>
</font>
</ul>
 
Here's the source code for MyAppBuild.java:

<ul>
<font color="blue">
<pre>
import com.ibm.staf.*;
import java.util.*;
import java.io.*;

public class MyAppBuild
{
    // Specify the machine where the Event service is registered
    private String fEventServiceMachine = "local";

    private STAFHandle fHandle = null;
    private String eventType = "build";

    public static void main(String[] args)
    {
        MyAppBuild build = new MyAppBuild();

        try
        {
            // Pretend that it is building a Windows 32-bit build for MyApp

            System.out.println(
                "\nBuilding a Windows 32-bit build for MyApp...");
            Thread.sleep(5000);  // Sleep for 5 seconds

            // Generate an event with type build and subtype win32 to indicate
            // that a Windows 32-bit build for MyApp has been created.
            // Also, specify some properties like the name of the build file
            // created and its build id.     

            build.generateEvent(
                "win32", "C:/Builds/MyApp-win32.zip", "MyApp123");

            // Pretend that it is building a Linux build for MyApp

            System.out.println(
                "\nBuilding a Linux build for MyApp...");
            Thread.sleep(5000);  // Sleep for 5 seconds

            // Generate an event with type build and subtype linux to indicate
            // that a Linux build for MyApp has been created.
            // Also, specify some properties like the name of the build file
            // created and its build id.
     
            build.generateEvent(
                "linux", "C:/Builds/MyApp-linux.zip", "MyApp456");
        }
        catch (Exception e)
        {
            System.out.println("Exception: " + e.toString());
            System.exit(1);
        }
    }

    public MyAppBuild()
    {
        // Register with STAF to create a STAF handle

        try
        {
            fHandle = new STAFHandle("MyApp/Build");
        }
        catch (STAFException e)
        {
            System.out.println("Exception: " + e.toString());
            System.exit(1);
        }
    }
    
    private void generateEvent(String eventSubtype, String buildFile,
                               String buildID)
    {
        // Generate an event with type build and the specified subtype to
        // indicate that a build for MyApp has been created.  Also,
        // the buildFile and buildID properties (these can be whatever
        // properties you want to provide).     

        String request = "GENERATE TYPE " + STAFUtil.wrapData(eventType) +
            " SUBTYPE " + STAFUtil.wrapData(eventSubtype) +
                " PROPERTY " + STAFUtil.wrapData("buildFile=" + buildFile) +
                " PROPERTY " + STAFUtil.wrapData("buildID=" + buildID);

        STAFResult res = fHandle.submit2(
            fEventServiceMachine, "Event", request);

        if (res.rc == STAFResult.Ok)
        {
            System.out.println(
                "Generated event ID " + res.result + " for the " +
                eventSubtype + " build for MyApp");
        }
        else
        {
            System.out.println(
                "STAF " + fEventServiceMachine + " Event " + request +
                "\nFailed with RC: " + res.rc + ", Result: " + res.result);
        }
    }
}
</pre>
</font>
</ul>

Here's the source code for MyAppTest.java:

<ul>
<font color="blue">
<pre>
import com.ibm.staf.*;
import java.util.*;
import java.io.*;

public class MyAppTest
{
    // Specify the machine where the Event service is registered
    private String fEventServiceMachine = "local";

    private STAFHandle fHandle = null;
    private MonitorThread fMonitorThread = null;
    private String eventType = "build";

    public static void main(String[] args)
    {
        MyAppTest test = new MyAppTest();
    }

    public MyAppTest()
    {
        // Register with STAF to create a STAF handle

        try
        {
            fHandle = new STAFHandle("MyApp/Test");
        }
        catch (STAFException e)
        {
            System.out.println("Exception: " + e.toString());
            System.exit(1);
        }

        try
        {
            // Register with the Event service to be notified when event type
            // "build" with any subtype is generated. 
            // Note this only has to be done once (before any events with this
            // type are generated).

            String request = "REGISTER TYPE " + STAFUtil.wrapData(eventType);

            STAFResult res = fHandle.submit2(
                fEventServiceMachine, "Event", request);

            if (res.rc == STAFResult.Ok)
            {
                System.out.println(
                    "\nRegistered to be notified when event type '" +
                    eventType + "' with any subtype is generated");
            }
            else
            {
                System.out.println(
                    "STAF " + fEventServiceMachine + " Event " + request +
                    "\nFailed with RC: " + res.rc + ", Result: " + res.result);
            }

            // Start a thread to listen for STAF/Service/Event messages on 
            // this application's STAF handle's queue

            System.out.println(
                "\nStarting thread to listen for STAF/Service/Event " +
                "messages...");

            fMonitorThread = new MonitorThread(fHandle);
            fMonitorThread.start();
        }
        catch (Exception e)
        {
            System.out.println("Exception: " + e.toString());
            System.exit(1);
        }
    }

    /**
     * This helper class thread loops continuously, waiting to get
     * messages on its queue with queue type STAF/Service/Event
     */ 
    class MonitorThread extends Thread
    {
        private STAFHandle fHandle;

        MonitorThread(STAFHandle handle)
        {
            fHandle = handle;
        }

        public void run()
        {
            STAFResult getResult = new STAFResult();
            Map queueMessageMap = null;

            for (;;)
            {
                // Need a try/catch block in case an error occurs getting
                // a message off the queue so we can continue processing
                // additional messages
                
                try
                {
                    getResult = fHandle.submit2(
                        "local", "QUEUE", "GET WAIT");
                
                    if (getResult.rc != 0)
                    {
                        System.out.println(
                            "ERROR: STAF local QUEUE GET WAIT failed." +
                            "\nRC: " + getResult.rc +
                            ", Result: " + getResult.result);
                        continue;
                    }
                
                    queueMessageMap = (Map)getResult.resultObj;
                    String queueType = (String)queueMessageMap.get("type");
                            
                    if (queueType == null)
                    {
                        continue;
                    }
                    else if (queueType.equalsIgnoreCase("STAF/Service/Event"))
                    {
                        if (!(queueMessageMap.get("message") instanceof Map))
                        {
                            System.out.println(
                                "Unsupported message format.  " +
                                "Ignoring this message.\n");                                
                            continue;
                        }

                        handleEventServiceMessage(
                            (Map)queueMessageMap.get("message"));
                    }
                    else
                    {
                        // Ignore other messages
                    }
                }
                catch (Exception e)
                {
                    System.out.println(
                        "Exception handling queued message. Exception:\n" +
                        e.toString() +
                        "\nQueued Message:\n" + queueMessageMap);                
                    e.printStackTrace();
                }
            }
        }
   
        private void handleEventServiceMessage(Map messageMap)
        {
            // A STAF/Service/Event message is a map containing keys:
            // eventServiceName, eventID, machine, handleName, handle,
            // timestamp, type, subtype, and propertyMap

            String eventService = (String)messageMap.get("eventServiceName");
            String eventID = (String)messageMap.get("eventID");
            String generatingMachine = (String)messageMap.get("machine");
            String generatingProcess = (String)messageMap.get("handleName");
            String generatingHandle = (String)messageMap.get("handle");
            String eventTimestamp = (String)messageMap.get("timestamp");
            String eventType = (String)messageMap.get("type");
            String eventSubtype = (String)messageMap.get("subtype");
            Map eventProperties = (Map)messageMap.get("propertyMap");

            System.out.println(
                "\nReceived STAF/Service/Event message: " +
                "\n  Event Service     : " + eventService +
                "\n  Event ID          : " + eventID +
                "\n  Event Type        : " + eventType +
                "\n  Event Subtype     : " + eventSubtype +
                "\n  Generating Machine: " + generatingMachine +
                "\n  Generating Process: " + generatingProcess +
                "\n  Generating Handle : " + generatingHandle +
                "\n  Event Timestamp   : " + eventTimestamp +
                "\n  Properties        : " + eventProperties);

            if (eventType.equals("build"))
            {
                String buildFile = (String)eventProperties.get("buildFile"); 
                String buildID = (String)eventProperties.get("buildID");

                // Could do something useful here like get the build for MyApp,
                // install the MyApp build on a test machine and run tests
                // on it
            }
        }
    }
}
</pre>
</font>
</ul>

<p>
<h2><a NAME="Header_Example2" href="#ToC_Example2">Example 2: Using the EventManager Service</a></h2>
<p>
Instead of writing a program that registers for an Event type/subtype
and continuously gets messages off it's queue, you could use the EventManager
service to register with the Event service and listen for events.
The EventManager service allows you to register with the Event service in
order to execute a STAF service request when an event type/subtype is
generated.  When an event is generated, the Event Service sends
a STAF/Service/Event message to the EventManager service machine and the
EventManager submits the STAF service request that was registered for the
event type/subtype.  The EventManager provides a User Interface to simplify
interaction with the EventManager service.  For more information on the
EventManager service, see the
<a href="http://staf.sourceforge.net/current/eventmanager.pdf">
EventManager Service User's Guide</a>.
<p>
Here's an example that uses the EventManager service to register for Event
type <i>build</i> and to submit a STAF service request that runs a Java
application named MyAppTest2 via a PROCESS START request when it gets
notified that a build for MyApp is available.
This example merely logs this information, but it could be changed to do
something more useful like get the build for MyApp and install it on a
test machine and run tests.
<p>
Here's how you could register with the EventManager service via its User
Interface for event type <i>build</i> to run the Java application MyAppTest2.
It uses the Python Prepare Script to generate the PROCESS START request
using Python variables provided.  For example, the subtype is provided
via Python variable eventsubtype (note that in this example, the event
subtype contains the operating system name for the build).  In addition,
it shows how to obtain any property values that were provided via the
<tt>eventInfo</tt> Python dictionary (aka map).  For example, it obtains
the <tt>buildFile</tt> property via Python variable <tt>eventInfo['buildFile']</tt>
and obtains the <tt>buildID</tt> property via Python variable
<tt>eventInfo['buildID']</tt>.  It provides these values as environment variables
using the ENV option for a PROCESS START request (though you could have
implemented this using a different method) so that the MyAppTest2 Java
application can access these values as environment variables.
<br><br>
<img src="example2.gif" alt="EventManager Example">
<br>
<p>
Note that you could have any STAF service request run instead of
submitting a PROCESS START request to run a Java application.  For example,
if you preferred, you could change the EventManager registration to submit
a STAX EXECUTE request to run a STAX job.
<p>
Here's the source code for the Java application, MyAppTest2.java, that
is run whenever an event with type <i>build</i> (and any subtype) is generated.

<ul>
<font color="blue">
<pre>
public class MyAppTest2
{
    public static void main(String[] args)
    {
        MyAppTest2 test = new MyAppTest2();
    }

    public MyAppTest2()
    {
        // The following environment variables should be set:
        // - MyApp/OSName:  The operating system for the MyApp build
        // - MyApp/BuildFile:  The name of the file containing the build
        //   for MyApp for this operating system
        // - MyApp/BuildID:  The build ID

        String osName = System.getenv("MyApp/OSName");
        String buildFile = System.getenv("MyApp/BuildFile"); 
        String buildID = System.getenv("MyApp/BuildID");

        System.out.println(
            "\nReceived MyApp build event: " +
            "\n  MyApp/OSName   : " + osName +
            "\n  MyApp/BuildFile: " + buildFile +
            "\n  MyApp/BuildID  : " + buildID);

        // Could do something use here like get the build for MyApp,
        // install the MyApp build on a test machine and run tests
        // on it
    }
}
</pre>
</font>
</ul>

You could generate build events for MyApp by running Java application
MyAppBuild from <a href="#Header_Example1">Example 1: Using the Event Service via
Two Java Applications</a>.
Here are the EventManager service log entries you could see when two events
are generated by MyAppBuild, one for a win32 build of MyApp and another for
a linux build of MyApp.

<ul>
<font color="darkblue">
<pre>
C:\>STAF -verbose local LOG QUERY MACHINE {STAF/Config/MachineNickname} LOGNAME
EventManager STARTSWITH "[ID=8]"
Response
--------
[
  {
    Date-Time: 20090504-15:19:07
    Level    : Info
    Message  : [ID=8] [local://local, STAF/EventManager/UI] Registered a STAF co
mmand.
Register request: REGISTER MACHINE :5:local SERVICE :7:PROCESS PYTHONREQUEST :7:
request PREPARE :515:envs = 'ENV MyApp/OSName=%s' % (eventsubtype)
envs = '%s ENV MyApp/BuildFile=%s' % (envs, eventinfo['buildFile'])
envs = '%s ENV MyApp/BuildID=%s' % (envs, eventinfo['buildID'])

# Assign directory name containing MyAppTest2.class
myDir = 'C:/dev/src/stax'
envs = '%s ENV CLASSPATH=%s{STAF/Config/Sep/Path}{STAF/Env/CLASSPATH}' % \
    (envs, myDir)

request = 'START SHELL COMMAND "java MyAppTest2"' + \
    ' TITLE "Test the MyApp Build for %s"' % (eventsubtype) + \
    ' RETURNSTDOUT STDERRTOSTDOUT %s' % (envs) TYPE :5:build DESCRIPTION :20:Tes
t the MyApp Build
  }
  {
    Date-Time: 20090504-15:32:25
    Level    : Info
    Message  : [ID=8] [mach1.austin.ibm.com:235] Submitted a STAF command.
Event information: type=build subtype=win32 prepare=envs = 'ENV MyApp/OSName=%s'
 % (eventsubtype)
envs = '%s ENV MyApp/BuildFile=%s' % (envs, eventinfo['buildFile'])
envs = '%s ENV MyApp/BuildID=%s' % (envs, eventinfo['buildID'])

# Assign directory name containing MyAppTest2.class
myDir = 'C:/dev/src/stax'
envs = '%s ENV CLASSPATH=%s{STAF/Config/Sep/Path}{STAF/Env/CLASSPATH}' % \
    (envs, myDir)

request = 'START SHELL COMMAND "java MyAppTest2"' + \
    ' TITLE "Test the MyApp Build for %s"' % (eventsubtype) + \
    ' RETURNSTDOUT STDERRTOSTDOUT %s' % (envs) eventservice=Event eventid=3 gene
ratingmachine=local://local generatingprocess=MyApp/Build generatinghandle=33 ev
enttimestamp=20090504-15:32:24 properties={buildID=MyApp123, buildFile=C:/Builds
/MyApp-win32.zip}
STAF command: STAF local PROCESS START NOTIFY ONEND HANDLE 23 SHELL COMMAND "jav
a MyAppTest2" TITLE "Test the MyApp Build for win32" RETURNSTDOUT STDERRTOSTDOUT
 ENV MyApp/OSName=win32 ENV MyApp/BuildFile=C:/Builds/MyApp-win32.zip ENV MyApp/
BuildID=MyApp123 ENV CLASSPATH=C:/dev/src/stax{STAF/Config/Sep/Path}{STAF/Env/CL
ASSPATH}
  }
  {
    Date-Time: 20090504-15:32:25
    Level    : Pass
    Message  : [ID=8] [mach1.austin.ibm.com:235] Completed a STAF command. RC=0,
 Result=34
  }
  {
    Date-Time: 20090504-15:32:26
    Level    : Pass
    Message  : [ID=8] [mach1.austin.ibm.com:235] Process completed.
{
  Return Code: 0
  Key        : <None>
  Files      : [
    {
      Return Code: 0
      Data       :
Received MyApp build event:
  MyApp/OSName   : win32
  MyApp/BuildFile: C:/Builds/MyApp-win32.zip
  MyApp/BuildID  : MyApp123

    }
  ]
}
  }
  {
    Date-Time: 20090504-15:32:29
    Level    : Info
    Message  : [ID=8] [mach1.austin.ibm.com:253] Submitted a STAF command.
Event information: type=build subtype=linux prepare=envs = 'ENV MyApp/OSName=%s'
 % (eventsubtype)
envs = '%s ENV MyApp/BuildFile=%s' % (envs, eventinfo['buildFile'])
envs = '%s ENV MyApp/BuildID=%s' % (envs, eventinfo['buildID'])

# Assign directory name containing MyAppTest2.class
myDir = 'C:/dev/src/stax'
envs = '%s ENV CLASSPATH=%s{STAF/Config/Sep/Path}{STAF/Env/CLASSPATH}' % \
    (envs, myDir)

request = 'START SHELL COMMAND "java MyAppTest2"' + \
    ' TITLE "Test the MyApp Build for %s"' % (eventsubtype) + \
    ' RETURNSTDOUT STDERRTOSTDOUT %s' % (envs) eventservice=Event eventid=4 gene
ratingmachine=local://local generatingprocess=MyApp/Build generatinghandle=33 ev
enttimestamp=20090504-15:32:29 properties={buildID=MyApp456, buildFile=C:/Builds
/MyApp-linux.zip}
STAF command: STAF local PROCESS START NOTIFY ONEND HANDLE 23 SHELL COMMAND "jav
a MyAppTest2" TITLE "Test the MyApp Build for linux" RETURNSTDOUT STDERRTOSTDOUT
 ENV MyApp/OSName=linux ENV MyApp/BuildFile=C:/Builds/MyApp-linux.zip ENV MyApp/
BuildID=MyApp456 ENV CLASSPATH=C:/dev/src/stax{STAF/Config/Sep/Path}{STAF/Env/CL
ASSPATH}
  }
  {
    Date-Time: 20090504-15:32:30
    Level    : Pass
    Message  : [ID=8] [mach1.austin.ibm.com:253] Completed a STAF command. RC=0,
 Result=35
  }
  {
    Date-Time: 20090504-15:32:30
    Level    : Pass
    Message  : [ID=8] [mach1.austin.ibm.com:253] Process completed.
{
  Return Code: 0
  Key        : <None>
  Files      : [
    {
      Return Code: 0
      Data       :
Received MyApp build event:
  MyApp/OSName   : linux
  MyApp/BuildFile: C:/Builds/MyApp-linux.zip
  MyApp/BuildID  : MyApp456

    }
  ]
}
  }
]
</pre>
</font>
</ul>

<p>
</body>
</html>
