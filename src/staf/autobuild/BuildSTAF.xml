<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">

 <!-- ================================================================= -->
 <!-- STAX job to build STAF and the STAF service releases.             -->
 <!-- ================================================================= -->

<stax>

  <!-- Beginning of job -->

  <defaultcall function="StartBuild"/>

  <!-- Import necessary utilities -->

  <script>
    from com.ibm.staf import STAFUtil
    from com.ibm.staf import STAFResult as STAFRetCode
    import os
  </script>

  <!-- Default variables -->

  <script>

    staf_version = '3416'
    staf_long_version = '3.4.16'
    ia_staf_version = '3416'
    debug = 1
    buildVersion = 'mainline'
    stafVersionTag = '-D 20100101'
    buildType = 'retail'
    platform_name = 'main'

    srcTarMachine = 'staf1f.austin.ibm.com'
    srcTarFile = 'c:/temp/STAF3412-src.tar'

    holdAfterExtract = 0
    
    # Set to 1 to build STAF on all the platforms specified, or 0 to not build STAF
    buildSTAF = 1
    
    # Set to 1 to test STAF on all the platforms specified, or 0 to not test STAF
    testSTAF = 1
    
    # For platforms in this list, building the secure TCP/IP connection providers is disabled
    ssl_unsupported_platform_list = [ 'zos', 'zos64', 'win64' ]
    
    # Directory on local machine where STAFInstallAndTest.xml and STAFInstallUtil.xml reside
    automationDirectory = 'C:/automation'
    # Machine where the automationDirectory resides 
    automationMachine = 'local'

    ftp_machine_default = '9.3.211.227'
    ftp_path_default = '/root/build'
    
    import time
    from time import strftime
    startTime = time.strftime("%Y%m%d-%H:%M:%S")
    testStartTime = STAXGlobal('')
    
    # List of projects requiring Java 5.0 or later to build.
    # Note that STAX, Cron, and EventManager Java services use Jython 2.5.2 which requires Java 5.0 or later.
    java50ProjectList = ['stax', 'cron', 'eventmanager']
  </script>

  <script>
    build_platform_details = [

       # win32
       {
         'platform_name'      : 'win32',
         'platform_semaphore' : 'windows',
         'build_machine'      : 'staf1f.austin.ibm.com',
         'build_root'         : 'c:',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant',
                                  'rexx', 'utils', 'docs', 'demo', 'perl',
                                  'tcl', 'python', 'jython', 'stax',
                                  'eventmanager', 'cron', 'event', 'http',
                                  'sxe', 'timer', 'email', 'namedcounter',
                                  'device', 'fsext', 'namespace', 'ftp'
                                ],
         'make'               : 'make',
         'path_sep'           : ';',
         'bash_shell'         : 'c:\\cygwin\\bin\\bash',
         
         # Java directories used to build the 'java' project and to build Java services that are not in the java50ProjectList
         'java_v12_root'      : '/cygdrive/c/ibmjava142',
         'java_v12_bin_dir'   : '/cygdrive/c/ibmjava142/bin',
         
         # Java 5.0 directory used to build projects in the java50ProjectList.  Only need to specify if building a project in the java50ProjectList.
         'java_v50_root'      : '/cygdrive/c/ibmjava50',
         
         'openssl_root'       : 'c:/tools/openssl-0.9.8e-root',
         'ismp_exe_suffix'    : '.exe',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'win32',
         'test_using'         : 'IA',
         'build_osname'       : 'win32',
         'architecture'       : '32-bit',
         'osname'             : 'Windows',
         'osversion'          : '*',
         'osarch'             : 'x86',
         
         # Don't assign the STAX machine (staf1f) as a test machine or STAFTest.xml will have
         # failures because it will try to run the "local" tests (e.g. STAX, etc)
         'test_machine_list' : [
           { 'targetMachine'    : 'staf2d.austin.ibm.com',  # Win XP
             'targetInstallDir' : 'C:/temp/STAF_autoTest',
             'installFileSuffix': '.exe',     # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : 'C:/STAF/jre/bin'
           },
           #{ 'targetMachine'    : 'staf3c.austin.ibm.com',  # Win XP
           #  'targetInstallDir' : 'C:/temp/STAF_autoTest',
           #  'installFileSuffix': '.exe',     # Must be .exe or .bin or .tar.gz or .tar.Z
           #  'javaBinDir'       : 'C:/ibmjava50/jre/bin'
           #  Optional Arguments:
           #  'testDirectory': 'xxx' %       # Default is '%s/test' % (automationDirectory)
           #  'installerFile': 'xxx',        # If specified, installFileSuffix is not used
           #  ' installerMachine': 'xxx'      # Default is ftp_machine,
           #  'installShieldTempDir': 'xxx'  # Default is None,
           #  'port': 'xxxx',                # Default is '6599'
           #  'installType':  'xxx',         # 'Typical', 'Full', 'Minimal'.  Default is 'Typical'
           #  'updateEnvVars': 'xxx',        # 'None', 'System', 'User'.  Default is 'None'
           #  'tcpipVersion': 'xxx'          # 'IPv4 only', 'IPv4 and IPv6'.  Default is 'IPv4 only'
           #},
           { 'targetMachine'    : 'staf3f.austin.ibm.com',  # Windows Server 2008 32-bit
             'targetInstallDir' : 'C:/temp/STAF_autoTest',
             'installFileSuffix': '.exe',     # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : 'C:/ibmjava50/bin'
           }
           #{ 'targetMachine'    : 'staf3a.austin.ibm.com',  # Windows 7
           #  'targetInstallDir' : 'C:/temp/STAF_autoTest',
           #  'installFileSuffix': '.exe'      # Must be .exe or .bin or .tar.gz or .tar.Z
           #}
           #{ 'targetMachine'    : 'staf1d.austin.ibm.com',  # Win 2003
           #  'targetInstallDir' : 'C:/temp/STAF_autoTest',
           #  'installFileSuffix': '.exe'      # Must be .exe or .bin or .tar.gz or .tar.Z
           #}
           #{ 'targetMachine'    : 'staf2b.austin.ibm.com',  # Win NT
           #  'targetInstallDir' : 'C:/temp/STAF_autoTest',
           #  'installFileSuffix': '.exe'      # Must be .exe or .bin or .tar.gz or .tar.Z
           #}             
           ]
       },

       # win64
       {
         'platform_name'      : 'win64',
         'platform_semaphore' : 'windows',
         'build_machine'      : 'tcp://staf1f.austin.ibm.com',
         'build_root'         : 'c:',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'python'
                                ],
         'make'               : 'make',
         'path_sep'           : ';',
         'bash_shell'         : 'c:\\cygwin\\bin\\bash',
         'java_v12_root'      : '/cygdrive/c/ibmjava142',
         'java_v12_bin_dir'   : '/cygdrive/c/ibmjava142/bin',
         'openssl_root'       : 'c:/tools/openssl-0.9.8e-root-ia64',
         'ismp_exe_suffix'    : '.exe',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'win32',
         'test_using'         : 'IA',
         'build_osname'       : 'win32',
         'architecture'       : '64-bit',
         'osname'             : 'Windows',
         'osversion'          : '*',
         'osarch'             : 'ia64',
         'test_machine_list'  : [
           { 'targetMachine'    : 'tcp://staf4c.austin.ibm.com',
             'targetInstallDir' : 'C:/temp/STAF_autoTest',
             'installFileSuffix': '.exe',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'runSTAXLocally'   : 0  # No Java 5.0 or later for Windows IA64 so can't run STAX with Jython 2.5.2 locally
           } ]
       },

       # winamd64
       {
         'platform_name'      : 'winamd64',
         'platform_semaphore' : 'windows',
         'build_machine'      : 'staf1f.austin.ibm.com',
         'build_root'         : 'c:',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'perl',
                                  'python', 'tcl'
                                ],
         'make'               : 'make',
         'ms_vc_dir'          : 'c:/MVStudio8',
         'vs_common_dir'      : '',
         'path_sep'           : ';',
         'bash_shell'         : 'c:\\cygwin\\bin\\bash',
         'java_v12_root'      : '/cygdrive/c/ibmjava142',
         'java_v12_bin_dir'   : '/cygdrive/c/ibmjava142/bin',
         'openssl_root'       : 'c:/tools/openssl-0.9.8e-root-amd64',
         'ismp_exe_suffix'    : '.exe',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'win32',
         'test_using'         : 'IA',
         'build_osname'       : 'win32',
         'architecture'       : '64-bit',
         'osname'             : 'Windows',
         'osversion'          : '*',
         'osarch'             : 'amd64',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf4a.austin.ibm.com',  # Windows Server 2008 AMD64
             'targetInstallDir' : 'D:/temp/STAF_autoTest',
             'installFileSuffix': '.exe',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : 'D:/ibmjava50/jre/bin',
             'runSTAXLocally'   : 0  # Get RC 22 running STAFTest if run locally
           },
           { 'targetMachine'    : 'staf4b.austin.ibm.com',  # Windows Server 2012 x86_64
             'targetInstallDir' : 'C:/temp/STAF_autoTest',
             'installFileSuffix': '.exe',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : 'C:/STAF/jre/bin',
             'runSTAXLocally'   : 0  # Get RC 22 due to STAFProc crashing in ntdll.dll if run locally
           }
           ]
       },

       # linux
       {
         'platform_name'      : 'linux',
         'platform_semaphore' : 'linux',
         'build_machine'      : 'staf1e.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'perl', 'java',
                                  'ant', 'rexx', 'utils', 'docs', 'tcl',
                                  'python'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/opt/IBMJava2-142',
         'java_v12_bin_dir'   : '/opt/IBMJava2-142/bin',
         'rexx_root'          : '/opt/orexx',
         'rexx_libdirs'       : '/opt/orexx/lib',
         'rxpp_root'          : '/usr/local/rxpp',
         'b2h_root'           : '/usr/local/b2h',
         'saxon_root'         : '/usr/local/saxon',
         'docbook_root'       : '/usr/local/docbook',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'linux',
         'test_using'         : 'IA',
         'build_osname'       : 'linux',
         'architecture'       : '32-bit',
         'osname'             : 'Linux',
         'osversion'          : '*',
         'osarch'             : 'x86',
         'test_machine_list' : [
           { 'targetMachine'    : 'staf1e.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : '/opt/ibm-java-i386-60/bin'
           }
           # XXX: Some issues unregistering STAX after running STAFTest on staf6f
           #{ 'targetMachine'    : 'staf6f.austin.ibm.com',  # SMP Linux RedHat Rel 9
           #  'targetInstallDir' : '/tmp/STAF_autoTest',
           #  'installFileSuffix': '.tar.gz'  # Must be .exe or .bin or .tar.gz or .tar.Z
           #}
           ]
       },

       # linux-ppc64-32
       {
         'platform_name'      : 'linux-ppc64-32',
         'platform_semaphore' : 'linux-ppc64',
         'build_machine'      : 'staf4e.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'python'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/opt/IBMJava2-ppc-142', # '/opt/IBMJava2-ppc64-142-32',
         'java_v12_bin_dir'   : '/opt/IBMJava2-ppc-142/bin', #'/opt/IBMJava2-ppc64-142-32/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'test_using'         : 'IA',
         'ia_platform'        : 'linux',
         'build_osname'       : 'linux-ppc64-32',
         'openssl_root'       : '/opt/dev/autobuild/tools/openssl-0.9.8e-root-32',
         'architecture'       : '32-bit',
         'osname'             : 'Linux',
         'osversion'          : '*',
         'osarch'             : 'ppc64',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf4e.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : '/opt/ibm-java2-ppc-50/jre/bin'
             #'runSTAXLocally'   : 0   # If run locally, get RC 22 at various time(s) doing FS tests
           } ]
       },

       # linux-ppc64-64
       {
         'platform_name'      : 'linux-ppc64-64',
         'platform_semaphore' : 'linux-ppc64',
         'build_machine'      : 'staf4e.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'python'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/opt/IBMJava2-ppc64-142',
         'java_v12_bin_dir'   : '/opt/IBMJava2-ppc64-142/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'linux',
         'test_using'         : 'IA',
         'build_osname'       : 'linux-ppc64-64',
         'architecture'       : '64-bit',
         'osname'             : 'Linux',
         'osversion'          : '*',
         'osarch'             : 'ppc64',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf4e.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             #'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : '/opt/ibm-java2-ppc64-50/bin'
           } ]
       },

       # linux-amd64
       {
         'platform_name'      : 'linux-amd64',
         'platform_semaphore' : 'linuxamd64',
         'build_machine'      : 'staf4g.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'perl',
                                  'tcl', 'python'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/opt/IBMJava2-amd64-142',
         'java_v12_bin_dir'   : '/opt/IBMJava2-amd64-142/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'linux',
         'test_using'         : 'IA',
         'build_osname'       : 'linuxamd64',
         'architecture'       : '64-bit',
         'osname'             : 'Linux',
         'osversion'          : '*',
         'osarch'             : 'amd64',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf4g.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             #'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : '/opt/ibm-java-x86_64-60/jre/bin' #'/opt/IBMJava2-amd64-142/bin'
           } ]
       },

       # aix
       {
         'platform_name'      : 'aix',
         'platform_semaphore' : 'aix',
         'build_machine'      : 'staf5d.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant',
                                  'rexx', 'utils', 'demo', 'perl'
                                ],
         'make'               : '/usr/local/bin/make',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/usr/java14',
         'java_v12_bin_dir'   : '/usr/java14/bin',
         'rexx_root'          : '/usr/lpp/orexx',
         'rexx_libdirs'       : '/usr/lpp/orexx/lib',
         'rxpp_root'          : '/usr/local/rxpp',
         'b2h_root'           : '/usr/local/b2h',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'aix',
         'test_using'         : 'IA',
         'build_osname'       : 'aix',
         'architecture'       : '32-bit',
         'osname'             : 'AIX',
         'osversion'          : '6.1+',
         'osarch'             : 'ppc',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5d.austin.ibm.com',
             'targetInstallDir' : '/opt/STAF_autoTest', #'/usr/local/STAF_autoTest',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/opt/tmp_ia'  #'/usr/tmp_ia'
           } ]
       },

       # aix64
       {
         'platform_name'      : 'aix64',
         'platform_semaphore' : 'aix',
         'build_machine'      : 'staf5d.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant',
                                  'utils', 'demo'
                                ],
         'make'               : '/usr/local/bin/make',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/aix64java',
         'java_v12_bin_dir'   : '/opt/aix64java/bin',
         'rexx_root'          : '/usr/lpp/orexx',
         'rexx_libdirs'       : '/usr/lpp/orexx/lib',
         'rxpp_root'          : '/usr/local/rxpp',
         'b2h_root'           : '/usr/local/b2h',
         'openssl_root'       : '/opt/dev/autobuild/tools/openssl-0.9.8e-root-64',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'aix',
         'test_using'         : 'IA',
         'build_osname'       : 'aix64',
         'architecture'       : '64-bit',
         'osname'             : 'AIX',
         'osversion'          : '6.1+',
         'osarch'             : 'ppc64',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5d.austin.ibm.com',
             'targetInstallDir' : '/opt/STAF_autoTest64', # '/usr/local/STAF_autoTest64',
             'installFileSuffix': '.bin',  # If specify .bin, doesn't clean-up istemp* directories
             'installShieldTempDir': '/opt/tmp_ia64', #'/usr/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java-aix-ppc64-60/jre/bin'
           } ]
       },

       # solaris
       {
         'platform_name'      : 'solaris',
         'platform_semaphore' : 'solaris',
         'build_machine'      : 'staf5b.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'perl', 'python'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/ibmjava1.5',
         'java_v12_bin_dir'   : '/opt/ibmjava1.5/bin',
         'openssl_root'       : '/opt/dev/autobuild/tools/openssl-0.9.8e-root-32',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'solaris',
         'test_using'         : 'IA',
         'os_lib_files'       : ['libstdc++.so.6', 'libgcc_s.so.1'],
         'os_lib_dir'         : '/usr/sfw/lib/',
         'build_osname'       : 'solaris',
         'architecture'       : '32-bit',
         'osname'             : 'SunOS',
         'osversion'          : '5.10+',
         'osarch'             : 'sparc',
         'ismp_suffix'        : '-sparc',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5b.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             'installFileSuffix': '.bin',
             'javaBinDir'       : '/opt/ibmjava1.5/bin'
             #'runSTAXLocally'   : 0   # Because STAX tests sometimes fail with TypeError (which will be fixed when use Jython 2.2.1)
           } ]
       },

       # solaris-sparc64
       {
         'platform_name'      : 'solaris-sparc64',
         'platform_semaphore' : 'solaris',
         'build_machine'      : 'staf5b.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'perl', 'python'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/ibmjava1.5-64/bin/sparcv9',
         'java_v12_bin_dir'   : '/opt/ibmjava1.5-64/bin/sparcv9',
         'java_v12_include_dir' : '/opt/ibmjava1.5-64/include',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'test_using'         : 'IA',
         'ia_platform'        : 'solaris',
         'os_lib_files'       : ['libstdc++.so.6', 'libgcc_s.so.1'],
         'os_lib_dir'         : '/usr/sfw/lib/sparcv9/',
         'build_osname'       : 'solaris',
         'architecture'       : '64-bit',
         'osname'             : 'SunOS',
         'osversion'          : '5.10+',
         'osarch'             : 'sparcv9',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5b.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : '/opt/ibmjava1.5-64/bin/sparcv9'
             #'runSTAXLocally'   : 0
           } ]
       },

       # solaris-x86
       {
         'platform_name'      : 'solaris-x86',
         'platform_semaphore' : 'solaris-x86',
         'build_machine'      : 'tcp://staf3b.austin.ibm.com', # Need to use the tcp interface so the build don't hang....ssl requests no longer working on staf3b
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'python'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/ibmjava1.5',
         'java_v12_bin_dir'   : '/opt/ibmjava1.5/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'solaris',
         'test_using'         : 'IA',
         'build_osname'       : 'solaris',
         'architecture'       : '32-bit',
         'osname'             : 'SunOS',
         'osversion'          : '5.10+',
         'osarch'             : 'x86-32 (aka x86)',
         'test_machine_list'  : [
           { 'targetMachine'    : 'tcp://staf3b.austin.ibm.com', # Need to use the tcp interface so the build don't hang....ssl requests no longer working on staf3b
             'targetInstallDir' : '/export/home/STAF_autoTest',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/export/home/tmp_ia',
             'javaBinDir'       : '/opt/ibmjava1.5/bin',
             'javaOptions'      : '_JAVA_OPTIONS=-Xmx1g' # Need to set this environment variable before running IA installer so won't getting OutOfMemoryError
           } ]
       },

       # solaris-x64
       {
         'platform_name'      : 'solaris-x64',
         'platform_semaphore' : 'solaris-x64',
         'build_machine'      : 'staf5a.austin.ibm.com',
         'build_root'         : '/export/home', # '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'python'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/ibmjava1.5',
         'java_v12_bin_dir'   : '/opt/ibmjava1.5/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'test_using'         : 'IA',
         'ia_platform'        : 'solaris',
         'build_osname'       : 'solaris',
         'architecture'       : '32-bit',
         'osname'             : 'SunOS',
         'osversion'          : '5.10+',
         'osarch'             : 'x86-64 (aka x64, amd64)',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5a.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'javaBinDir'       : '/opt/ibmjava1.5/bin',
             'runSTAXLocally'   : 0  # Because intermittent hangs registering Java services / resolving STAF variables
           } ]
       },

       # solaris-x64-64
       {
         'platform_name'        : 'solaris-x64-64',
         'platform_semaphore'   : 'solaris-x64',
         'build_machine'        : 'staf5a.austin.ibm.com',
         'build_root'           : '/export/home', # '/opt',
         'project_list'         : [
                                    'staf', 'connprov_tcp', 'connprov_localipc',
                                    'zip', 'java', 'ant', 'demo', 'python'
                                  ],
         'make'                 : 'gmake',
         'path_sep'             : ':',
         'bash_shell'           : 'sh',
         'java_v12_root'        : '/opt/ibmjava1.5/bin/amd64',
         'java_v12_bin_dir'     : '/opt/ibmjava1.5/bin/amd64',
         'java_v12_include_dir' : '/opt/ibmjava1.5/include',
         'ismp_exe_suffix'      : '.bin',
         'build_ismp_files'     : '0',
         'build_ia_files'       : '1',
         'ia_platform'          : 'solaris',
         'test_using'           : 'IA',
         'build_osname'         : 'solaris',
         'architecture'         : '64-bit',
         'osname'               : 'SunOS',
         'osversion'            : '5.10+',
         'osarch'               : 'amd64',
         'test_machine_list'    : [
             { 'targetMachine'    : 'staf5a.austin.ibm.com',
               'targetInstallDir' : '/tmp/STAF_autoTest',
               'installFileSuffix': '.bin', #'.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
               'javaBinDir'       : '/opt/ibmjava1.5/bin/amd64',
               'runSTAXLocally'   : 0  # Because intermittent hangs registering Java services
             } ]
       },

       # hpux (PA-RISC)
       {
         'platform_name'      : 'hpux',
         'platform_semaphore' : 'hpux',
         'build_machine'      : 'staf5g.austin.ibm.com',
         'build_root'         : '/var', # Changed on 09/25/13 because out of space on '/opt'
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/var/java142-32',
         'java_v12_bin_dir'   : '/var/java142-32/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'hpux',
         'test_using'         : 'IA',
         'build_osname'       : 'hpux',
         'architecture'       : '32-bit',
         'osname'             : 'HP-UX',
         'osversion'          : 'B.11.11+',
         'osarch'             : 'PA_RISC2.0',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5g.austin.ibm.com',
             'targetInstallDir' : '/var/STAF_autoTest',
             #'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/var/tmp_ia',
             'javaBinDir'       : '/var/java50-32/bin',
             'runSTAXLocally'   : 1  # Get RC 22 running STAFTest if run locally
           } ]
       },

       # hpux-parisc64
       {
         'platform_name'      : 'hpux-parisc64',
         'platform_semaphore' : 'hpux',
         'build_machine'      : 'staf5g.austin.ibm.com',
         'build_root'         : '/var', # Changed on 09/25/13 because out of space on '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/var/java142-64',
         'java_v12_bin_dir'   : '/var/java142-64/bin/PA_RISC2.0W',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'hpux',
         'test_using'         : 'IA',
         'build_osname'       : 'hpux',
         'architecture'       : '64-bit',
         'osname'             : 'HP-UX',
         'osversion'          : 'B.11.11+',
         'osarch'             : 'PA_RISC2.0W',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf5g.austin.ibm.com',
             'targetInstallDir' : '/var/STAF_autoTest',
             #'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/var/tmp_ia',
             'javaBinDir'       : '/var/java142-64/bin/PA_RISC2.0W',
             'runSTAXLocally'   : 0  # Get RC 22 running STAFTest if run locally
           } ]
       },

       # hpux-ia64-32
       {
         'platform_name'      : 'hpux-ia64-32',
         'platform_semaphore' : 'hpux-ia',
         'build_machine'      : 'staf5e.austin.ibm.com',
         'build_root'         : '/usr',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/java142-32',           #'/opt/java1.4',
         'java_v12_bin_dir'   : '/opt/java142-32/bin/IA64N', #'/opt/java1.4/bin',
         'openssl_root'       : '/opt/dev/autobuild/tools/openssl-0.9.8e-root-32',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'hpux',
         'test_using'         : 'IA',
         'build_osname'       : 'hpux',
         'architecture'       : '32-bit',
         'osname'             : 'HP-UX',
         'osversion'          : 'B.11.23+',
         'osarch'             : 'IA64N',
         'test_machine_list'  : [
           { 'targetMachine'    : 'tcp://staf5f.austin.ibm.com@6501',
             'targetInstallDir' : '/tmp/STAF_autoTest_32',
             'installFileSuffix': '.bin',
             'javaBinDir'       : '/opt/java50-32/bin/IA64N' #'/opt/java1.5/bin/IA64N'
           } ]
       },

       # hpux-ia64-64
       {
         'platform_name'      : 'hpux-ia64-64',
         'platform_semaphore' : 'hpux-ia',
         'build_machine'      : 'staf5e.austin.ibm.com',
         'build_root'         : '/usr',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/opt/java142-64', # '/opt/java1.4',
         'java_v12_bin_dir'   : '/opt/java142-64/bin/IA64W', # '/opt/java1.4/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'hpux',
         'test_using'         : 'IA',
         'build_osname'       : 'hpux',
         'architecture'       : '64-bit',
         'osname'             : 'HP-UX',
         'osversion'          : 'B.11.23+',
         'osarch'             : 'IA64W',
         'test_machine_list'  : [
           { 'targetMachine'    : 'tcp://staf5f.austin.ibm.com@6501',
             'targetInstallDir' : '/tmp/STAF_autoTest_64',
             #'installFileSuffix': '.tar.gz',  # Problems using .bin
             'installFileSuffix': '.bin',
             'javaBinDir'       : '/opt/java50-64/bin/IA64W' # '/opt/java1.5/bin/IA64W'
           } ]
       },

       # zlinux-32
       {
         'platform_name'      : 'zlinux-32',
         'platform_semaphore' : 'zlinux',
         'build_machine'      : '9.57.165.55',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/opt/IBMJava2-s390-142',
         'java_v12_bin_dir'   : '/opt/IBMJava2-s390-142/bin',
         'openssl_root'       : '/opt/dev/autobuild/tools/openssl-0.9.8e-31bit-root',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'linux',
         'test_using'         : 'IA',
         'build_osname'       : 'zlinux',
         'architecture'       : '32-bit',
         'osname'             : 'Linux',
         'osversion'          : 'SLES10+/RHEL5+',
         'osarch'             : 's390',
         'test_machine_list'  : [
           { 'targetMachine'    : '9.57.165.54', # SLES 11
             'targetInstallDir' : '/tmp/STAF_autoTest_32',
             'installFileSuffix': '.bin', # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/tmp/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java2-s390-50/jre/bin',
             'runSTAXLocally'   : 1
           },
           { 'targetMachine'    : '9.57.165.55', # SLES 10
             'targetInstallDir' : '/tmp/STAF_autoTest_32',
             'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/tmp/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java-s390-60/bin', # '/opt/IBMJava2-s390-142/jre/bin'
             'runSTAXLocally'   : 1
           },
           { 'targetMachine'    : '9.57.165.18', # RHEL 5.4
             'targetInstallDir' : '/tmp/STAF_autoTest_32',
             'installFileSuffix': '.bin', # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/tmp/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java-s390-60/bin', # '/opt/IBMJava2-s390-142/jre/bin'
             'runSTAXLocally'   : 1
           }
           ]
       },

       # zlinux-64
       {
         'platform_name'      : 'zlinux-64',
         'platform_semaphore' : 'zlinux',
         'build_machine'      : '9.57.165.55',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/opt/IBMJava2-s390x-142',
         'java_v12_bin_dir'   : '/opt/IBMJava2-s390x-142/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'linux',
         'test_using'         : 'IA',
         'build_osname'       : 'zlinux',
         'architecture'       : '64-bit',
         'osname'             : 'Linux',
         'osversion'          : 'SLES10+/RHEL5+',
         'osarch'             : 's390x',
         'test_machine_list'  : [
           { 'targetMachine'    : '9.57.165.54', # SLES 11
             'targetInstallDir' : '/tmp/STAF_autoTest_64',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/tmp/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java2-s390x-50/jre/bin',
             'runSTAXLocally'   : 1
           },
           { 'targetMachine'    : '9.57.165.55', # SLES 10
             'targetInstallDir' : '/tmp/STAF_autoTest_64',
             'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/tmp/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java-s390x-60/bin', # '/opt/IBMJava2-s390x-142/jre/bin'
             'runSTAXLocally'   : 1
           },
           { 'targetMachine'    : '9.57.165.18', # RHEL 5.4
             'targetInstallDir' : '/tmp/STAF_autoTest_64',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installShieldTempDir': '/tmp/tmp_ia',
             'javaBinDir'       : '/opt/ibm-java-s390x-60/bin', # '/opt/IBMJava2-s390x-142/jre/bin'
             'runSTAXLocally'   : 1
           }
           ]
       },

       # freebsd
       {
         'platform_name'      : 'freebsd',
         'platform_semaphore' : 'freebsd',
         'build_machine'      : 'staf1c.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo', 'python'
                                ],
         'make'               : 'gmake',
         'path_sep'           : ':',
         'bash_shell'         : 'csh',
         'java_v12_root'      : '/usr/local/jdk1.5.0',
         'java_v12_bin_dir'   : '/usr/local/jdk1.5.0/bin',
         'ismp_exe_suffix'    : '.bin',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'linux',
         'test_using'         : 'IA',
         'build_osname'       : 'freebsd',
         'architecture'       : '32-bit',
         'osname'             : 'FreeBSD',
         'osversion'          : '7.4+',
         'osarch'             : 'i386',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf1c.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             #'installFileSuffix': '.tar.gz',  # Must be .exe or .bin or .tar.gz or .tar.Z
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             # Note that freebsd only has the NoJVM IA file
             'javaBinDir'       : '/usr/local/jdk1.5.0/bin',
             'javaOptions'      : '_JAVA_OPTIONS=-Xmx1g', # Need to set this environment variable before running IA installer so won't getting OutOfMemoryError
             'runSTAXLocally'   : 0  # FreeBSD seems to keep tcp ports for a long time after shutting down STAF with Java services registered
           } ]
       },

       # macosx-universal
       {
         'platform_name'      : 'macosx-universal',
         'platform_semaphore' : 'macosx-universal',
         'build_machine'      : 'staf4f.austin.ibm.com',
         'build_root'         : '/opt',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'demo',
                                  'ant', 'python', 'perl'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'bash',
         'java_v12_root'      : '/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home',
         'java_v12_bin_dir'   : '/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bin',
         'openssl_root'       : '/usr',
         'ismp_exe_suffix'    : '.zip',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '1',
         'ia_platform'        : 'macosx',
         'test_using'         : 'IA',
         'build_osname'       : 'macosx',
         'architecture'       : '32-bit/64-bit',
         'osname'             : 'Mac OS X',
         'osversion'          : '10.6+',
         'osarch'             : 'universal (i386, x86_64, ppc)',
         'test_machine_list'  : [
           { 'targetMachine'    : 'staf4f.austin.ibm.com',
             'targetInstallDir' : '/tmp/STAF_autoTest',
             'installFileSuffix': '.bin',  # Must be .exe or .bin or .tar.gz or .tar.Z
             # Note that macosx only has the NoJVM IA file
             'javaBinDir'       : '/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/bin'
           } ]
       },

       # zos
       {
         'platform_name'      : 'zos',
         'platform_semaphore' : 'zos',
         'build_machine'      : 'tcp://winmvs26.hursley.ibm.com',
         'build_root'         : '/u/rankinc',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/usr/lpp/java142s/J1.4',
         'java_v12_bin_dir'   : '/usr/lpp/java142s/J1.4/bin',
         'ismp_exe_suffix'    : '',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '0',
         'ia_platform'        : 'tbd',
         'build_osname'       : 'zos',
         'architecture'       : '32-bit',
         'osname'             : 'z/OS',
         'osversion'          : '1.4+',
         'osarch'             : '390',
         'test_machine_list'  : [
           { 'targetMachine'    : 'tcp://winmvs26.hursley.ibm.com',
             'targetInstallDir' : '/u/rankinc/STAF_autoTest',
             'installFileSuffix': '.tar.Z',  # Must be .exe or .bin or .tar.gz or .tar.Z,
             'javaBinDir'       : '/usr/lpp/java142s/J1.4/bin',
             'runSTAXLocally'   : 0
           } ]         
       },

       # zos64
       {
         'platform_name'      : 'zos64',
         'platform_semaphore' : 'zos',
         'build_machine'      : 'tcp://winmvs26.hursley.ibm.com',
         'build_root'         : '/u/rankinc',
         'project_list'       : [
                                  'staf', 'connprov_tcp', 'connprov_localipc',
                                  'zip', 'java', 'ant', 'demo'
                                ],
         'make'               : 'make',
         'path_sep'           : ':',
         'bash_shell'         : 'sh',
         'java_v12_root'      : '/u/rankinc/J1.4_64',
         'java_v12_bin_dir'   : '/u/rankinc/J1.4_64/bin',
         'ismp_exe_suffix'    : '',
         'build_ismp_files'   : '0',
         'build_ia_files'     : '0',
         'ia_platform'        : 'tbd',
         'build_osname'       : 'zos',
         'architecture'       : '64-bit',
         'osname'             : 'z/OS',
         'osversion'          : '1.4+',
         'osarch'             : 's390x',
         'test_machine_list'  : [
           { 'targetMachine'    : 'tcp://winmvs26.hursley.ibm.com',
             #'port'             : '6597',
             'targetInstallDir' : '/u/rankinc/STAF_autoTest',
             'installFileSuffix': '.tar.Z',  # Must be .exe or .bin or .tar.gz or .tar.Z,
             'javaBinDir'       : '/u/rankinc/J1.4_64/bin',
             'runSTAXLocally'   : 0
           } ] 
       }

   ]
  </script>

  <script>

    serviceJarFiles = ['STAX.jar', 'STAXMon.jar', 'STAFEvent.jar', 'STAFEventManager.jar',
                       'STAFCron.jar', 'STAFEmail.jar', 'STAFSXE.jar', 'STAFFSExt.jar',
                       'STAFHTTP.jar', 'STAFTimer.jar', 'STAFNamedCounter.jar', 'STAFFTP.jar',
                       'STAFDeviceService.jar']

    cvsRoot = ':pserver:anonymous@cvs.sourceforge.net:/cvsroot/staf'
    extractMach = 'staf1f.austin.ibm.com'

    extractRoot = 'c:/dev/autobuild'
    extractPath = '%s/extract' % extractRoot
    extractLogPath = '%s/extract_logs' % extractRoot

    cygwinBashShell = 'c:\\cygwin\\bin\\bash'
    cygwinPath = '/cygdrive/c/cygwin'
    cygwinBinPath = 'c:\\cygwin\\bin'

    ismpMach = 'staf1f.austin.ibm.com'
    ismpInputPath = "c:/STAF_ISMP_InputFiles"
    ismpOutputPath = "c:/STAF_Installers"

    iaMach = 'staf1f.austin.ibm.com'
    iaInputPath = "c:/IA_Input_Files"
    iaOutputPath = "c:/IA_Output_Files"

    startClean = 1
    failMessage = 'No failure'

    platform = ''

    STAFResult = ''
    RC = 0

    binaryFiles = STAXGlobal([])

    buildRoot = 'c:/dev/autobuild/build'

    build_output = STAXGlobal([])  # Build Summary
    test_output  = STAXGlobal([])  # Test Summary

    serviceReleaseRoot = 'c:/serviceReleases'

    javaServiceReleases = [
                            [
                                'eventmanager',
                                'EventManagerV340',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFEventManager.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/eventmanager' % buildRoot],
                                  ['eventmanager.pdf', 'c:/staxug']
                                ]
                            ],

                            [
                                'event',
                                'EventV315',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFEvent.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/event' % buildRoot],
                                  ['event.pdf', 'c:/staxug']
                                ]
                            ],

                            [
                                'cron',
                                'CronV340',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFCron.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/cron' % buildRoot],
                                  ['cron.pdf', 'c:/staxug']
                                ]
                            ],

                            [
                                'email',
                                'EmailV338',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFEmail.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/email' % buildRoot],
                                  ['email.html', '%s/src/staf/services/email' % buildRoot]
                                ]
                            ],

                            [
                                'http',
                                'HTTPV304',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['NOTICES.htm', '%s/src/staf/services/http' % buildRoot],        
                                  ['STAFHTTP.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/http' % buildRoot],
                                  ['Http.html', '%s/src/staf/services/http' % buildRoot]
                                ]
                            ],

                            [
                                'namespace',
                                'NamespaceV103',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['Namespace.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/namespace' % buildRoot],
                                  ['Namespace.pdf', 'c:/staxug']
                                ]
                            ],

                            [
                                'fsext',
                                'FSExtV302',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFFSExt.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/fsext' % buildRoot],
                                  ['FSExt.html', '%s/src/staf/services/fsext' % buildRoot]
                                ]
                            ],

                            [
                                'timer',
                                'TimerV303',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],                                
                                  ['STAFTimer.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/timer' % buildRoot],
                                  ['Timer.html', '%s/src/staf/services/timer' % buildRoot]
                                ]
                            ],

                            [
                                'sxe',
                                'SXEV303',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],                                
                                  ['STAFSXE.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/sxe' % buildRoot],
                                  ['sxe.html', '%s/src/staf/services/sxe' % buildRoot]
                                ]
                            ],

                            [
                                'namedcounter',
                                'NamedCounterV302',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFNamedCounter.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/namedcounter' % buildRoot],
                                  ['NamedCounterService.html', '%s/src/staf/services/namedcounter' % buildRoot]
                                ]
                            ],

                            [
                                'ftp',
                                'FTPV103',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAFFTP.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/ftp' % buildRoot],
                                  ['FTP.html', '%s/src/staf/services/ftp' % buildRoot]
                                ]
                            ],

                            [
                                'stax',
                                'STAXV358',
                                [
                                  ['LICENSE.htm', '%s/src/staf' % buildRoot],
                                  ['STAX.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['STAXMon.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['STAFEvent.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['STAXDoc.jar', '%s/rel/win32/staf/%s/lib' % (buildRoot, buildType)],
                                  ['History', '%s/src/staf/services/stax' % buildRoot, 'docs/History'],
                                  ['samples/sample1.xml', '%s/src/staf/services/stax' % buildRoot],
                                  ['samples/FunctionList.xsl', '%s/src/staf/services/stax' % buildRoot],
                                  ['samples/UpgradeSTAF.xml', '%s/src/staf/services/stax' % buildRoot],
                                  ['libraries/STAXUtil.xml', '%s/src/staf/services/stax' % buildRoot],
                                  ['libraries/STAFUpgradeUtil.xml', '%s/src/staf/services/stax' % buildRoot],
                                  ['libraries/docs/index.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/overview-summary.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/overview-frame.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/allfiles-frame.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/libraries/package-overview.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/libraries/package-frame.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/libraries/STAXUtil.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['libraries/docs/libraries/STAFUpgradeUtil.html', '%s/rel/win32/staf/%s/services/stax' % (buildRoot, buildType)],
                                  ['ext/stax-extensions.dtd', '%s/src/staf/services/stax' % buildRoot],
                                  ['docs/staxug.pdf', 'c:/staxug'],
                                  ['docs/staxgs.pdf', 'c:/staxug'],
                                  ['docs/STAXDoc.pdf', 'c:/staxug'],
                                  ['readme.1st', 'c:/staxug']
                                ]
                            ]
                          ]

  </script>

  <!-- ================================================================= -->
  <!-- This function is the main function called and drives              -->
  <!-- the overall build process.                                        -->
  <!-- ================================================================= -->

  <function name="StartBuild">

    <function-map-args>

      <function-arg-def name="staf_version"
                        type="optional"
                        default="staf_version">
        <function-arg-description>
          The STAF version number.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="platform_list"
                        type="optional"
                        default="['win32', 'linux', 'linux-ppc64-32', 'solaris',
                                  'aix', 'hpux', 'hpux-parisc64', 'solaris-x64',
                                  'solaris-x86', 'linux-amd64',
                                  'linux-ppc64-64', 'hpux-ia64-32', 'zlinux-32',
                                  'zlinux-64', 'hpux-ia64-64', 'aix64',
                                  'winamd64', 'freebsd', 'macosx-universal',
                                  'zos', 'zos64',
                                  'solaris-x64-64', 'solaris-sparc64']">
        <function-arg-description>
          The list of platforms to build.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="emailList"
                        type="optional"
                        default="['lucass@us.ibm.com']">
        <function-arg-description>
          The list of email addresses to which the build report will be sent.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="useRepositorySrc"
                        type="optional"
                        default="1">
        <function-arg-description>
          A flag to indicate whether to extract the current source code from
          CVS (true) or to use an existing source tar file (false).
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="testSTAF"
                        type="optional"
                        default="1">
        <function-arg-description>
          A flag to indicate whether to run the STAF tests after the build
          completes.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="platform_details"
                        type="optional"
                        default="build_platform_details">
        <function-arg-description>
          The detailed information for each build platform.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="build_timeout"
                        type="optional"
                        default="'20h'">
        <function-arg-description>
          The timeout value for each platform to build.  If a platform has
          not completed within the timeout period, the build will be
          terminated and the platform build status will be marked as Fail.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="ftp_machine"
                        type="optional"
                        default="ftp_machine_default">
        <function-arg-description>
          The ftp machine where the output files will be copied.  The zlinux
          machines can only use IP addresses, so do not use the hostname.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="ftp_path"
                        type="optional"
                        default="ftp_path_default">
        <function-arg-description>
          The root directory for the ftp machine.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="copy_to_ga"
                        type="optional"
                        default="0">
        <function-arg-description>
          A flag to indicate whether the output files should be copied to a GA
          directory.  If set to 1, the files will be copied to the ftp machine
          in a directory such as "322ga-test".
        </function-arg-description>
      </function-arg-def>
      
      <function-arg-def name="test_timeout"
                        type="optional"
                        default="'20h'">
        <function-arg-description>
          The timeout value for running STAFTest on a test machine.
          If STAFTest has not completed within the timeout period,
          the test will be terminated and the platform test machine
          status will be marked as Fail.
        </function-arg-description>
      </function-arg-def>
  
    </function-map-args>

    <sequence>

      <log message="1">'[main] Begin function StartBuild'</log>

      <script>
        pass_platforms = STAXGlobal([])
        fail_platforms = STAXGlobal([])
        pass_test_platforms = STAXGlobal([])
        fail_test_platforms = STAXGlobal([])
      </script>

      <script>
        ftpRoot = 'ftp://root@%s/build' % (ftp_machine)
        #if not locals().has_key('platform_list'):
        #  platform_list = ['win32', 'solaris-x86', 'linux', 'hpux', 'linuxpp64']
        #  platform_list = ['win32', 'linux', 'aix', 'aix433', 'solaris', 'hpux', 'linuxppc64']
      </script>

      <script>importFileName = '%s/BuildIA.xml' % (automationDirectory)</script>

      <import file="importFileName" machine="automationMachine" mode="'ignore'"/>

      <if expr="buildSTAF">
        <sequence>
        
          <script>
            request = 'REQUEST MUTEX STAF-AutoBuild'
          </script>
          <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

          <stafcmd name="'Requesting STAF-AutoBuild semaphore'">
            <location>ismpMach</location>
            <service>'SEM'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s SEM %s' % (RC, STAFResult, ismpMach, request)</log>
      
          <script>
            request = 'RESET EVENT win32Complete'
          </script>
          <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

          <stafcmd name="'Resetting win32 build complete semaphore'">
            <location>ismpMach</location>
            <service>'SEM'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s SEM %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>
            request = 'RELEASE MUTEX ismpBuild FORCE'
          </script>
          <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

          <stafcmd name="'Release ISMP Build resource'">
            <location>ismpMach</location>
            <service>'SEM'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s SEM %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>
            request = 'DELETE MUTEX ismpBuild'
          </script>
          <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

          <stafcmd name="'Delete ISMP Build resource'">
            <location>ismpMach</location>
            <service>'SEM'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s SEM %s' % (RC, STAFResult, ismpMach, request)</log>

          <call function="'ExportSource'"/>
          
        </sequence>  
      </if>  

      <paralleliterate var="platform" in="build_platform_details">

        <if expr="platform['platform_name'] in platform_list">

          <block name="platform['platform_name']">
          <testcase name="platform['platform_name']">
        
            <sequence>

              <script>
                platform_name = platform['platform_name']
                platform_build_output  = STAXGlobal([])
                platform_build_output_files = STAXGlobal([])
                platform_test_output = STAXGlobal([])
              </script>
              
              <call function="'InitializePlatformOptions'">
                platform
              </call>

              <if expr="buildSTAF">
                <block name="'Build STAF'">
                <sequence>
                <timer duration="build_timeout">
                <sequence>

                  <script>
                    request = 'REQUEST MUTEX STAF-AutoBuild-%s' % (platform['platform_semaphore'])
                  </script>
                  <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

                  <stafcmd name="'Requesting STAF-AutoBuild-%s semaphore' % (platform['platform_semaphore'])">
                    <location>ismpMach</location>
                    <service>'SEM'</service>
                    <request>request</request>
                  </stafcmd>

                  <log message="1">'[main] RC=%s, Result=%s, Request=%s SEM %s' % (RC, STAFResult, ismpMach, request)</log>

                  <script>
                    build_started = time.strftime("%Y%m%d-%H:%M:%S")
                  </script>

                  <script>
                    autobuildPath = '%s/dev/autobuild' % build_root
                    buildPath = "%s/build" % autobuildPath
                    buildLogPath = "%s/build_logs" % autobuildPath
                    
                    if platform_name in ssl_unsupported_platform_list:
                      staf_use_ssl = ''
                    else:
                      staf_use_ssl = 1
                  </script>
                  
                  <!-- Verify can submit a STAF MISC WHOAMI request to the build machine and that the build machine gives the STAX service machine trust level 5 -->
                  
                  <stafcmd>
                    <location>build_machine</location>
                    <service>'MISC'</service>
                    <request>'WHOAMI'</request>
                  </stafcmd>
                  
                  <log message="1">'[%s] RC=%s, Result=%s, MISC WHOAMI %s' % (platform_name, RC, STAFResult, build_machine)</log>
                  
                  <if expr="RC != 0">
                    <sequence>
                      <script>
                        failMessage = '[%s] The STAX service machine (%s) cannot communicate to build machine (%s)' % \
                          (platform_name, STAXServiceMachine, build_machine)
                      </script>
                      <call function="'check-stafcmd'"/>
                    </sequence>
                    <elseif expr="STAFResult != None and STAFResult['trustLevel'] != '5'">
                      <sequence>
                        <script>
                          RC = 1 # Need to set to non-zero so check-stafcmd will know an error occurred
                          failMessage = '[%s] Build machine (%s) only gives trust level %s to STAX service machine (%s) when it requires trust level 5' % \
                            (platform_name, build_machine, STAFResult['trustLevel'], STAXServiceMachine)
                        </script>
                        <call function="'check-stafcmd'"/>
                      </sequence>
                    </elseif>
                  </if>
                  
                  <!-- Delete core file from {STAF/Config/STAFRoot} if exists (so have more disk space to build and test) -->
                  <stafcmd>
                    <location>build_machine</location>
                    <service>'FS'</service>
                    <request>'DELETE ENTRY "{STAF/Config/STAFRoot}/core" CONFIRM'</request>
                  </stafcmd>
                  <log message="1">'[%s] RC=%s, Result=%s, STAF %s FS DELETE ENTRY "{STAF/Config/STAFRoot}/core" CONFIRM' % (platform_name, RC, STAFResult, build_machine)</log>         
                  
                  <call function="'TransferSource'"/>
 
                  <call function="'BuildIt'"/>

                  <if expr="platform_name != 'win32' and 'win32' in platform_list and platform_name != 'win64' and platform_name != 'winamd64'">
                    <sequence>

                      <script>
                        request = 'WAIT EVENT win32Complete'
                      </script>
                      <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>

                      <stafcmd name="'Waiting for win32 build to complete'">
                        <location>ismpMach</location>
                        <service>'SEM'</service>
                        <request>request</request>
                      </stafcmd>

                      <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)</log>

                    </sequence>
                  </if>

                  <call function="'CopyCommonFiles'"/>

                  <if expr="platform_name == 'win64'">
                    <call function="'BuildWin64-CodepageFiles'"/>
                  </if>

                  <if expr="platform_name == 'winamd64'">
                    <call function="'BuildWinAMD64-CodepageFiles'"/>
                  </if>

                  <call function="'BuildIPv6'"/>

                  <call function="'CreateInstallProperties'"/>

                  <call function="'PackageIt'"/>

                  <parallel>

                    <sequence>
                      <script>
                        unix = ['aix','aix64','aix433','linux', 'linux-ppc64-32', 'linux-ppc64-64', 'linux-amd64', 'solaris' , 'solaris-sparc64' , 'solaris-x86', 'solaris-x64', 'solaris-x64-64', 'hpux', 'hpux-parisc64', 'hpux-ia64-32', 'hpux-ia64-64', 'zlinux-32', 'zlinux-64', 'freebsd',  'macosx-i386', 'macosx-ppc', 'macosx-universal', 'zos', 'zos64']
                      </script>
                      <if expr="platform_name in unix">
                        <call function="'CreateTarGZ'"/>
                      </if>
                    </sequence>

                    <sequence>
                    <if expr="build_ismp_files == '1'">
                      <sequence>
                        <call function="'TransferToISMP'"/>

                        <call function="'BuildISMP'"/>

                        <if expr="platform_name == 'win32'">
                          <sequence>

                            <script>
                              request = 'POST EVENT win32Complete'
                            </script>
                            <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

                            <stafcmd name="'Post win32 build complete'">
                              <location>ismpMach</location>
                              <service>'SEM'</service>
                              <request>request</request>
                            </stafcmd>

                            <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)</log>

                          </sequence>
                        </if>

                        <call function="'CopyInstallers'"/>
                      </sequence>
                    </if>

                    <if expr="build_ia_files == '1'">
                    <sequence>
                      <try>
                        <sequence>

                          <call function="'TransferToIA'"/>

                          <call function="'BuildIAInstaller'">
                            {
                              'platform':  platform_name,
                              'version':   ia_staf_version,
                              'IAMachine': ia_machine,
                              'IARoot':    ia_root
                            }
                          </call>

                          <if expr="platform_name == 'win32'">
                            <sequence>

                              <script>
                                request = 'POST EVENT win32Complete'
                              </script>
                              <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

                              <stafcmd name="'Post win32 build complete'">
                                <location>ismpMach</location>
                                <service>'SEM'</service>
                                <request>request</request>
                              </stafcmd>

                              <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, iaMach, request)</log>

                            </sequence>
                          </if>
                        </sequence>
                        
                        <finally>
                          <sequence>
                            
                            <stafcmd name="'Delaying between IA Builds'">
                              <location>iaMach</location>
                              <service>'DELAY'</service>
                              <request>'DELAY 3m'</request>
                            </stafcmd>

                            <script>
                              request = 'RELEASE MUTEX iaBuild'
                            </script>
                            <log message="1">'[%s] %s SEM %s' % (platform_name, iaMach, request)</log>

                            <stafcmd name="'Releasing IA Build resource'">
                              <location>iaMach</location>
                              <service>'SEM'</service>
                              <request>request</request>
                            </stafcmd>

                            <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, iaMach, request)</log>
                              
                          </sequence>
                        </finally>
                      </try>
                      
                      <call function="'CopyIAInstallers'"/>
                    </sequence>
                    </if>
                    </sequence>

                    <if expr="platform_name == 'win32'">
                      <block name="'Creating Java STAF service releases'">
                        <call function="'CreateJavaServiceReleases'"/>
                      </block>
                    </if>

                  </parallel>

                  <script>
                    pass_platforms.append(platform_name)

                    platform_output = {
                                        'platform_name' : platform_name,
                                        'platform_build_output' : platform_build_output,
                                        'platform_build_output_files' : platform_build_output_files,
                                        'platform_build_machine' : build_machine,
                                        'platform_build_started' : build_started,
                                        'platform_build_completed' : time.strftime("%Y%m%d-%H:%M:%S"),
                                        'platform_build_status' : 'Pass'
                                      }

                    build_output.append(platform_output)
                  </script>

                  <script>
                    request = 'RELEASE MUTEX STAF-AutoBuild-%s' % (platform['platform_semaphore'])
                  </script>
                  <log message="1">'[main] %s SEM %s' % (ismpMach, request)</log>

                  <stafcmd name="'Releasing STAF-AutoBuild-%s semaphore' % (platform['platform_semaphore'])">
                    <location>ismpMach</location>
                    <service>'SEM'</service>
                    <request>request</request>
                  </stafcmd>

                  <log message="1">'[main] RC=%s, Result=%s, Request=%s SEM %s' % (RC, STAFResult, ismpMach, request)</log>

                </sequence>

              </timer>

              <if expr="RC == 1">
                <sequence>
                  <script>failMessage = '[%s] Build did not complete within timeout value %s on build machine (%s)' % (platform['platform_name'], build_timeout, build_machine)</script>
                  <call function="'check-stafcmd'"/>
                </sequence>
              </if>
              
              </sequence>
              </block>
              </if>

              <if expr="testSTAF">
                <block name="'Install and Test STAF'">
                <sequence>
                
                  <script>
                    testStartTime.set(time.strftime("%Y%m%d-%H:%M:%S"))
                  </script>  
                    
                  <log message="1">
                    '[%s] Import file %s/STAFInstallAndTest.xml on machine %s' % \
                    (platform['platform_name'], automationDirectory, automationMachine)
                  </log>
                  
                  <script>importFileName = '%s/STAFInstallAndTest.xml' % (automationDirectory)</script>

                  <import file="importFileName" machine="automationMachine" mode="'ignore'"/>
                  
                  <log message="1">'[%s] Import Result: %s' % (platform['platform_name'], STAXResult)</log>
                  
                  <if expr="STAXResult[0] != None">
                    <sequence>
                      <script>
                        RC = 1
                        failMessage = '[%s] Importing file %s on machine %s failed.  STAXResult=%s' % \
                          (platform['platform_name'], importFileName, automationMachine, STAXResult)
                      </script>
                      <call function="'check-stafcmd'"/>
                    </sequence>
                  </if>

                  <if expr="len(test_machine_list) == 0">
                    <log message="1">'[%s] No machines in test_machine_list' % (platform['platform_name'])</log>
                    <else>
                      <paralleliterate var="test_machine_info" in="test_machine_list">
                        <sequence>

                          <!-- Install the STAF build that was just generated to the test machine in a 
                               temporary location and start STAFProc and then run tests to test that
                               STAF is working correctly. -->
                          
                          <script>
                          argMap = {}

                          argMap['targetMachine'] = test_machine_info['targetMachine']
                    
                          argMap['targetInstallDir'] = test_machine_info['targetInstallDir']
                    
                          if test_machine_info.has_key('runSTAXLocally'):
                            argMap['runSTAXLocally'] = test_machine_info['runSTAXLocally']
                          else:
                            argMap['runSTAXLocally'] = 1
                          
                          if test_machine_info.has_key('installerFile'):
                            argMap['installerFile'] = test_machine_info['installerFile']
                          else:
                            if (test_machine_info['installFileSuffix'] == '.exe' or
                                test_machine_info['installFileSuffix'] == '.bin'):
                              installerFile = '%s/%s/STAF%s-setup-%s%s%s' % \
                                (ftp_path, platform_name, staf_version, platform_name, ismp_suffix, test_machine_info['installFileSuffix'])
                            else:
                              installerFile = '%s/%s/STAF%s-%s%s%s' % \
                                (ftp_path, platform_name, staf_version, platform_name, ismp_suffix, test_machine_info['installFileSuffix'])
                            argMap['installerFile'] = installerFile
                          
                          if test_machine_info.has_key('installerMachine'):
                            argMap['installerMachine'] = test_machine_info['installerMachine']
                          else:
                            argMap['installerMachine'] = ftp_machine
                    
                          if test_machine_info.has_key('installShieldTempDir'):
                            argMap['installShieldTempDir'] = test_machine_info['installShieldTempDir']

                          if test_machine_info.has_key('port'):
                            argMap['port'] = test_machine_info['port']

                          if test_machine_info.has_key('installType'):
                            argMap['installType'] = test_machine_info['installType']

                          if test_machine_info.has_key('javaBinDir'):
                            argMap['javaBinDir'] = test_machine_info['javaBinDir']
                          
                          if test_machine_info.has_key('updateEnvVars'):
                            argMap['updateEnvVars'] = test_machine_info['updateEnvVars']

                          if test_machine_info.has_key('tcpipVersion'):
                            argMap['tcpipVersion'] = test_machine_info['tcpipVersion']

                          if test_machine_info.has_key('importMachine'):
                            argMap['importMachine'] = test_machine_info['importMachine']

                          if test_machine_info.has_key('importDirectory'):
                            argMap['importDirectory'] = test_machine_info['importDirectory']

                          if test_machine_info.has_key('testDirectory'):
                            argMap['testDirectory'] = test_machine_info['testDirectory']
                          
                          if test_machine_info.has_key('runSTAXLocally'):
                            argMap['runSTAXLocally'] = test_machine_info['runSTAXLocally']
                          
                          if test_machine_info.has_key('javaOptions'):
                            argMap['javaOptions'] = test_machine_info['javaOptions']
                            
                          argMap['test_timeout'] = test_timeout
                          </script>
                          
                          <script>
                          # Strip @port from the end of the targetMachine if present
                          pos = argMap['targetMachine'].find('@')
                          if pos >= 0:
                            test_machine_noPort = argMap['targetMachine'][0:pos]
                          else:
                            test_machine_noPort = argMap['targetMachine']
                            
                          # Strip interface from the beginning of the machine if present
                          pos = test_machine_noPort.find('://')
                          if pos >= 0:
                            test_machine_logicalID = test_machine_noPort[(pos + 3):]
                          else:
                            test_machine_logicalID = test_machine_noPort
                          </script>
                          
                          <!-- Request a mutex semaphore that includes the test machine's logical ID
                               so that only one instance of STAF will be installed and tested on a
                               test machine at a time.
                               XXX: Add a maximum wait of 90 minutes until we fix an intermittent
                                    semaphore garbage collection problem.
                            -->
                          <script>
                          request = 'REQUEST MUTEX STAF-AutoTest-%s TIMEOUT 90m' % (test_machine_logicalID)
                          </script>
                          <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>
                          <stafcmd name="'Requesting STAF-AutoTest-%s semaphore' % (test_machine_noPort)">
                            <location>ismpMach</location>
                            <service>'SEM'</service>
                            <request>request</request>
                          </stafcmd>
                          <log message="1">
                          '[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)
                          </log>
                          <if expr="RC == STAFRC.Timeout">
                            <sequence>
                              <!-- XXX: Forceably release the semaphore (as we are assuming that a
                                        semaphore garbage collection problem occurred) -->
                              <log message="1" level="'Warning'">
                                '[%s] Garbage collection problem encountered - Force release of mutex semaphore STAF-AutoTest-%s' % \
                                (platform_name, test_machine_logicalID)
                              </log>
                              <script>
                                request = 'RELEASE MUTEX STAF-AutoTest-%s FORCE' % (test_machine_logicalID)
                              </script>
                              <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>
                              <stafcmd name="'Requesting STAF-AutoTest-%s semaphore' % (test_machine_noPort)">
                                <location>ismpMach</location>
                                <service>'SEM'</service>
                                <request>request</request>
                              </stafcmd>
                              <log message="1">
                                '[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)
                              </log>
                            </sequence>
                          </if>

                          <if expr="test_using == 'IA'">
                            <sequence>
                              <!-- Install and test STAF on the targetMachine -->
                              <script>
                                if (test_machine_info['installFileSuffix'] == '.exe' or
                                    test_machine_info['installFileSuffix'] == '.bin'):
                                  installerFile = '%s/%s/STAF%s-setup-%s%s%s' % \
                                    (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, test_machine_info['installFileSuffix'])
                                  if (platform_name == 'freebsd'):
                                    installerFile = '%s/%s/STAF%s-setup-%s%s-NoJVM%s' % \
                                      (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, test_machine_info['installFileSuffix'])
                                  else:
                                    if (platform_name == 'macosx-i386' or platform_name == 'macosx-ppc' or platform_name == 'macosx-universal'):
                                      installerFile = '%s/%s/STAF%s-setup-%s%s%s' % \
                                        (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, test_machine_info['installFileSuffix'])
                                else:
                                  installerFile = '%s/%s/STAF%s-%s%s%s' % \
                                    (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, test_machine_info['installFileSuffix'])
                                argMap['installerFile'] = installerFile
                              </script>
                              <log message="1">
                                '[%s] Call function STAF_Install_And_Test_IA passing arguments: %s' % (platform_name, argMap)
                              </log>

                              <call function="'STAF_Install_And_Test_IA'">argMap</call>
                              <script>
                                testResultMap = STAXResult
                              </script>
                              <log message="1">
                                '[%s] Function STAF_Install_And_Test1 returned: %s' % (platform_name, testResultMap)
                              </log>
                            </sequence>
                            <else>
                              <sequence>
                                <!-- Install and test STAF on the targetMachine -->
                                <log message="1">
                                  '[%s] Call function STAF_Install_And_Test passing arguments: %s' % (platform_name, argMap)
                                </log>

                                <call function="'STAF_Install_And_Test'">argMap</call>
                                <script>
                                  testResultMap = STAXResult
                                </script>
                                <log message="1">
                                  '[%s] Function STAF_Install_And_Test returned: %s' % (platform_name, testResultMap)
                                </log>
                              </sequence>
                            </else>
                          </if>

                          <!-- Release the mutex semaphore that includes the test machine's logical ID -->                          
                          <script>
                          request = 'RELEASE MUTEX STAF-AutoTest-%s' % (test_machine_logicalID)
                          </script>
                          <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>
                          <stafcmd name="'Releasing STAF-AutoTest-%s semaphore' % (test_machine_noPort)">
                            <location>ismpMach</location>
                            <service>'SEM'</service>
                            <request>request</request>
                          </stafcmd>
                          <log message="1">
                          '[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)
                          </log>
 
                          <script>
                          request = 'DELETE MUTEX STAF-AutoTest-%s' % (test_machine_logicalID)
                          </script>
                          <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>
                          <stafcmd name="'Delete ISMP Build resource'">
                            <location>ismpMach</location>
                            <service>'SEM'</service>
                            <request>request</request>
                          </stafcmd>
                          
                          <script>
                          platform_test_status = testResultMap['result']
                        
                          if platform_test_status == 'Pass':
                            pass_test_platforms.append(platform_name)
                          else:
                            fail_test_platforms.append(platform_name)
                        
                          # Add @port to use for the temporary STAF instance
                          if argMap.has_key('port'):
                            test_machine = '%s@%s' % (test_machine_noPort, argMap['port'])
                          else:
                            test_machine = '%s@%s' % (test_machine_noPort, '6599')
 
                          test_duration = 0
                                            
                          passedTests = []
                          failedTests = []
                          </script>
                      
                          <!-- Get the STAX Job output for each test run and add to html output -->
                      
                          <iterate indexvar="i" var="test" in="testResultMap['passedTests'] + testResultMap['failedTests']">
                            <sequence>
                        
                              <log message="1">'[%s] %s' % (platform_name, test)</log>
                              <script>
                              logQueryReqList = []
                            
                              if test['name'] in ['STAFInstall', 'STAXSetup'] :
                                request = 'QUERY MACHINE {STAF/Config/MachineNickname} LOGNAME STAX_Job_%s AFTER %s BEFORE %s LEVELMASK "Error Fail" ALL' % \
                                          (STAXJobID, test['startTime'], test['endTime'])
                                logQueryReqList.append( {'staxMachine': test['staxMachine'], 'logname': 'STAX_Job_%s' % (STAXJobID), 'request': request} )
                                request = 'QUERY MACHINE {STAF/Config/MachineNickname} LOGNAME STAX_Job_%s_User AFTER %s BEFORE %s CONTAINS [%s] CONTAINS %s ALL' % \
                                          (STAXJobID, test['startTime'], test['endTime'], platform_name, argMap['targetMachine'])
                                logQueryReqList.append( {'staxMachine': test['staxMachine'], 'logname': 'STAX_Job_%s_User' % (STAXJobID), 'request': request} )
                              else:
                                if test['jobID'] != 0:
                                  request = 'QUERY MACHINE {STAF/Config/MachineNickname} LOGNAME STAX_Job_%s ALL' % (test['jobID'])
                                  logQueryReqList.append( {'staxMachine': test['staxMachine'], 'logname': 'STAX_Job_%s' % (test['jobID']), 'request': request} )
                                  request = 'QUERY MACHINE {STAF/Config/MachineNickname} LOGNAME STAX_Job_%s_User ALL' % (test['jobID'])
                                  logQueryReqList.append( {'staxMachine': test['staxMachine'], 'logname': 'STAX_Job_%s_User' % (test['jobID']), 'request': request} )
                              
                              testOutputList = ''
                              </script>
                          
                              <iterate var="reqMap" in="logQueryReqList">
                                <sequence>
                            
                                  <script>
                                    staxMachine = reqMap['staxMachine']
                                    logName = reqMap['logname']
                                    request = reqMap['request']
                                  </script>
                              
                                  <stafcmd name="'STAF local LOG %s' % (request)">
                                    <location>staxMachine</location>
                                    <service>'LOG'</service>
                                    <request>request</request>
                                  </stafcmd>
                              
                                  <if expr="RC != 0">
                                    <sequence>
                                      <script>logData = STAFResult</script>
                                      <log message="1" level="'error'">
                                        '[%s] STAF %s LOG %s failed.  RC=%s STAFResult=%s' % \
                                        (platform_name, staxMachine, request, RC, STAFResult)
                                      </log>
                                    </sequence>
                                    <else>
                                      <sequence>
                                        <!-- <script>logData = STAFResultContext</script> -->
                                        <call function="'convertLogQueryOutputToHTMLTable'">STAFResult</call>
                                        <script>logData = STAXResult</script>
                                      </sequence>  
                                    </else>  
                                  </if>
                             
                                  <script>
                                  testOutputList = '%s&lt;b>&lt;h3>%s Output (STAX Machine: %s)&lt;/h3>&lt;/b>%s' % \
                                    (testOutputList, logName, staxMachine, logData)
                                  </script>
                              
                                </sequence>
                              </iterate>
                  
                              <script>
                              if i &lt; len(testResultMap['passedTests']):
                                passedTests.append( [ test['name'], testOutputList ] )
                              else:
                                failedTests.append( [ test['name'], testOutputList ] )
                              
                              test_duration = test_duration + test['duration']
                              </script>
                            
                            </sequence>
                          </iterate>
                        
                          <log message="1">
                          '[%s] Failed Tests: %s  Passed Tests: %s' % (platform_name, len(failedTests), len(passedTests))
                          </log>
                      
                          <call function="'formatElapsedTime'">test_duration</call>
                          <script>test_duration = STAXResult</script>
                      
                          <script>
                          if len(failedTests) > 0:
                            last_test_output = testResultMap['failedTests'][len(failedTests) - 1]['result']
                          elif len(passedTests) > 0:
                            last_test_output = testResultMap['passedTests'][len(passedTests) - 1]['result']
                          else:
                            last_test_output = ''
                        
                          if test_machine_info.has_key('runSTAXLocally'):
                            if test_machine_info['runSTAXLocally'] == 1:
                              location_tests_run = 'Local'
                            else:
                              location_tests_run = 'Remote'
                          else:
                            location_tests_run = 'Local'
                            
                          platform_output = {
                                          'platform_name'              : platform_name,
                                          'platform_test_status'       : platform_test_status,
                                          'platform_failed_tests'      : failedTests,
                                          'platform_passed_tests'      : passedTests,
                                          'platform_last_test_output'  : last_test_output,
                                          'platform_test_machine'      : test_machine,
                                          'platform_installer_file'    : argMap['installerFile'],
                                          'platform_install_dir'       : argMap['targetInstallDir'],
                                          'platform_test_duration'     : test_duration,
                                          'platform_location_tests_run': location_tests_run 
                                          }

                          test_output.append(platform_output)
                          </script>
                          
                          <!-- Shutdown the instance of STAF running on the specified port if still running -->
          
                          <timer duration="'10m'">
                            <sequence>
                            
                              <stafcmd name="'Ping %s' % (test_machine)">
                                <location>test_machine</location>
                                <service>'PING'</service>
                                <request>'PING'</request>
                              </stafcmd>
                          
                              <if expr="RC == 0">
                                <sequence>
                                  <log message="1">
                                    '[%s] Wait 1 minute in case a previous shutdown request is in progress on %s.' % \
                                    (platform_name, test_machine)
                                  </log>
                                  <stafcmd name="'Delay 1 minute to allow time for a previous shutdown request to complete'">
                                    <location>'local'</location>
                                    <service>'DELAY'</service>
                                    <request>'DELAY 1m'</request>
                                  </stafcmd>
                                  <log message="1">
                                    '[%s] Shutting down STAF on %s after running tests.' % (platform_name, test_machine)
                                  </log>
                                  <stafcmd name="'Shutdown STAF'">
                                    <location>test_machine</location>
                                    <service>'SHUTDOWN'</service>
                                    <request>'SHUTDOWN'</request>
                                  </stafcmd>  
                                  <if expr="RC != STAFRC.Ok">
                                    <log message="1">
                                    '[%s] ERROR:  Shutting down STAF on %s failed after running tests. RC=%s STAFResult=%s' % \
                                    (platform_name, test_machine, RC, STAFResult)
                                    </log>
                                  </if>
                                  <log message="1">
                                    '[%s] Wait 3 minutes for the shutdown to complete on %s.' % (platform_name, test_machine)
                                  </log>
                                  <stafcmd name="'Delay 3 minutes to complete STAF shutdown'">
                                    <location>'local'</location>
                                    <service>'DELAY'</service>
                                    <request>'DELAY 3m'</request>
                                  </stafcmd>
                                </sequence>
                              </if>  
                          
                            </sequence>
                          </timer>
                          
                          <!-- Release the process completion information on the test machine so that the
                               process that started STAFProc (the STAFTmp instance) on the test machine
                               (and which is no longer running) is freed -->
                               
                          <stafcmd name="'Free Process Completion Information'">
                            <location>argMap['targetMachine']</location>
                            <service>'PROCESS'</service>
                            <request>'FREE ALL'</request>
                          </stafcmd>
                          
                          <!-- Release the mutex semaphore that includes the test machine's logical ID -->                          
                          <script>
                          request = 'RELEASE MUTEX STAF-AutoTest-%s' % (test_machine_logicalID)
                          </script>
                          <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>
                          <stafcmd name="'Releasing STAF-AutoTest-%s semaphore' % (test_machine_noPort)">
                            <location>ismpMach</location>
                            <service>'SEM'</service>
                            <request>request</request>
                          </stafcmd>
                          <log message="1">
                          '[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)
                          </log>
 
                          <script>
                          request = 'DELETE MUTEX STAF-AutoTest-%s' % (test_machine_logicalID)
                          </script>
                          <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>
                          <stafcmd name="'Delete ISMP Build resource'">
                            <location>ismpMach</location>
                            <service>'SEM'</service>
                            <request>request</request>
                          </stafcmd>                          
                          
                        </sequence>
                      </paralleliterate>
                    </else>
                  </if>
                
                </sequence>
                </block>
              </if>

            </sequence>

          </testcase>  
          </block>

        </if>

      </paralleliterate>

      <script>emailto = ''</script>
      <iterate var="address" in="emailList">
        <script>emailto = '%s TO %s' % (emailto, address)</script>
      </iterate>
      
      <script>
        summaryTable = ''
        buildTable = ''
        buildDetails = ''
        
        testSummaryTable = ''
        testTableNoLinks = ''
        testTable = ''
        testDetails = ''
      </script>
      
      <if expr="buildSTAF">
        <script>
          binaryFileText = ''
          
          for binaryFile in binaryFiles.get():
            binaryFileText = '%s\n%s' % (binaryFileText, binaryFile)

          if useRepositorySrc:
            srcInfo = 'Current CVS repository source code (extracted by stafautobuild)'
          else:
            srcInfo = 'Source tar file %s from machine %s' %(srcTarFile, srcTarMachine)
 
          summaryTable += """&lt;table border="0">
          &lt;tr bgcolor=77AA33>&lt;td>&lt;font face="Arial,Helvetica">&lt;b>Build Summary&lt;/b>&lt;/font>&lt;/td>&lt;td>  &lt;/td>&lt;/tr>
          &lt;tr bgcolor=DDFFBB>&lt;td>&lt;font face="Arial,Helvetica">Successful Platforms&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=BBDD66>&lt;td>&lt;font face="Arial,Helvetica">Failed Platforms&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=DDFFBB>&lt;td>&lt;font face="Arial,Helvetica">Build Input&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=BBDD66>&lt;td>&lt;font face="Arial,Helvetica">Started&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=DDFFBB>&lt;td>&lt;font face="Arial,Helvetica">Completed&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=BBDD66>&lt;td>&lt;font face="Arial,Helvetica">Platform List&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=DDFFBB>&lt;td>&lt;font face="Arial,Helvetica">STAX Machine&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=BBDD66>&lt;td>&lt;font face="Arial,Helvetica">STAX Job ID&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;tr bgcolor=DDFFBB>&lt;td>&lt;font face="Arial,Helvetica">FTP Machine&lt;/font>&lt;/td>&lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>&lt;/tr>
          &lt;/table>
          """ % (pass_platforms, fail_platforms, srcInfo, startTime, time.strftime("%Y%m%d-%H:%M:%S"), platform_list, STAXServiceMachine, STAXJobID, ftp_machine)

          buildTable = """&lt;h2>&lt;font face="Arial,Helvetica">Build Details&lt;/font>&lt;/h2>
          &lt;table border="0" width="100%%">
            &lt;tr bgcolor=4477BB>
              &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Platform&lt;/b>&lt;/font>&lt;/td>
              &lt;td width="5%%">&lt;font face="Arial,Helvetica">&lt;b>Status&lt;/b>&lt;/font>&lt;/td>
              &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Started&lt;/b>&lt;/font>&lt;/td>
              &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Completed&lt;/b>&lt;/font>&lt;/td>
              &lt;td width="15%%">&lt;font face="Arial,Helvetica">&lt;b>Build Machine&lt;/b>&lt;/font>&lt;/td>
              &lt;td width="20%%">&lt;font face="Arial,Helvetica">&lt;b>Projects&lt;/b>&lt;/font>&lt;/td>
              &lt;td width="30%%">&lt;font face="Arial,Helvetica">&lt;b>Output Files&lt;/b>&lt;/font>&lt;/td>
            &lt;/tr>
          """

          rowSwitch = 0
          #print build_output.get()

          for platform in build_output.get() :

            if rowSwitch == 0 :
              bgcolor = 'DDEEFF'
              rowSwitch = 1
            else :
              bgcolor = '99CCFF'
              rowSwitch = 0

            files = ''
            for platform_file in platform['platform_build_output_files'] :
              files += '&lt;a href="%s">%s&lt;/a>&lt;br>' % (platform_file[1], platform_file[0])

            projects = ''
            for platform_project in platform['platform_build_output'] :
              projects += '&lt;a name="%s_%s" href="#%s_%s_output">%s&lt;/a> ' % (platform['platform_name'], platform_project[0], platform['platform_name'], platform_project[0], platform_project[0])

            buildTable += '&lt;tr bgcolor=%s>&lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>' % (bgcolor, platform['platform_name'])
            buildTable += '&lt;td width="5%%">&lt;font face="Arial,Helvetica">Pass&lt;/font>&lt;/td>'
            buildTable += '&lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>' % (platform['platform_build_started'])
            buildTable += '&lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>' % (platform['platform_build_completed'])
            buildTable += '&lt;td width="15%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>' % (platform['platform_build_machine'])
            buildTable += '&lt;td width="20%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>' % (projects)
            buildTable += '&lt;td width="30%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>' % (files)
            buildTable += '&lt;/tr>'

          buildTable += '&lt;/table>'

          for platform in build_output.get() :
            buildDetails += '&lt;h2>%s&lt;/h2>' % (platform['platform_name'])
            for platform_project in platform['platform_build_output'] :
              buildDetails += '&lt;h3>&lt;a name="%s_%s_output" href="#%s_%s">%s&lt;/a>&lt;/h3>&lt;pre>&lt;font face=\"Fixed width\" size=3>%s&lt;/font>&lt;/pre>' % (platform['platform_name'], platform_project[0], platform['platform_name'], platform_project[0], platform_project[0], platform_project[1])

        </script>
      </if>  

      <if expr="testSTAF">
        <script>
          not_tested_platforms = []
          for platform in platform_list:
            if platform not in fail_test_platforms and platform not in pass_test_platforms:
              not_tested_platforms.append(platform)
      
          test_list = ['STAFInstall', 'STAFTest.xml']    
            
          # Create Test Summary Table
          
          testSummaryList = []
          testSummaryList.append( ['Successful Platforms', pass_test_platforms              ] )
          testSummaryList.append( ['Failed Platforms'    , fail_test_platforms              ] )
          testSummaryList.append( ['Not Tested Platforms', not_tested_platforms             ] )
          testSummaryList.append( ['Platform List',        platform_list                    ] )
          testSummaryList.append( ['Test List',            test_list                        ] )
          testSummaryList.append( ['Started',              testStartTime.get()              ] )
          testSummaryList.append( ['Completed',            time.strftime("%Y%m%d-%H:%M:%S") ] )
          testSummaryList.append( ['STAX Machine',         STAXServiceMachine               ] )
          testSummaryList.append( ['STAX Job ID',          STAXJobID                        ] )
          testSummaryList.append( ['FTP Machine',          ftp_machine                      ] )
          
          testSummaryTable += """
          &lt;table border="0">
          &lt;tr bgcolor=77AA33>
            &lt;td>&lt;font face="Arial,Helvetica">&lt;b>Test Summary&lt;/b>&lt;/font>&lt;/td>
            &lt;td>  &lt;/td>
          &lt;/tr>
          """
          
          rowSwitch = 0
          
          for entry in testSummaryList :
          
            if rowSwitch == 0 :
              bgcolor = 'DDFFBB'
              rowSwitch = 1
            else :
              bgcolor = 'BBDD66'
              rowSwitch = 0
              
            testSummaryTable += """&lt;tr bgcolor=%s>
            &lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
            &lt;td>&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
          &lt;/tr>
          """ % (bgcolor, entry[0], entry[1])
          
          testSummaryTable += """&lt;/table>
          """

          # Create Test Details

          testTable += '&lt;h2>&lt;font face="Arial,Helvetica">Test Details&lt;/font>&lt;/h2>&lt;br>'
          testTableNoLinks += '&lt;h2>&lt;font face="Arial,Helvetica">Test Details&lt;/font>&lt;/h2>&lt;br>'
          
          beginTableData = """
          &lt;table border="0" width="100%%">
          &lt;tr bgcolor=4477BB>
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Platform&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="5%%">&lt;font face="Arial,Helvetica">&lt;b>Status&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Failed Tests&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="15%%">&lt;font face="Arial,Helvetica">&lt;b>Passed Tests&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="25%%">&lt;font face="Arial,Helvetica">&lt;b>Last Test Results&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="20%%">&lt;font face="Arial,Helvetica">&lt;b>Test Machine / Installer File&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Tests Run&lt;/b>&lt;/font>&lt;/td>
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">&lt;b>Duration&lt;/b>&lt;/font>&lt;/td>
          &lt;/tr>"""
          testTable += beginTableData
          testTableNoLinks += beginTableData

          import os.path
          
          rowSwitch = 0

          for platform in test_output.get() :

            if rowSwitch == 0 :
              bgcolor = 'DDEEFF'
              rowSwitch = 1
            else :
              bgcolor = '99CCFF'
              rowSwitch = 0
            
            failedTestsNoLinks = ''
            failedTests = ''
            passedTestsNoLinks = ''
            passedTests = ''
            
            for test in platform['platform_failed_tests'] :
            
              # Create an entry in a space separated list of the tests that failed with no links to the log output for each failed test
              failedTestsNoLinks += '%s ' % (test[0])
              
              # Create an entry in a space separated list of the tests that failed with links to the log output for each failed test
              failedTests += '&lt;a name="%s_%s_%s" href="#%s_%s_%s_output">%s&lt;/a>' % \
                (platform['platform_name'], platform['platform_test_machine'], test[0],
                 platform['platform_name'], platform['platform_test_machine'], test[0],
                 test[0])
            
            for test in platform['platform_passed_tests'] :
            
              # Create an entry in a space separated list of the tests that passed with no links to the log output for each passed test
              passedTestsNoLinks += '%s ' % (test[0])
              
              # Create an entry in a space separated list of the tests that passed with links to the log output for each passed test
              passedTests += '&lt;a name="%s_%s_%s" href="#%s_%s_%s_output">%s&lt;/a> ' % \
                (platform['platform_name'], platform['platform_test_machine'], test[0],
                 platform['platform_name'], platform['platform_test_machine'], test[0],
                 test[0])
            
            machineAndInstallerFile = """%s
          %s""" % (platform['platform_test_machine'], os.path.basename(platform['platform_installer_file']))
                 
            row_entry = """
          &lt;tr bgcolor=%s>&lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
            &lt;td width="5%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>""" % \
              (bgcolor, platform['platform_name'], platform['platform_test_status'])
              
            testTable += row_entry
            testTableNoLinks += row_entry
            
            testTable += """
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>""" % (failedTests)
            
            testTableNoLinks += """
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>""" % (failedTestsNoLinks)
            
            testTable += """
            &lt;td width="15%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>""" % (passedTests)
            
            testTableNoLinks += """
            &lt;td width="15%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>""" % (passedTestsNoLinks)
            
            row_entry = """
            &lt;td width="25%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
            &lt;td width="20%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
            &lt;td width="10%%">&lt;font face="Arial,Helvetica">%s&lt;/font>&lt;/td>
          &lt;/tr>""" % (platform['platform_last_test_output'], machineAndInstallerFile,
                         platform['platform_location_tests_run'], platform['platform_test_duration'])
            
            testTable += row_entry
            testTableNoLinks += row_entry

          testTable += """
          &lt;/table>"""
          
          testTableNoLinks += """
          &lt;/table>"""

          # Get test details
          
          for platform in test_output.get() :
          
            testDetails += """
          &lt;h2>%s&lt;/h2>
          """ % (platform['platform_name'])
            
            for test in platform['platform_failed_tests'] :
              testDetails += """
          &lt;h3>&lt;a name="%s_%s_%s_output" href="#%s_%s_%s">%s&lt;/a>&lt;/h3>
          %s""" % (platform['platform_name'], platform['platform_test_machine'], test[0],
                   platform['platform_name'], platform['platform_test_machine'], test[0],
                   test[0], test[1])
           
            for test in platform['platform_passed_tests'] :
              testDetails += """
          &lt;h3>&lt;a name="%s_%s_%s_output" href="#%s_%s_%s">%s&lt;/a>&lt;/h3>
          %s""" % (platform['platform_name'], platform['platform_test_machine'], test[0],
                   platform['platform_name'], platform['platform_test_machine'], test[0],
                   test[0], test[1])

        </script>
      </if>  
      
      <script>
        currentTime = time.strftime("%Y%m%d-%H%M")
        reportFileName = 'C:/temp/STAF-Automated-Build-%s.html' % (currentTime)
 
        reportFile = open(reportFileName, 'w')
        reportFile.write('&lt;head>&lt;title>STAF Automated Build and Test Report - %s&lt;/title>&lt;/head>&lt;br>' % (currentTime))

        if buildSTAF:
          reportFile.write('%s' % (summaryTable))
        if testSTAF:
          reportFile.write('&lt;br>%s' % (testSummaryTable))
        if buildSTAF:
          reportFile.write('&lt;br>%s' % (buildTable))
        if testSTAF:
          reportFile.write('&lt;br>%s' % (testTable))   
        if buildSTAF:
          reportFile.write('&lt;br>%s' % (buildDetails))
        if testSTAF:
          reportFile.write('&lt;br>%s' % (testDetails))           
          
        reportFile.close()
        
        from com.ibm.staf import STAFUtil
        emailmessage = "%s&lt;br>&lt;br>%s&lt;br>&lt;br>%s&lt;br>" % ( summaryTable, testSummaryTable, testTableNoLinks )
        #emailmessage = "%s&lt;br>&lt;br>%s&lt;br>&lt;br>%s" % ( summaryTable, buildTable, buildDetails )
        #emailmessage = "&lt;pre>&lt;font face=\"Fixed width\" size=2>STAXJobID: %s\n\nSTAF V%s Automated Build for %s \n\nStarted at:   %s\nCompleted at: %s\n\n%s\n\nBinary files are available on %s:\n%s&lt;/font>&lt;/pre>%s" % ( STAXJobID, staf_version, platform_list, startTime, time.strftime("%H:%M"), srcInfo, ftp_machine, binaryFileText, buildDetails )
        emailsubject = "STAF%s Automated Build and Test Report" % (staf_version)
      
        request = 'SEND %s CONTENTTYPE text/html NOHEADER NORESOLVEMESSAGE BINARYATTACHMENT %s MESSAGE %s' % \
                  (emailto, STAFUtil.wrapData(reportFileName), STAFUtil.wrapData(emailmessage))
      </script>
      
      <call function="'SendEmail'">
        { 'emailRequest': request, 'emailSubject': emailsubject }
      </call>

      <stafcmd name="'Releasing STAF-AutoBuild semaphore'">
        <location>ismpMach</location>
        <service>'SEM'</service>
        <request>'release mutex STAF-AutoBuild force'</request>
      </stafcmd>

      <log message="1">'End function StartBuild'</log>

    </sequence>

  </function>

  <function name="SendEmail">
 
    <function-map-args>
      <function-arg-def name="emailRequest" type="required">
        <function-arg-description>
          The email request to submit (without the SUBJECT option)
        </function-arg-description>
       </function-arg-def>
       <function-arg-def name="emailSubject" type="optional" default="''">
        <function-arg-description>
          The email subject
        </function-arg-description>
       </function-arg-def>
    </function-map-args>  
    
    <sequence>
      <loop var="i" from="1" to="10">
        <sequence>
 
          <!-- Checking to see if retrying the email request helps with RC 4001
               errors where STAFResult begins with "Socket IO Error" -->
          <if expr="i > 1">
            <script>
              emailSubject = '%s (Attempt #%s)' % (emailSubject, i)
            </script>
          </if>
      
          <stafcmd name="'Emailing build notification'">
            <location>'local'</location>
            <service>'EMAIL'</service>
            <request>'%s SUBJECT %s' % (request, STAFUtil.wrapData(emailSubject))</request>
          </stafcmd>
      
          <if expr="RC == 0">
            <sequence>
              <log message="1">
              '[Email] Attempt #%s was successful.  RC=%s, Result=%s' % (i, RC, STAFResult)
              </log>
              <break/>
            </sequence>
          </if>  
          
          <if expr="RC == 4001 and STAFResult.find('Socket IO Error:') == 0">
            <sequence>
              <script>
                if i == 10:
                  logLevel = 'Error'
                else:
                  logLevel = 'Warning'
              </script>
              <log message="1" level="logLevel">
                '[Email] Attempt #%s failed.  RC=%s, Result=%s' % (i, RC, STAFResult)
              </log>
            </sequence>  
            <else>
              <sequence>
                <log message="1" level="'Error'">
                '[Email] RC=%s, Result=%s' % (RC, STAFResult)
                </log>
                <break/>
              </sequence>  
            </else>  
         </if>
                   
        </sequence>
      </loop>
            
      <return>[RC, STAFResult]</return>
      
    </sequence>  
  </function>
  
  <!-- ================================================================= -->
  <!-- InitializePlatformOptions - This function is used to initialize   -->
  <!-- platform-specific variables via its function arguments.           -->
  <!-- ================================================================= -->

  <function name="InitializePlatformOptions">

     <function-map-args>

      <function-arg-def name="platform_name" type="required">
        <function-arg-description>
          The name of the platform (i.e. 'win32', 'linux', macosx-i386, etc.).
          This name must be unique and will be used as part of the installer
          file names.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="platform_semaphore" type="required">
        <function-arg-description>
          The platform name used as a semaphore to prevent platform-related
          builds from building at the same time (for example, to build both
          'win32' and 'win64', which use the same build machine, use a
          'windows' platform semaphore to prevent both from building at the
          same time)
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="build_machine" type="required">
        <function-arg-description>
          The platform build machine.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="build_root" type="required">
        <function-arg-description>
          The build machine's root (i.e. 'c:', '/opt', etc.).
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="project_list" type="required">
        <function-arg-description>
          The build machine's list of projects to build..
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="make" type="required">
        <function-arg-description>
          The build machine's make executable.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="path_sep" type="required">
        <function-arg-description>
          The build machine's path separator.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="bash_shell" type="required">
        <function-arg-description>
          The build machine's bash script executable (i.e. 'c:\\cygwin\\bin\\bash', 'sh', 'bash', etc.).
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="ismp_exe_suffix" type="required">
        <function-arg-description>
          The InstallShield binary executable suffix (i.e. "exe" or "bin).
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="ms_vc_dir" type="optional" default="'C:/MVStudio'">
        <function-arg-description>
          The build machine's Microsoft Visual Studio root directory (i.e. C:/MVStudio).  Only applicable for Windows platforms.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="vs_common_dir" type="optional" default="'C:/MVStudio/Common'">
        <function-arg-description>
          The build machine's Microsoft Visual Studio common directory (i.e. C:/MVStudio/Common).  Only applicable for Windows platforms.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_v12_bin_dir" type="optional" default="''">
        <function-arg-description>
          The build machine's JAVA_V12_BIN_DIR.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_v12_root" type="optional" default="''">
        <function-arg-description>
          The build machine's JAVA_V12_ROOT.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_v12_include_dir" type="optional" default="'%s/include' % (java_v12_root)">
        <function-arg-description>
          The build machine's JAVA_V12_INCLUDE_DIR.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_v50_root" type="optional" default="java_v12_root">
        <function-arg-description>
          The build machine's root directory for Java 5.0 or later.
        </function-arg-description>
      </function-arg-def>
      
      <function-arg-def name="java_v50_bin_dir" type="optional" default="'%s/bin' % (java_v50_root)">
        <function-arg-description>
          The build machine's bin directory for Java 5.0 or later.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_v50_include_dir" type="optional" default="'%s/include' % (java_v50_root)">
        <function-arg-description>
          The build machine's including directory for Java 5.0 or later.
        </function-arg-description>
      </function-arg-def>
      
      <function-arg-def name="java_build_v11" type="optional" default="'0'">
        <function-arg-description>
          The build machine's JAVA_BUILD_V11.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_build_v12" type="optional" default="'1'">
        <function-arg-description>
          The build machine's JAVA_BUILD_V12.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_v11_root" type="optional" default="''">
        <function-arg-description>
          The build machine's JAVA_V11_ROOT.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="java_default_version" type="optional" default="'V12'">
        <function-arg-description>
          The build machine's JAVA_DEFAULT_VERSION.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="rexx_root" type="optional" default="'C:/Progra~1/ObjREXX'">
        <function-arg-description>
          The build machine's REXX_ROOT.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="rexx_libdirs" type="optional" default="'C:/Progra~1/ObjREXX/API'">
        <function-arg-description>
          The build machine's REXX_LIBDIRS.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="rxpp_root" type="optional" default="'C:/tools/rxpp'">
        <function-arg-description>
          The build machine's RXPP_ROOT.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="b2h_root" type="optional" default="'C:/tools/b2h'">
        <function-arg-description>
          The build machine's B2H_ROOT.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="os_lib_files" type="optional" default="''">
        <function-arg-description>
          The build machine's operating system library files to be included with STAF.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="os_lib_dir" type="optional" default="''">
        <function-arg-description>
          The build machine's operating system library directory.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="ismp_suffix" type="optional" default="''">
        <function-arg-description>
          The platform's InstallShield platform name suffix.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="build_osname" type="optional" default="''">
        <function-arg-description>
          The platform's build operating system name.
          This will be the extension for it's makefile (e.g. what OS_NAME is set to).
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="architecture" type="optional" default="''">
        <function-arg-description>
          The platform's architecture ("32-bit" or "64-bit").  Used for the
          install.properties file.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="osname" type="optional" default="''">
        <function-arg-description>
          The platform's os.name.  Used for the install.properties file.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="osversion" type="optional" default="''">
        <function-arg-description>
          The platform's os.version.  Used for the install.properties file.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="osarch" type="optional" default="''">
        <function-arg-description>
          The platform's os.arch.  Used for the install.properties file.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="build_ismp_files" type="optional" default="'0'">
        <function-arg-description>
          Indicates whether to build ISMP files for this platform ("0" or "1").
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="build_ia_files" type="optional" default="'0'">
        <function-arg-description>
          Indicates whether to build IA files for this platform ("0" or "1").
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="ia_platform" type="optional" default="''">
        <function-arg-description>
          Indicates the platform name for the IA payload directory.
        </function-arg-description>
      </function-arg-def>
      
      <function-arg-def name="ia_machine" type="optional" default="'local'">
        <function-arg-description>
          Indicates the machine where InstallAnywhere is installed
        </function-arg-description>
      </function-arg-def>
            
      <function-arg-def name="ia_root" type="optional" default="'C:/IA2012'">
        <function-arg-description>
          Indicates the InstallAnywhere root directory to use on the ia_machine
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="saxon_root" type="optional" default="'c:/tools/saxon'">
        <function-arg-description>
          The build machine's SAXON_ROOT.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="docbook_root" type="optional" default="'c:/tools/docbook'">
        <function-arg-description>
          The build machine's DOCBOOK_ROOT.
        </function-arg-description>
      </function-arg-def>
      
      <function-arg-def name="openssl_root" type="optional" default="'/opt/dev/autobuild/tools/openssl-0.9.8e-root'">
        <function-arg-description>
          The build machine's OPENSSL_ROOT.
        </function-arg-description>
      </function-arg-def>
      
      <function-arg-def name="test_machine_list" type="optional" default="[]">
        <function-arg-description>
          A list of machines where you want to install and test STAF.
          Each entry in the list is a map which must contain the following
          required keys:  'targetMachine', 'targetInstallDir', and 'installFileSuffix',
          and may optionally contain the following keys: 'installerFile',
          'installerMachine', 'installShieldTempDir', 'port', 'javaBinDir',
          'installType', 'updateEnvVars', and 'tcpipVersion'.
        </function-arg-description>
      </function-arg-def>

      <function-arg-def name="test_using" type="optional" default="'STAFInst'">
        <function-arg-description>
          The type of install file to use when testing.  Valid values
          are "STAFInst", "IA", and "ISMP".
        </function-arg-description>
      </function-arg-def>

    </function-map-args>

    <sequence>

      <log message="1">'[main] Begin function InitializePlatformOptions'</log>

      <log message="1">'[main] End function InitializePlatformOptions'</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- check-stafcmd - This function determines whether an arbitrary     -->
  <!--                 staf command worked.  If not, it generates some   -->
  <!--                 messages and log data, and then terminates the    -->
  <!--                 whole job.                                        -->
  <!-- ================================================================= -->

  <function name="check-stafcmd">
    <if expr="RC != 0">
      <sequence>

        <script>
          from com.ibm.staf import STAFUtil
          # Changed STAFResult to STAFMarshalling.formatObject(STAFResultContext) to print better
          message = 'STAXJobID: %s\n\nFailed %s (RC=%d): %s, Result: %s' % (STAXJobID, platform_name, RC, failMessage, STAFMarshalling.formatObject(STAFResultContext))
          emailsubject = "STAF%s automated build failed" % (staf_version)
          fail_platforms.append(platform_name)
        </script>

        <log message="1" level="'error'">message</log>

        <script>emailto = ''</script>
        <iterate var="address" in="emailList">
          <script>emailto = '%s TO %s' % (emailto, address)</script>
        </iterate>

        <script>
          # Emailing failure notification
          request = 'SEND %s NORESOLVEMESSAGE MESSAGE %s' %(emailto, STAFUtil.wrapData(message))
        </script>
        
        <call function="'SendEmail'">
          { 'emailRequest': request, 'emailSubject': emailsubject }
        </call>
        
        <stafcmd name="'Releasing STAF-AutoBuild semaphore'">
          <location>ismpMach</location>
          <service>'SEM'</service>
          <request>'RELEASE MUTEX STAF-AutoBuild FORCE'</request>
        </stafcmd>

        <script>
          try:
            request = 'RELEASE MUTEX STAF-AutoBuild-%s' % (platform['platform_semaphore'])
          except:
            releasePlatformSem = 0
          else:
            releasePlatformSem = 1
        </script>

        <if expr="releasePlatformSem">
          <sequence>
            <stafcmd name="'Releasing STAF-AutoBuild-%s semaphore' % (platform['platform_semaphore'])">
              <location>ismpMach</location>
              <service>'SEM'</service>
              <request>request</request>
            </stafcmd>
            <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform['platform_semaphore'], RC, STAFResult, ismpMach, request)</log>
          </sequence>  
        </if>

        <!-- Logout of CVS -->

        <log  message="1">"Logging out of CVS"</log>

        <process name="'CVS Logout'">
          <location>extractMach</location>
          <command>cygwinBashShell</command>
          <parms>"-c 'echo | cvs -d %s logout'" % cvsRoot</parms>
          <workdir>extractPath</workdir>
          <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
          <stdout if="debug">'%s/cvs_logout.out' % extractLogPath</stdout>
          <stderr if="debug">'%s/cvs_logout.err' % extractLogPath</stderr>
        </process>

        <terminate/>
      </sequence>
    </if>
  </function>

  <!-- ================================================================= -->
  <!-- check-process - This function determines whether an arbitrary     -->
  <!--                 process worked.  If not, it generates some        -->
  <!--                 messages and log data, and then terminates the    -->
  <!--                 whole job.                                        -->
  <!-- ================================================================= -->

  <function name="check-process">
    <if expr="RC != 0">
      <sequence>

        <script>
          from com.ibm.staf import STAFUtil
          message = 'STAXJobID: %s\n\nFailed %s (RC=%d): %s' % (STAXJobID, platform_name, RC, failMessage)
          emailsubject = "STAF%s automated build failed" % (staf_version)
          fail_platforms.append(platform_name)
        </script>

        <log  message="1" level="'error'">message</log>

        <script>emailto = ''</script>
        <iterate var="address" in="emailList">
          <script>emailto = '%s TO %s' % (emailto, address)</script>
        </iterate>

        <script>
          # Emailing failure notification
          request = 'SEND %s NORESOLVEMESSAGE MESSAGE %s' %(emailto, STAFUtil.wrapData(message))
        </script>
        
        <call function="'SendEmail'">
          { 'emailRequest': request, 'emailSubject': emailsubject }
        </call>

        <stafcmd name="'Releasing STAF-AutoBuild semaphore'">
          <location>ismpMach</location>
          <service>'SEM'</service>
          <request>'RELEASE MUTEX STAF-AutoBuild FORCE'</request>
        </stafcmd>
 
        <if expr="platform != ''">
          <sequence>        
            <script>
              request = 'RELEASE MUTEX STAF-AutoBuild-%s' % (platform['platform_semaphore'])
            </script>

            <stafcmd name="'Releasing STAF-AutoBuild-%s semaphore' % (platform['platform_semaphore'])">
              <location>ismpMach</location>
              <service>'SEM'</service>
              <request>request</request>
            </stafcmd>
            
            <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform['platform_semaphore'], RC, STAFResult, ismpMach, request)</log>
          </sequence>
        </if>  

        <!-- Logout of CVS -->

        <log  message="1">"Logging out of CVS"</log>

        <process name="'CVS Logout'">
          <location>extractMach</location>
          <command>cygwinBashShell</command>
          <parms>"-c 'echo | cvs -d %s logout'" % cvsRoot</parms>
          <workdir>extractPath</workdir>
          <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
          <stdout if="debug">'%s/cvs_logout.out' % extractLogPath</stdout>
          <stderr if="debug">'%s/cvs_logout.err' % extractLogPath</stderr>
        </process>

        <terminate/>
      </sequence>
    </if>
  </function>

  <!-- ================================================================= -->
  <!-- check-win-bash-process - This function determines whether a bash  -->
  <!--                          process running on win32 worked.         -->
  <!-- ================================================================= -->

  <function name="check-win-bash-process">
    <sequence>
      <script>
        if (RC > 130000): RC = 131072 - RC
      </script>
      <call function="'check-process'"/>
    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- ExportSource -  This function is responsible for extracting the   -->
  <!--                 source from CVS and generating a source tarball.  -->
  <!--                 It will also archive the CVS repository if the    -->
  <!--                 daily archive has not yet been created.           -->
  <!-- ================================================================= -->

  <function name="ExportSource">
    <sequence>

      <log message="1">'[main] Begin function ExportSource'</log>

      <script>
        build_started = time.strftime("%Y%m%d-%H:%M:%S")
      </script>

      <if expr="copy_to_ga">
        <sequence>
          <script>
            request = 'CREATE DIRECTORY %s/%sga-test' % (ftp_path, staf_version)
          </script>
          <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Create ftp server GA directory'">
            <location>ftp_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ftp_machine, request)</log>
        </sequence>
      </if>

      <!-- Delete the extraction path if requested -->

      <log message="1">"[main] Setting up extraction directory"</log>

      <if expr="startClean">
        <sequence>
          <call function="'DeleteEntry'">
            {'entry': extractPath, 'machine': extractMach, 'isDirectory': 1, 'platform': 'main'}
          </call>
          <call function="'DeleteEntry'">
            {'entry': extractLogPath, 'machine': extractMach, 'isDirectory': 1, 'platform': 'main'}
          </call>
        </sequence>
      </if>

      <!-- Create the extraction and extraction_log path -->

      <script>
        request = 'CREATE DIRECTORY %s FULLPATH' % (STAFUtil.wrapData(extractPath))
      </script>
      <log message="1">'[main] %s FS %s' % (extractMach, request)</log>

      <stafcmd name="'Create extraction path'">
        <location>extractMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>

      <script>failMessage = '[main] Creating extraction path on %s' % (extractMach)</script>
      <call function="'check-stafcmd'"/>

      <if expr="debug">
        <sequence>

          <script>
            request = 'CREATE DIRECTORY %s FULLPATH' % (STAFUtil.wrapData(extractPath))
          </script>
          <log message="1">'[main] %s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Create extraction log path'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>

          <script>failMessage = '[main] Creating extraction log path on %s' % (extractMach)</script>
          <call function="'check-stafcmd'"/>

        </sequence>
      </if>

      <if expr="useRepositorySrc">
        <sequence>

          <log message="1">"[main] Checking out STAF source code"</log>

          <script>
            process = "-c 'cvs -d :ext:stafautobuild@staf.cvs.sourceforge.net:/cvsroot/staf co src'"
          </script>
          <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

          <process name="'CVS Export'">
            <location>extractMach</location>
            <command>cygwinBashShell</command>
            <parms>process</parms>
            <workdir>extractPath</workdir>
            <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
            <env>'CVS_RSH=ssh'</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <script>
            if STAXResult != None:
              errorData = STAXResult[0][1]
            else:
              errorData = STAFResult
          </script>
          
          <log message="1">'[main] RC=%s, STAXResult=%s, Process=%s %s %s' % (RC, errorData, extractMach, cygwinBashShell, process)</log>

          <script>failMessage = '[main] Checking out STAF source code on %s' % (extractMach)</script>
          <call function="'check-win-bash-process'"/>

          <!-- Remove the src/staf/eclipse directory as a workaround for
               problems caused by the tar source file containing paths
               longer than 100 characters -->
          <script>
            eclipseSourcePath = '%s/src/staf/eclipse' % (extractPath)
            request = 'DELETE ENTRY %s RECURSE CONFIRM' % (STAFUtil.wrapData(eclipseSourcePath))
          </script>
          <log message="1">'[main] %s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Delete extraction src/staf/eclipse directory'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>

          <if expr="holdAfterExtract">
            <hold/>
          </if>
        </sequence>
        <else>
          <sequence>

            <log message="1">'[main] Using Src Tar file %s from machine %s' %(srcTarFile, srcTarMachine)</log>

            <script>
              request = 'COPY FILE %s TOFILE %s/src.tar TOMACHINE %s' % (srcTarFile, extractPath, extractMach)
            </script>
            <log message="1">'[main] %s FS %s' % (srcTarMachine, request)</log>

            <stafcmd name="'Transfer Src Tar File to extract machine'">
              <location>srcTarMachine</location>
              <service>'FS'</service>
              <request>request</request>
            </stafcmd>

            <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, srcTarMachine, request)</log>

            <script>failMessage = '[main] Transfer Src Tar File from %s to extract machine (%s)' % (srcTarMachine, extractMach)</script>
            <call function="'check-stafcmd'"/>

            <!-- Untar it -->

            <script>
              process = "-c 'tar xf src.tar'"
            </script>
            <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

            <process name="'Untar Src Tar File'">
              <location>extractMach</location>
              <command>cygwinBashShell</command>
              <parms>process</parms>
              <workdir>extractPath</workdir>
              <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
              <stderr mode="'stdout'"/>
              <returnstdout/>
            </process>

            <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, extractMach, cygwinBashShell, process)</log>

            <script>failMessage = '[main] Untar Src Tar File on %s' % (extractMach)</script>
            <call function="'check-win-bash-process'"/>
          </sequence>
        </else>
      </if>

      <!-- Update source timestamps to yesterday to try to ensure that make will not fail or hang
           due to source timestamps that are later than the current time on the build machines. -->

      <log message="1">"[main] Updating source timestamps"</log>

      <script>
        process = "-c 'find . -name \"*\" -exec touch --date yesterday ^{} \;'"
      </script>
      <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

      <process name="'Updating source timestamps to yesterday'">
        <location>extractMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>extractPath</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, extractMach, cygwinBashShell, process)</log>

      <script>failMessage = '[main] Updating source timestamps on extract machine (%s)' % (extractMach)</script>
      <call function="'check-win-bash-process'"/>

      <!-- Tar it up -->

      <log message="1">"[main] Creating source package (tarball)"</log>

      <script>
        process = "-c 'tar cf STAFSource.tar src'"
      </script>
      <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

      <process name="'Create source package'">
        <location>extractMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>extractPath</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, extractMach, cygwinBashShell, process)</log>

      <script>failMessage = '[main] Creating source package on extract machine (%s)' % (extractMach)</script>
      <call function="'check-win-bash-process'"/>

      <log message="1">'[main] Copying source tar file to ftp server'</log>

      <!-- Transfer source tar file to ftp server -->

      <script>
        process = "-c 'cp STAFSource.tar STAF%s-src.tar'" % staf_version
      </script>
      <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

      <process name="'Copy source tar file'">
        <location>extractMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>extractPath</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, extractMach, cygwinBashShell, process)</log>

      <script>failMessage = '[main] Copy source tar file on extract machine (%s)' % (extractMach)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        process = "-c 'gzip STAF%s-src.tar'" % staf_version
      </script>
      <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

      <process name="'Gzip source tar file'">
        <location>extractMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>extractPath</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, extractMach, cygwinBashShell, process)</log>

      <script>failMessage = '[main] Gzip source tar file on extract machine (%s)' % (extractMach)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        request = 'COPY FILE %s/STAF%s-src.tar.gz TOFILE %s/src/STAF%s-src.tar.gz TOMACHINE %s' % (extractPath, staf_version, ftp_path, staf_version, ftp_machine)
      </script>
      <log message="1">'[main] %s FS %s' % (extractMach, request)</log>

      <stafcmd name="'Transfer source tar.gz file to ftp server'">
        <location>extractMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>

      <script>binaryFiles.append('%s/src/STAF%s-src.tar.gz' % (ftp_path, staf_version))</script> 

      <script>failMessage = '[main] Transfer source tar.gz file from extract machine (%s) to ftp server (%s)' % (extractMach, ftp_machine)</script>
      <call function="'check-stafcmd'"/>

      <if expr="copy_to_ga">
        <sequence>
          <script>
            request = 'COPY FILE %s/STAF%s-src.tar.gz TOFILE %s/%sga-test/STAF%s-src.tar.gz TOMACHINE %s' % (extractPath, staf_version, ftp_path, staf_version, staf_version, ftp_machine)
          </script>
          <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Transfer source tar.gz file to ftp server GA directory'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
        </sequence>
      </if>

      <script>
        process = "-c 'zip -r -q STAF%s-src.zip src'" % staf_version
      </script>
      <log message="1">'[main] %s %s %s' % (extractMach, cygwinBashShell, process)</log>

      <process name="'Create source zip file'">
        <location>extractMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>extractPath</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, extractMach, cygwinBashShell, process)</log>

      <script>failMessage = '[main] Create source Zip file on extract machine (%s)' % (extractMach)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        request = 'COPY FILE %s/STAF%s-src.zip TOFILE %s/src/STAF%s-src.zip TOMACHINE %s' % (extractPath, staf_version, ftp_path, staf_version, ftp_machine)
      </script>
      <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

      <stafcmd name="'Transfer source zip file to ftp server'">
        <location>extractMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>

      <if expr="copy_to_ga">
        <sequence>
          <script>
            request = 'COPY FILE %s/STAF%s-src.zip TOFILE %s/%sga-test/STAF%s-src.zip TOMACHINE %s' % (extractPath, staf_version, ftp_path, staf_version, staf_version, ftp_machine)
          </script>
          <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Transfer source zip file to ftp server GA directory'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
        </sequence>
      </if>

      <script>binaryFiles.append('%s/src/STAF%s-src.zip' % (ftp_path, staf_version))</script>

      <script>failMessage = '[main] Transfer source zip file from extract machine (%s) to ftp server (%s)' % (extractMach, ftp_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        platform_build_output = []
        platform_build_output_files = []
        platform_build_output_files.append([
                                             'STAF%s-src.tar.gz' % (staf_version),
                                             '%s/src/STAF%s-src.tar.gz' % (ftpRoot, staf_version)
                                           ])
        platform_build_output_files.append([
                                             'STAF%s-src.zip' % (staf_version),
                                             '%s/src/STAF%s-src.zip' % (ftpRoot, staf_version)
                                           ])
      </script>

      <script>archiveFile = 'staf-cvsroot-%s.tar.gz' % time.strftime("%Y%m%d")</script>

      <script>
        request = 'QUERY ENTRY %s/backup/%s' % (ftp_path, archiveFile)
      </script>
      <log message="1">'[main] %s FS %s' % (ftp_machine, request)</log>

      <stafcmd name="'Check if the daily archive already exists'">
        <location>ftp_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ftp_machine, request)</log>

      <!-- Only copy the archive if the file does not already exist on
           the ftp machine. -->
      <if expr="RC == 48">
        <sequence>

          <script>
            request = 'COPY FILE %s/STAF%s-src.tar.gz TOFILE %s/backup/%s TOMACHINE %s' % (extractPath, staf_version, ftp_path, archiveFile, ftp_machine)
          </script>
          <log message="1">'[main] %s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Transfer source tar.gz file to ftp server'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>

          <script>binaryFiles.append('%s/backup/%s' % (ftp_path, archiveFile))</script>

          <script>
            platform_build_output_files.append([
                                                 '%s' % (archiveFile),
                                                 '%s/backup/%s' % (ftpRoot, archiveFile)
                                               ])
          </script>

          <script>failMessage = '[main] Transfer %s file from extract machine (%s) to ftp server (%s)' % (archiveFile, extractMach, ftp_machine)</script>
          <call function="'check-stafcmd'"/>

        </sequence>
      </if>
      
      <script>
        # Copy directory '%s/src/staf/test' % (extractPath) from extractMach to
        # directory '%s/test' % (automationDirectory) on the local automation machine
        # as this directory will be used to test STAF on each test machine
        request = 'COPY DIRECTORY %s/src/staf/test TODIRECTORY %s/test TOMACHINE %s' % \
                  (extractPath, automationDirectory, automationMachine)
      </script>

      <log message="1">'[main] %s FS %s' % (extractMach, request)</log>

      <stafcmd name="'Copy test directory'">
        <location>extractMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
      
      <script>
        platform_output = {
                            'platform_name' : 'source',
                            'platform_build_output' : platform_build_output,
                            'platform_build_output_files' : platform_build_output_files,
                            'platform_build_machine' : extractMach,
                            'platform_build_started' : build_started,
                            'platform_build_completed' : time.strftime("%Y%m%d-%H:%M:%S"),
                            'platform_build_status' : 'Pass'
                          }

        build_output.append(platform_output)
      </script>

      <log message="1">'[main] End function ExportSource'</log>

    </sequence>
  </function>
 
  <!-- ================================================================= -->
  <!-- IsWindows - Determines if the specified machine is Windows or     -->
  <!--    Unix.  If Windows, returns 1.  Else if Unix, returns 0.Y       -->
  <!-- ================================================================= -->

  <function name="IsWindows" scope="local">
    <function-single-arg>
       <function-optional-arg name="machine" default="'local'"/>
     </function-single-arg>  
      
    <sequence>
      <script>
        isWindows = 0  # Defaults to Unix if can't resolve the STAF variable
        request = 'RESOLVE STRING {STAF/Config/OS/Name}'
      </script>
      <log message="1">'[%s] %s VAR %s' % (platform, machine, request)</log>

      <stafcmd name="'STAF %s VAR %s' % (machine, request)">
        <location>machine</location>
        <service>'VAR'</service>
        <request>request</request>
      </stafcmd>

      <if expr="RC == 0">
        <script>
          if STAFResult.startswith('Win') == 0:
            isWindows = 1
        </script>
      </if>
      
      <return>isWindows</return>
      
    </sequence>
  </function>  
  
  <!-- ================================================================= -->
  <!-- DeleteEntry - This function deletes a file or directory.          -->
  <!--    It first tries to delete it using a STAF FS DELETE ENTRY       -->
  <!--    request.  If that fails, if the machine is Windows, it retrys  -->
  <!--    using the Windows DEL /F command which can force a delete even -->
  <!--    if a file is in use.  If successful, returns 0.  If fails,     -->
  <!--    returns a non-zero RC.                                        -->
  <!-- ================================================================= -->
  
  <function name="DeleteEntry" scope="local">
    <function-map-args>
      <function-required-arg name="entry"/>
      <function-optional-arg name="machine" default="'local'"/>
      <function-optional-arg name="isDirectory" default="0"/>
      <function-optional-arg name="platform" default="'main'"/>
    </function-map-args>  
      
    <sequence>
      <script>
        request = 'DELETE ENTRY %s CONFIRM' % (STAFUtil.wrapData(entry))
        if isDirectory:
          request = '%s RECURSE' % (request)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform, machine, request)</log>

      <stafcmd name="'STAF %s FS %s' % (machine, request)">
        <location>machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">
        '[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform, RC, STAFResult, machine, request)
      </log>

      <if expr="RC == STAFRetCode.DoesNotExist">
        <return>0</return>
      </if>
      
      <script>failMessage = '[%s] Deleting %s on %s' % (platform, entry, machine)</script>
      
      <!-- If STAF FS DELETE request failed with RC 20 (File Delete Error), the entry may be in use.
           If on Windows, try using the DEL command with the /F and /Q options to delete a file in use. -->
      
      <if expr="RC == STAFRetCode.FileDeleteError">
        <sequence>
        
          <call function="'IsWindows'">machine</call>
          
          <if expr="STAXResult">
            <sequence>
              <!--  Machine is Windows -->
              
              <script>
                saveRC = RC
                saveResult = STAFResult

                if not isDirectory:
                  command = 'DEL /F /Q "%s"' % (entry)
                else:
                  command = 'DEL /F /Q /S "%s"' % (entry)
              </script>
              
              <process name="'%s: %s' % (machine, command)">
                <location>machine</location>
                <command mode="'shell'">command</command>
                <stderr mode="'stdout'"/>
                <returnstdout/>
                <console use="'same'"/>
              </process>
          
              <if expr="RC != 0">
                <sequence>
                  <log message="1">
                    '[%s] RC=%s, STAFResult=%s, STAXResult=%s Location=%s Command=%s' % \
                     (platform, RC, STAFResult, STAXResult, machine, command)
                  </log>  
                  <script>
                    RC = saveRC
                    STAFResult = saveResult
                  </script>
                </sequence>  
              </if>
              
            </sequence>            
          </if> 
        </sequence>  
      </if>
          
      <call function="'check-stafcmd'"/>

      <return>RC</return>
      
    </sequence>
  </function>
  
  <!-- ================================================================= -->
  <!-- TransferSource - This function is responsible for transferring    -->
  <!--                  the source tarball to the appropriate build      -->
  <!--                  machine and untarring at the destination.        -->
  <!-- ================================================================= -->

  <function name="TransferSource">
    <sequence>

      <log message="1">'[%s] Begin function TransferSource' % (platform_name)</log>

      <!-- Delete the build path if requested -->

      <log message="1">"[%s] Transferring source package" % (platform_name)</log>

      <if expr="startClean">
        <sequence>

          <script>
            request = 'DELETE ENTRY %s CHILDREN RECURSE CONFIRM' % (STAFUtil.wrapData(buildPath))
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Delete build path'">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <if expr="RC != STAFRetCode.DoesNotExist">
            <sequence>
              <script>failMessage = '[%s] Deleting build path on build machine (%s)' % (platform_name, build_machine)</script>
              <call function="'check-stafcmd'"/>
            </sequence>
          </if>

          <script>
            request = 'DELETE ENTRY %s CHILDREN RECURSE CONFIRM' % (STAFUtil.wrapData(buildLogPath))
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Delete build log path'">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <if expr="RC != STAFRetCode.DoesNotExist">
            <sequence>
              <script>failMessage = '[%s] Deleting build log path on build machine (%s)' % (platform_name, build_machine)</script>
              <call function="'check-stafcmd'"/>
            </sequence>
          </if>

        </sequence>
      </if>

      <!-- Create directories -->

      <script>
        request = 'CREATE DIRECTORY %s FULLPATH' % (STAFUtil.wrapData(buildPath))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Create build path'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Creating build path on build machine (%s)' % (platform_name, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <if expr="debug">
        <sequence>

          <script>request = 'CREATE DIRECTORY %s FULLPATH' % STAFUtil.wrapData(buildLogPath)</script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Create build log path'">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <script>failMessage = '[%s] Creating build log path on build machine (%s)' % (platform_name, build_machine)</script>
          <call function="'check-stafcmd'"/>

        </sequence>
      </if>

      <!-- Transfer STAF Source code to the build machine -->

      <script>
        #request = 'COPY FILE %s/STAFSource.tar TOFILE %s/STAFSource.tar TOMACHINE %s' % (extractPath, buildPath, build_machine)
        request = 'COPY FILE %s/STAF%s-src.tar.gz TOFILE %s/STAFSource.tar.gz TOMACHINE %s' % (extractPath, staf_version, buildPath, build_machine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, extractMach, request)</log>
      <stafcmd name="'Transfer source package'">
        <location>extractMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>
      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, extractMach, request)</log>
      <script>failMessage = '[%s] Transferring source package.  STAF %s FS %s' % (platform_name, extractMach, request)</script>
      <call function="'check-stafcmd'"/>

      <!-- Gunzip it (creates STAFSource.tar from STAFSource.tar.gz on the build machine) -->
      
      <script>
        if platform_name == 'zos' or platform_name == 'zos64':
          process = "-c 'gzip -d STAFSource.tar.gz'"
        else:
          process = "-c 'gunzip STAFSource.tar.gz'"
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>
      <process name="'Gunzip source package'">
        <location>build_machine</location>
        <command mode="'shell'">bash_shell</command>
        <parms>process</parms>
        <workdir>buildPath</workdir>
        <envs if="platform_name == 'win32' or platform_name == 'win64' or platform_name == 'winamd64'">'Path=%s;{STAF/Env/Path}' % cygwinBinPath</envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>
      <log message="1">'[%s] RC=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAXResult, build_machine, bash_shell, process)</log>
      <script>failMessage = '[%s] Gunzipping source package on build machine (%s), STAFResult: %s, STAXResult: %s' % (platform_name, build_machine, STAFResult, STAXResult)</script>
      <call function="'check-win-bash-process'"/>
      
      <!-- Untar STAFSource.tar on the build machine -->
      
      <script>
        if platform_name == 'zos' or platform_name == 'zos64':
          process = "-c 'pax -o to=IBM-1047,from=ISO8859-1 -r &lt; STAFSource.tar'"
        else:
          process = "-c 'tar xf STAFSource.tar'"
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>
      <process name="'Unpack source package'">
        <location>build_machine</location>
        <command mode="'shell'">bash_shell</command>
        <parms>process</parms>
        <workdir>buildPath</workdir>
        <envs if="platform_name == 'win32' or platform_name == 'win64' or platform_name == 'winamd64'">'Path=%s;{STAF/Env/Path}' % cygwinBinPath</envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>
      <log message="1">'[%s] RC=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAXResult, build_machine, bash_shell, process)</log>
      <script>failMessage = '[%s] Unpacking source package on build machine (%s), STAFResult: %s, STAXResult: %s' % (platform_name, build_machine, STAFResult, STAXResult)</script>
      <call function="'check-win-bash-process'"/>

      <!-- Delete STAFSource.tar file after untarring it to free up space (important on staf5g (HP-UX) which is short on space in /opt) -->
      
      <script>
        request = 'DELETE ENTRY %s CONFIRM' % (STAFUtil.wrapData(buildPath + '/STAFSource.tar'))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Delete STAFSource.tar file'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <if expr="RC != STAFRetCode.DoesNotExist">
        <sequence>
          <script>failMessage = '[%s] Deleting STAFSource.tar file on build machine (%s) to free space' % (platform_name, build_machine)</script>
          <call function="'check-stafcmd'"/>
        </sequence>
      </if>      
      
      <log message="1">'[%s] End function TransferSource' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- BuildIt - This function is responsible for building all the STAF  -->
  <!--           components.                                             -->
  <!-- ================================================================= -->

  <function name="BuildIt">
    <sequence>

      <log message="1">'[%s] Begin function BuildIt' % (platform_name)</log>

      <iterate var="project" in="project_list">
        <sequence>

          <log message="1">
            '[%s] Building STAF component: %s' % (platform_name, project)
          </log>

          <!-- Due to a bug in the AIX compiler, we need to run make twice on AIX -->
          <script>
            if platform_name == 'aix433' and project == 'staf':
              attempts = 3
            else:
              attempts = 1
          </script>

          <script>
            build_arch = ''
            mssdkdir = ''
            cc_type = ''
          
            if platform_name == 'hpux-ia64-32':
              build_arch = 'IA64-32'
            elif platform_name == 'hpux-ia64-64':
              build_arch = 'IA64-64'
            elif platform_name == 'hpux':
              build_arch = 'PA-RISC'
            elif platform_name == 'hpux-parisc64':
              build_arch = 'PA-RISC64'
            elif platform_name == 'aix64':
              build_arch = 'PPC64-64'
            elif platform_name == 'solaris':
              build_arch = 'SPARC'
            elif platform_name == 'solaris-sparc64':
              build_arch = 'SPARC64'
            elif platform_name == 'solaris-x64-64':
              build_arch = 'x64-64'
            elif platform_name == 'macosx-i386':
              build_arch = 'i386'
            elif platform_name == 'macosx-ppc':
              build_arch = 'ppc'
            elif platform_name == 'macosx-universal':
              build_arch = 'universal'
            elif platform_name == 'macosx-ppc64':
              build_arch = 'ppc64'
            elif platform_name == 'zos64':
              build_arch = 'LP64'
            elif platform_name == 'zlinux-32':
              build_arch = 'm31'
            elif platform_name == 'win64':
              mssdkdir = 'C:/MVC-SDK-IA64'
              cc_type = 'MVC-SDK-IA64'
            elif platform_name == 'winamd64':
              mssdkdir = ''
              cc_type = 'MVC8-X64'
            elif platform_name == 'win32':
              mssdkdir = ''
              cc_type = 'MVC6'
          </script>
          
          <script>
            # Check if the project is in the list of projects requiring Java 5.0 or later to determine the java directories to use
            if project in java50ProjectList:
              java_root = java_v50_root
              java_bin_dir = java_v50_bin_dir
              java_include_dir = java_v50_include_dir
            else:
              java_root = java_v12_root
              java_bin_dir = java_v12_bin_dir
              java_include_dir = java_v12_include_dir
            
            # Initialize to an empty string indicating no error
            errorData = ''
          </script>
          
          <if expr="(project in java50ProjectList) or (project == 'java')">
            <sequence>
              <script>
                if java_bin_dir.startswith('/cygdrive/c/') == 0:
                  command = '%s/java -version' % (java_bin_dir.replace('/cygdrive/c', 'C:'))
                else:  
                  command = '%s/java -version' % (java_bin_dir)
              </script>
              <process name="'Getting Java version'">
                <location>build_machine</location>
                <command mode="'shell'">command</command>
                <stderr mode="'stdout'"/>
                <returnstdout/>
              </process>
              <if expr="RC == 0 and STAXResult != None">
                <log message="1">
                  '[%s] Building project "%s" on machine %s using the java executable in %s:\n%s' % \
                  (platform_name, project, build_machine, java_bin_dir, STAXResult[0][1])
                </log>
                <else>
                  <log message="1" level="'warning'">
                    '[%s] Getting the Java version on machine %s failed.\n%s\nRC=%s STAFResult=%s STAXResult=%s' % \
                    (platform_name, build_machine, command, RC, STAFResult, STAXResult)
                  </log>
                </else>
              </if>  
            </sequence>
          </if>

          <loop from="1" to="attempts">
            <sequence>

             <script>
               process = "-c '%s'" % make
               buildOutputFile = '%s/STAF_Build_%s_%s.out' % (buildPath, platform_name, project)
               processRC = 99
               processResult = 'Not available'
               errorData = 'Not available'
               resultMsg = ''
               buildTimeout = '3h'
               buildProcessPassed = 0
             </script>
             <log message="1">'[%s] %s %s %s PROJECTS=%s' % (platform_name, build_machine, bash_shell, process, project)</log>

             <!-- Build may never end if the date/time on the build machine is later than
                  that of the timestamp of any of the source files it is building.
                  So, we have a timer around the build to terminate it if it exceeds 4 hours
                  and we are redirecting stdout/stderr to a file so that it will be accessible
                  even if the process is terminated by the timer popping. -->
                  
             <timer duration="buildTimeout">
               <sequence>
                 <process name="'Building %s' % project">
                   <location>build_machine</location>
                   <command mode="'shell'">bash_shell</command>
                   <parms>process</parms>
                   <workdir>'%s/src/staf' % buildPath</workdir>
                   <envs>
                   [
                     'Path=/cygdrive/c/Perl583/bin%s%s%s{STAF/Env/Path}' % (path_sep, cygwinBinPath, path_sep),
                     'PROJECTS=%s' % project,
                     'BUILD_TYPE=%s' % buildType,
                     'OS_NAME=%s' % build_osname,
                     'VSCOMMONDIR=%s' % vs_common_dir,
                     'MSVCDIR=%s' % ms_vc_dir,
                     'JAVA_BUILD_V11=%s' % java_build_v11,
                     'JAVA_BUILD_V12=%s' % java_build_v12,
                     'JAVA_V12_ROOT=%s' % java_root,
                     'JAVA_V11_ROOT=%s' % java_v11_root,
                     'JAVA_V12_BIN_DIR=%s' % java_bin_dir,
                     'JAVA_V12_INCLUDE_DIR=%s' % java_include_dir,
                     'REXX_ROOT=%s' % rexx_root,
                     'REXX_LIBDIRS=%s' % rexx_libdirs,
                     'RXPP_ROOT=%s' % rxpp_root,
                     'B2H_ROOT=%s' % b2h_root,
                     'JAVA_DEFAULT_VERSION=%s' % java_default_version,
                     'XERCES_ROOT=c:/tools/xerces-2_6_2',
                     'XALAN_ROOT=c:/tools/xalan-j_2_7_0',
                     'JYTHON_ROOT=c:/tools/jython2.5.2',
                     'SAXON_ROOT=%s' % saxon_root,
                     'DOCBOOK_ROOT=%s' % docbook_root,
                     'BUILD_ARCH=%s' % build_arch,
                     'MSSDKDIR=%s' % mssdkdir,
                     'CC_TYPE=%s' % cc_type,
                     'STAF_USE_SSL=%s' % staf_use_ssl,
                     'OPENSSL_ROOT=%s' % openssl_root
                   ]
                   </envs>
                   <stdout>buildOutputFile</stdout>
                   <stderr mode="'stdout'"/>
                   <returnstdout/>
                   <console use="'same'"/>
                 </process>
                 
                 <script>
                   processRC = RC
                   processResult = STAFResult
                 </script>  
               </sequence>  
             </timer>    
             
             <if expr="RC == -1">
               <sequence>
                 <script>
                   resultMsg = 'Could not build project %s on build machine (%s) due to invalid timer duration (%s) for build process.' % (platform_name, project, build_machine, buildTimeout)
                 </script>  
               </sequence>
               <else>
                 <sequence>
                   <script>
                     if RC == 0 and processRC == 0:
                       buildProcessPassed = 1
                       resultMsg = 'Build completed successfully for project %s on build machine %s' % (project, build_machine)
                     elif RC == 0 and processRC != 0:
                       resultMsg = 'Build failed for project %s on build machine %s. RC=%s, Result=%s' % (project, build_machine, processRC, processResult)
                     elif RC != 0:
                       resultMsg = 'Build did not complete within %s for project %s on build machine %s' % (buildTimeout, project, build_machine)
                   </script>
                    
                   <!-- Get the build process's stdout/stderr file -->
                   
                   <script>
                     request = 'GET FILE %s' % (buildOutputFile)
                   </script>
                   
                   <stafcmd name="'Get build process stdout/stderr file'">
                     <location>build_machine</location>
                     <service>'FS'</service>
                     <request>request</request>
                   </stafcmd>
            
                   <if expr="RC != 0">
                     <log message="1">'[%s] Error getting build process stdout/stderr file.  RC=%s, Result=%s, STAF %s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>
                     <else>
                       <sequence>
                         <!-- XXX: Only put build output (which can be large) in errorData if the build failed .-->
                         <script>
                           if buildProcessPassed == 1:
                             errorData = resultMsg
                           else:
                             errorData = STAFResult
                         </script>  
                       </sequence>  
                     </else>                      
                   </if>
                                 
                   <log message="1">'[%s] %s\n\nProcess=%s %s\n\nBuild Stdout/Stderr:\n%s' % (platform_name, resultMsg, bash_shell, process, errorData)</log>
                 </sequence>
               </else>
             </if>  

             <script>
               os_project = project
               project_output = [os_project, errorData]
               platform_build_output.append(project_output)
             </script>
            
             <if expr="buildProcessPassed == 1">
               <break/>
             </if>
             
            </sequence>
          </loop>

          <script>failMessage = '[%s] %s\n\nBuild Stdout/Stderr:\n%s' % (platform_name, resultMsg, errorData)</script>
          
          <if expr="buildProcessPassed != 1">
            <sequence>
              <script>RC = processRC</script>
              <call function="'check-win-bash-process'"/>
            </sequence>
          </if>

        </sequence>
      </iterate>

      <if expr="platform_name == 'solaris'">
        <sequence>

          <script>
            process = "-c 'find . -type f -exec strip ^{} \;'"
          </script>
          <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

          <process name="'Stripping solaris binaries'">
            <location>build_machine</location>
            <command mode="'shell'">bash_shell</command>
            <parms>process</parms>
            <workdir>'%s/rel/%s/staf/%s' % (buildPath, platform_name, buildType)</workdir>
            <env>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

          <script>failMessage = '[%s] Stripping solaris binaries on build machine (%s)' % (platform_name, build_machine)</script>
          <call function="'check-win-bash-process'"/>

        </sequence>
      </if>

       <log message="1">'[%s] End function BuildIt' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- CopyCommonFiles - This function is responsible for copying        -->
  <!--                   common files which are not buildable on all     -->
  <!--                   all platforms                                   -->
  <!-- ================================================================= -->

  <function name="CopyCommonFiles">
    <sequence>

      <log message="1">'[%s] Begin function CopyCommonFiles' % (platform_name)</log>

      <if expr="platform_name == 'win32'">

        <sequence>

          <script>
            tarFileName = '../STAF%s-docs.tar' % (staf_version)
            docsDirectory = '%s/rel/%s/staf/%s/docs/staf' % (buildPath, platform_name, buildType)
            docsTarFile = '%s/rel/%s/staf/%s/docs/STAF%s-docs.tar' % (buildPath, platform_name, buildType, staf_version)
            demoJarFile = '%s/rel/%s/staf/%s/samples/demo/STAFDemo.jar' % (buildPath, platform_name, buildType)
            libDir = '%s/rel/%s/staf/%s/lib' % (buildPath, platform_name, buildType)
          </script>

          <script>
            process = "-c 'tar cf %s *'" % (tarFileName)
          </script>
          <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

          <process name="'Create docs tar file'">
            <location>build_machine</location>
            <command mode="'shell'">bash_shell</command>
            <parms>process</parms>
            <workdir>docsDirectory</workdir>
            <env>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

          <script>failMessage = '[%s] Create docs tar file on build machine (%s): %s/%s' % (platform_name, build_machine, docsDirectory, tarFileName)</script>
          <call function="'check-win-bash-process'"/>

          <script>
            request = 'COPY FILE %s TOFILE %s/docs/STAF%s-docs.tar TOMACHINE %s' % (docsTarFile, ftp_path, staf_version, ftp_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Transfer docs tar file to ftp server'">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <script>failMessage = '[%s] Transferring docs tar file from build machine (%s) to ftp server (%s)' % (platform_name, build_machine, ftp_machine)</script>
          <call function="'check-stafcmd'"/>

          <if expr="copy_to_ga">
            <sequence>
              <script>
                request = 'COPY FILE %s TOFILE %s/%sga-test/STAF%s-docs.tar TOMACHINE %s' % (docsTarFile, ftp_path, staf_version, staf_version, ftp_machine)
              </script>
              <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

              <stafcmd name="'Transfer docs tar file to ftp server GA directory'">
                <location>extractMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
            </sequence>
          </if>

          <script>
            request = 'COPY FILE %s TOFILE %s/demo/STAFDemo.jar TOMACHINE %s' % (demoJarFile, ftp_path, ftp_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Transfer STAFDemo jar file to ftp server'">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <script>failMessage = '[%s] Transferring STAFDemo jar file from build machine (%s) to ftp server (%s)' % (platform_name, build_machine, ftp_machine)</script>
          <call function="'check-stafcmd'"/>

          <log message="1">'[%s] Copying service Jar files' % (platform_name)</log>

          <iterate var="jarFile" in="serviceJarFiles">
            <sequence>

              <script>
                request = 'COPY FILE %s/%s TOFILE %s/services/%s TOMACHINE %s' % (libDir, jarFile, ftp_path, jarFile, ftp_machine)
              </script>
              <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

              <stafcmd name="'Transfer %s to ftp server' % jarFile">
                <location>build_machine</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

              <script>failMessage = '[%s] Transferring %s file from %s to ftp server' % (platform_name, jarFile, build_machine)</script>
              <call function="'check-stafcmd'"/>

              <script>binaryFiles.append('%s/services/%s' % (ftp_path, jarFile))</script>
            </sequence>
          </iterate>

        </sequence>
      </if>

      <if expr="platform_name == 'linux' or platform_name == 'aix' or platform_name == 'aix64' or platform_name == 'aix433' or platform_name == 'solaris' or platform_name == 'solaris-x86' or platform_name == 'solaris-x64' or platform_name == 'solaris-x64-64' or platform_name == 'solaris-sparc64'">
        <sequence>

          <script>
            request = 'COPY FILE %s/demo/STAFDemo.jar TOFILE %s/rel/%s/staf/%s/samples/demo/STAFDemo.jar TOMACHINE %s' % (ftp_path, buildPath, build_osname, buildType, build_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, ftp_machine, request)</log>

          <stafcmd name="'Transfer STAFDemo jar file to build machine'">
            <location>ftp_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ftp_machine, request)</log>

          <script>failMessage = '[%s] Transferring STAFDemo jar file from ftp machine (%s) to build machine (%s)' % (platform_name, ftp_machine, build_machine)</script>
          <call function="'check-stafcmd'"/>

        </sequence>
      </if>

      <if expr="platform_name == 'solaris' or platform_name == 'solaris-x86' or platform_name == 'solaris-x64' or platform_name == 'solaris-x64-64' or platform_name == 'solaris-sparc64' or platform_name == 'hpux' or platform_name == 'hpux-parisc64' or platform_name == 'aix' or platform_name == 'aix64' or platform_name == 'linux-ppc64-32' or platform_name == 'linux-ppc64-64' or platform_name == 'linux-amd64' or platform_name == 'hpux-ia64-32' or platform_name == 'hpux-ia64-64' or platform_name == 'win64' or platform_name == 'winamd64' or platform_name == 'zlinux-32' or platform_name == 'zlinux-64' or platform_name == 'freebsd' or platform_name == 'macosx-i386' or platform_name == 'macosx-ppc' or platform_name == 'macosx-universal' or platform_name == 'zos' or platform_name == 'zos64'">
        <sequence>

          <script>
            process = "-c 'mkdir docs'"            
          </script>
          <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

          <process name="'Create docs directory'">
            <location>build_machine</location>
            <command mode="'shell'">bash_shell</command>
            <parms>process</parms>
            <workdir>'%s/rel/%s/staf/%s/' % (buildPath, build_osname, buildType)</workdir>
            <env>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

          <!-- Don't check for an error as the docs directory may already exist on hpux from building the java project which creates docs/STAFJava.htm-->

          <script>
            request = 'COPY FILE %s/docs/STAF%s-docs.tar TOFILE %s/rel/%s/staf/%s/docs/STAF%s-docs.tar TOMACHINE %s' % (ftp_path, staf_version, buildPath, build_osname, buildType, staf_version, build_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, ftp_machine, request)</log>

          <stafcmd name="'Transfer docs tar file to build machine'">
            <location>ftp_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ftp_machine, request)</log>

          <script>failMessage = '[%s] Transferring docs tar file from ftp machine (%s) to build machine (%s)' % (platform_name, ftp_machine, build_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>
            if platform_name == 'zos' or platform_name == 'zos64':
              process = "-c 'pax -o to=IBM-1047,from=ISO8859-1 -r &lt; STAF%s-docs.tar'" % (staf_version)
            else:
              process = "-c 'tar xf STAF%s-docs.tar'" % (staf_version)
          </script>
          <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

          <process name="'Untar docs tar file'">
            <location>build_machine</location>
            <command mode="'shell'">bash_shell</command>
            <parms>process</parms>
            <workdir>'%s/rel/%s/staf/%s/docs' % (buildPath, build_osname, buildType)</workdir>
            <env>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

          <script>failMessage = '[%s] Untar docs tar file on build machine (%s)' % (platform_name, build_machine)</script>
          <call function="'check-win-bash-process'"/>

        </sequence>
      </if>

      <log message="1">'[%s] End function CopyCommonFiles' % (platform_name)</log>

    </sequence>
  </function>


  <!-- ================================================================= -->
  <!-- BuildWin64-CodepageFiles- This function is responsible for        -->
  <!--                   building the codepage files for the Win64       -->
  <!--                   platform                                        -->
  <!-- ================================================================= -->

  <function name="BuildWin64-CodepageFiles">
    <sequence>

      <log message="1">'[%s] Begin function BuildWin64-CodepageFiles' % (platform_name)</log>
      
      <script>
        win32CodepageSrcDir = 'C:/dev/autobuild/build/src/staf/codepage'
        win32CodepageRelDir = 'C:/dev/autobuild/build/rel/win32/staf/%s/codepage' % (buildType)
        
        win64Machine = 'staf4c'
        win64CodepageDir = 'C:/dev/autobuild/codepage'
        
        request = 'COPY DIRECTORY %s EXT ucm TOMACHINE %s TODIRECTORY %s' % \
                  (STAFUtil.wrapData(win32CodepageSrcDir), win64Machine, STAFUtil.wrapData(win64CodepageDir))
      </script>
      
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Transfer codepage .ucm files from Win32 build machine to Win64 machine'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Transfer codepage .ucm files from Win32 build machine (%s) to Win64 machine (%s)' % (platform_name, build_machine, win64Machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        process = 'for %f in (*.ucm) do ucm2bin %f'
      </script>
      <log message="1">'[%s] %s %s' % (platform_name, win64Machine, process)</log>

      <process name="'Run ucm2bin on Win64 machine'">
        <location>win64Machine</location>
        <command mode="'shell'">process</command>
        <workdir>win64CodepageDir</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % (win64CodepageDir)</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s' % (platform_name, RC, STAFResult, STAXResult, win64Machine, process)</log>

      <script>failMessage = '[%s] Run ucm2bin on Win64 machine (%s)' % (platform_name, win64Machine)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        request = 'COPY DIRECTORY %s EXT bin TOMACHINE %s TODIRECTORY %s' % \
                  (STAFUtil.wrapData(win64CodepageDir), build_machine, STAFUtil.wrapData(win32CodepageRelDir))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, win64Machine, request)</log>

      <stafcmd name="'Transfer codepage .bin files from Win64 machine to Win32 build machine'">
        <location>win64Machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, win64Machine, request)</log>

      <script>failMessage = '[%s] Transfer codepage .bin files from Win64 machine (%s) to Win32 build machine (%s)' % (platform_name, win64Machine, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <log message="1">'[%s] End function BuildWin64-CodepageFiles' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- BuildWinAMD64-CodepageFiles- This function is responsible for     -->
  <!--                   building the codepage files for the WinAMD64    -->
  <!--                   platform                                        -->
  <!-- ================================================================= -->

  <function name="BuildWinAMD64-CodepageFiles">
    <sequence>
      
      <log message="1">'[%s] Begin function BuildWinAMD64-CodepageFiles' % (platform_name)</log>
      
      <script>
        win32CodepageSrcDir = 'C:/dev/autobuild/build/src/staf/codepage'
        win32CodepageRelDir = 'C:/dev/autobuild/build/rel/win32/staf/%s/codepage' % (buildType)
        
        winamd64Machine = 'staf4a'
        winamd64CodepageDir = 'C:/dev/autobuild/codepage'
        
        request = 'COPY DIRECTORY %s EXT ucm TOMACHINE %s TODIRECTORY %s' % \
                  (STAFUtil.wrapData(win32CodepageSrcDir), winamd64Machine, STAFUtil.wrapData(winamd64CodepageDir))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Copy codepage .ucm files from Win32 build machine to WinAMD64 machine'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Transfer codepage .ucm files from Win32 build machine (%s) to WinAMD64 machine (%s)' % (platform_name, build_machine, winamd64Machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        process = 'for %f in (*.ucm) do ucm2bin %f'
      </script>
      <log message="1">'[%s] %s %s' % (platform_name, winamd64Machine, process)</log>

      <process name="'Run ucm2bin on WinA64 machine'">
        <location>winamd64Machine</location>
        <command mode="'shell'">process</command>
        <workdir>winamd64CodepageDir</workdir>
        <env>'Path=%s;{STAF/Env/Path}' % (winamd64CodepageDir)</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s' % (platform_name, RC, STAFResult, STAXResult, winamd64Machine, process)</log>

      <script>failMessage = '[%s] Run ucm2bin on WinAMD64 machine (%s)' % (platform_name, winamd64Machine)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        request = 'COPY DIRECTORY %s EXT bin TOMACHINE %s TODIRECTORY %s' % \
                  (STAFUtil.wrapData(winamd64CodepageDir), build_machine, STAFUtil.wrapData(win32CodepageRelDir))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, winamd64Machine, request)</log>

      <stafcmd name="'Transfer codepage .bin files from WinAMD64 machine to Win32 build machine'">
        <location>winamd64Machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, winamd64Machine, request)</log>

      <script>failMessage = '[%s] Transfer codepage .bin files from WinAMD64 machine (%s) to Win32 build machine (%s)' % (platform_name, winamd64Machine, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <log message="1">'[%s] End function BuildWinAMD64-CodepageFiles' % (platform_name)</log>

    </sequence>
  </function>


  <!-- ================================================================= -->
  <!-- BuildIPv6 - This function is responsible for building the IPv6    -->
  <!--             support                                               -->
  <!-- ================================================================= -->

  <function name="BuildIPv6">
    <sequence>

      <log message="1">'[%s] Begin function BuildIPv6' % (platform_name)</log>

      <!-- First do the aix433 processing.  We don't build IPv6 for aix433,
           but we do need to copy the files to the IPv4 directory -->

      <if expr="platform_name == 'aix433'">
        <sequence>

          <script>
            objDir = '/opt/dev/autobuild/build/obj/aix433/staf/%s' % (buildType)
            relDir = '/opt/dev/autobuild/build/rel/aix433/staf/%s' % (buildType)
            STAFlib = 'libSTAF.so'
            STAFTCPlib = 'libSTAFTCP.so'
          </script>

          <script>
            request = 'CREATE DIRECTORY %s/lib/IPv4' % (relDir)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Create IPv4 directory'">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <script>failMessage = '[%s] Create IPv4 directory on %s' % (platform_name, build_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'COPY FILE %s/lib/%s TOFILE %s/lib/IPv4/%s TOMACHINE %s' % (relDir, STAFlib, relDir, STAFlib, build_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Copy IPv4 %s file' % STAFlib">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <script>failMessage = '[%s] Copy IPv4 %s file on build machine (%s) ' % (platform_name, STAFlib, build_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'COPY FILE %s/lib/%s TOFILE %s/lib/IPv4/%s TOMACHINE %s' % (relDir, STAFTCPlib, relDir, STAFTCPlib, build_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

          <stafcmd name="'Copy IPv4 %s file' % STAFTCPlib">
            <location>build_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

          <script>failMessage = '[%s] Copy IPv4 %s file on build machine (%s)' % (platform_name, STAFTCPlib, build_machine)</script>
          <call function="'check-stafcmd'"/>

          <return/>

        </sequence>
      </if>

      <if expr="platform_name == 'win32'">
        <script>
                objDir = 'c:/dev/autobuild/build/obj/win32/staf/%s' % (buildType)
                relDir = 'c:/dev/autobuild/build/rel/win32/staf/%s' % (buildType)
                STAFlib = 'STAF.dll'
                STAFTCPlib = 'STAFTCP.dll'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.obj' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.obj' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'MSVCDIR=%s' % ms_vc_dir,
                    'OS_NAME=%s' % build_osname,
                    'MSSDKDIR=C:/MVC-SDK-IA64',
                    'STAF_USE_IPV6=1',
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'CC_TYPE=MVC6'
                ]
          </script>
        <elseif expr="platform_name == 'win64'">
          <script>
                objDir = 'c:/dev/autobuild/build/obj/win32/staf/%s' % (buildType)
                relDir = 'c:/dev/autobuild/build/rel/win32/staf/%s' % (buildType)
                STAFlib = 'STAF.dll'
                STAFTCPlib = 'STAFTCP.dll'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.obj' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.obj' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'MSVCDIR=%s' % ms_vc_dir,
                    'BUILD_ARCH=%s' % build_arch,
                    'MSSDKDIR=C:/MVC-SDK-IA64',
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1',
                    'CC_TYPE=MVC-SDK-IA64'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'winamd64'">
          <script>
                objDir = 'c:/dev/autobuild/build/obj/win32/staf/%s' % (buildType)
                relDir = 'c:/dev/autobuild/build/rel/win32/staf/%s' % (buildType)
                STAFlib = 'STAF.dll'
                STAFTCPlib = 'STAFTCP.dll'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.obj' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.obj' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'MSVCDIR=%s' % ms_vc_dir,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1',
                    'CC_TYPE=MVC8-X64'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'linux'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/linux/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/linux/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'linux-amd64'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/linuxamd64/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/linuxamd64/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'linux-ppc64-32'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/linux-ppc64-32/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/linux-ppc64-32/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'linux-ppc64-64'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/linux-ppc64-64/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/linux-ppc64-64/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'hpux' or platform_name == 'hpux-parisc64'">
          <script>
                objDir = '/var/dev/autobuild/build/obj/hpux/staf/%s' % (buildType)
                relDir = '/var/dev/autobuild/build/rel/hpux/staf/%s' % (buildType)
                STAFlib = 'libSTAF.sl'
                STAFTCPlib = 'libSTAFTCP.sl'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'hpux-ia64-32' or platform_name == 'hpux-ia64-64'">
          <script>
                objDir = '/usr/dev/autobuild/build/obj/hpux/staf/%s' % (buildType)
                relDir = '/usr/dev/autobuild/build/rel/hpux/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'
                ]
            </script>
          </elseif>
          <elseif expr="platform_name == 'solaris'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/solaris/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/solaris/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'                    
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'solaris-x86'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/solaris/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/solaris/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'solaris-x64'">
          <script>
                objDir = '%s/dev/autobuild/build/obj/solaris/staf/%s' % (build_root, buildType)
                relDir = '%s/dev/autobuild/build/rel/solaris/staf/%s' % (build_root, buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'solaris-sparc64'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/solaris/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/solaris/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'solaris-x64-64'">
          <script>
                objDir = '%s/dev/autobuild/build/obj/solaris/staf/%s' % (build_root, buildType)
                relDir = '%s/dev/autobuild/build/rel/solaris/staf/%s' % (build_root, buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'aix'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/aix/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/aix/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="platform_name == 'aix64'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/aix64/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/aix64/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="build_osname == 'zlinux'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/zlinux/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/zlinux/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'BUILD_ARCH=%s' % build_arch,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="build_osname == 'freebsd'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/freebsd/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/freebsd/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="build_osname == 'macosx'">
          <script>
                objDir = '/opt/dev/autobuild/build/obj/macosx/staf/%s' % (buildType)
                relDir = '/opt/dev/autobuild/build/rel/macosx/staf/%s' % (buildType)
                STAFlib = 'libSTAF.dylib'
                STAFTCPlib = 'libSTAFTCP.dylib'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <elseif expr="build_osname == 'zos'">
          <script>
                objDir = '/u/rankinc/dev/autobuild/build/obj/zos/staf/%s' % (buildType)
                relDir = '/u/rankinc/dev/autobuild/build/rel/zos/staf/%s' % (buildType)
                STAFlib = 'libSTAF.so'
                STAFTCPlib = 'libSTAFTCP.so'
                RebuildFiles = [
                    '%s/connproviders/tcp/STAFTCPConnProvider.d' % objDir,
                    '%s/connproviders/tcp/STAFTCPConnProvider.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFTCPlib),
                    '%s/stafif/STAFSocket.d' % objDir,
                    '%s/stafif/STAFSocket.o' % objDir,
                    '%s/lib/%s' % (relDir, STAFlib)
                   ]
                ipv6BuildMachine = build_machine
                envs = [
                    'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
                    'BUILD_TYPE=%s' % buildType,
                    'OS_NAME=%s' % build_osname,
                    'BUILD_ARCH=%s' % build_arch,
                    'STAF_USE_SSL=%s' % staf_use_ssl,
                    #'OPENSSL_ROOT=%s' % openssl_root,                    
                    'STAF_USE_IPV6=1'
                ]
          </script>
        </elseif>
        <else>
          <sequence>
            <log message="1">'[%s] Unknown IPv6 platform_name' % (platform_name)</log>
            <return/>
          </sequence>
        </else>
      </if>

      <script>
        request = 'CREATE DIRECTORY %s/lib/IPv4' % (relDir)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Create IPv4 directory'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Create IPv4 directory on build machine (%s)' % (platform_name, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        request = 'CREATE DIRECTORY %s/lib/IPv6' % (relDir)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Create IPv6 directory'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Create IPv6 directory on build machine (%s)' % (platform_name, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        request = 'COPY FILE %s/lib/%s TOFILE %s/lib/IPv4/%s TOMACHINE local' % (relDir, STAFlib, relDir, STAFlib)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Copy IPv4 %s file' % STAFlib">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Copy IPv4 %s file on build machine (%s)' % (platform_name, STAFlib, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        request = 'COPY FILE %s/lib/%s TOFILE %s/lib/IPv4/%s TOMACHINE local' % (relDir, STAFTCPlib, relDir, STAFTCPlib)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Copy IPv4 %s file' % STAFTCPlib">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Copy IPv4 %s file on build_machine (%s)' % (platform_name, STAFTCPlib, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <iterate var="RebuildFile" in="RebuildFiles">
        <call function="'DeleteEntry'">
          {'entry': RebuildFile, 'machine': build_machine, 'isDirectory': 0, 'platform': platform_name}
        </call>
      </iterate>

      <if expr="ipv6BuildMachine == build_machine">
        <sequence>

          <script>process = "-c '%s'" % make</script>
          <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

          <process name="'Build IPv6 Files'">
            <location>build_machine</location>
            <command>bash_shell</command>
            <parms>process</parms>
            <workdir>'%s/src/staf' % buildPath</workdir>
            <envs>envs</envs>
            <stderr mode="'stdout'"/>
            <returnstdout/>
            <console use="'same'"/>
          </process>

          <script>
            if STAXResult != None:
              errorData = STAXResult[0][1]
            else:
              errorData = STAFResult
          </script>
          
          <log message="1">'[%s] RC=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, errorData, build_machine, bash_shell, process)</log>

          <script>failMessage = '[%s] Build IPv6 Files on build machine (%s)\n\n%s' % (platform_name, build_machine, errorData)</script>
          <call function="'check-win-bash-process'"/>

        </sequence>
        <else>
          <call function="'BuildRemoteIPv6'"/>
        </else>
      </if>

      <script>
        request = 'COPY FILE %s/lib/%s TOFILE %s/lib/IPv6/%s TOMACHINE %s' % (relDir, STAFlib, relDir, STAFlib, build_machine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

      <stafcmd name="'Copy IPv6 %s file' % STAFlib">
        <location>ipv6BuildMachine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ipv6BuildMachine, request)</log>

      <script>failMessage = '[%s] Copy IPv6 %s file from IPv6 build machine (%s) to build machine (%s)' % (platform_name, STAFlib, ipv6BuildMachine, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        request = 'COPY FILE %s/lib/%s TOFILE %s/lib/IPv6/%s TOMACHINE %s' % (relDir, STAFTCPlib, relDir, STAFTCPlib, build_machine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

      <stafcmd name="'Copy IPv6 %s file' % STAFTCPlib">
        <location>ipv6BuildMachine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ipv6BuildMachine, request)</log>

      <script>failMessage = '[%s] Copy IPv6 %s file from IPv6 build machine (%s) to build machine (%s)' % (platform_name, STAFTCPlib, ipv6BuildMachine, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        request = 'COPY FILE %s/lib/IPv4/%s TOFILE %s/lib/%s TOMACHINE local' % (relDir, STAFlib, relDir, STAFlib)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

      <stafcmd name="'Copy IPv4 %s file back to lib directory' % STAFlib">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Copy IPv4 %s file back to lib directory on build machine (%s)' % (platform_name, STAFlib, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <script>
        request = 'COPY FILE %s/lib/IPv4/%s TOFILE %s/lib/%s TOMACHINE local' % (relDir, STAFTCPlib, relDir, STAFTCPlib)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

      <stafcmd name="'Copy IPv4 %s file back to bin directory' % STAFTCPlib">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Copy IPv4 %s file back to bin directory on build machine (%s)' % (platform_name, STAFTCPlib, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <log message="1">'[%s] End function BuildIPv6' % (platform_name)</log>

    </sequence>
  </function>


  <!-- ================================================================= -->
  <!-- BuildRemoteIPv6 - This function is responsible for building the   -->
  <!--             remote IPv6support                                    -->
  <!-- ================================================================= -->

  <function name="BuildRemoteIPv6">
    <sequence>

      <log message="1">'[%s] Begin function BuildRemoteIPv6' % (platform_name)</log>

      <!-- Delete the build path if requested -->

      <if expr="startClean">
        <sequence>

          <script>
            request = 'DELETE ENTRY %s CHILDREN RECURSE CONFIRM' % (STAFUtil.wrapData(buildPath))
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

          <stafcmd name="'Delete build path'">
            <location>ipv6BuildMachine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ipv6BuildMachine, request)</log>

          <if expr="RC != STAFRetCode.DoesNotExist">
            <sequence>
              <script>failMessage = '[%s] Deleting build path on IPv6 build machine (%s)' % (platform_name, ipv6BuildMachine)</script>
              <call function="'check-stafcmd'"/>
            </sequence>
          </if>

          <script>
            request = 'DELETE ENTRY %s CHILDREN RECURSE CONFIRM' % (STAFUtil.wrapData(buildLogPath))
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

          <stafcmd name="'Delete build log path'">
            <location>ipv6BuildMachine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ipv6BuildMachine, request)</log>

          <if expr="RC != STAFRetCode.DoesNotExist">
            <sequence>
              <script>failMessage = '[%s] Deleting build log path on IPv6 build machine (%s)' % (platform_name, ipv6BuildMachine)</script>
              <call function="'check-stafcmd'"/>
            </sequence>
          </if>

        </sequence>
      </if>

      <!-- Create directories -->

      <script>
        request = 'CREATE DIRECTORY %s FULLPATH' % (STAFUtil.wrapData(buildPath))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

      <stafcmd name="'Create build path'">
        <location>ipv6BuildMachine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ipv6BuildMachine, request)</log>

      <script>failMessage = '[%s] Creating build path on IPv6 build machine' % (platform_name, build_machine)</script>
      <call function="'check-stafcmd'"/>

      <!-- Transfer it -->

      <script>
        request = 'COPY FILE %s/STAFSource.tar TOFILE %s/STAFSource.tar TOMACHINE %s' % (extractPath, buildPath, ipv6BuildMachine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, extractMach, request)</log>

      <stafcmd name="'Transfer source package'">
        <location>extractMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, extractMach, request)</log>

      <script>failMessage = '[%s] Transferring source package to IPv6 machine: STAF %s FS %s' % (platform_name, extractMach, request)</script>
      <call function="'check-stafcmd'"/>

      <!-- Untar it -->

      <script>
        process = "-c 'tar xf STAFSource.tar'"
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, ipv6BuildMachine, bash_shell, process)</log>

      <process name="'Unpack source package'">
        <location>ipv6BuildMachine</location>
        <command mode="'shell'">bash_shell</command>
        <parms>process</parms>
        <workdir>buildPath</workdir>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, ipv6BuildMachine, bash_shell, process)</log>

      <script>failMessage = '[%s] Unpacking source package on IPv6 machine (%s)' % (platform_name, ipv6BuildMachine)</script>
      <call function="'check-win-bash-process'"/>

      <!-- Delete STAFSource.tar file after untarring it to free up space (important on staf5g (HP-UX) which is short on space in /opt) -->
      
      <script>
        request = 'DELETE ENTRY %s CONFIRM' % (STAFUtil.wrapData(buildPath + '/STAFSource.tar'))
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ipv6BuildMachine, request)</log>

      <stafcmd name="'Delete STAFSource.tar file'">
        <location>ipv6BuildMachine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ipv6BuildMachine, request)</log>
      
      <!-- Build the IPv6 Files -->
      
      <script>
        process = "-c '%s'" % make
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, ipv6BuildMachine, bash_shell, process)</log>

      <process name="'Build IPv6 Files'">
        <location>ipv6BuildMachine</location>
        <command>bash_shell</command>
        <parms>process</parms>
        <workdir>'%s/src/staf' % buildPath</workdir>
        <envs>envs</envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
        <console use="'same'"/>
      </process>

      <script>
        if STAXResult != None:
          errorData = STAXResult[0][1]
        else:
          errorData = STAFResult
      </script>
      
      <log message="1">'[%s] RC=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, errorData, ipv6BuildMachine, bash_shell, process)</log>

      <script>failMessage = '[%s] Build IPv6 Files on %s\n\n%s' % (platform_name, ipv6BuildMachine, errorData)</script>
      <call function="'check-win-bash-process'"/>

      <if expr="platform_name == 'solaris'">
        <sequence>

          <script>
            process = "-c 'find . -type f -exec strip ^{} \;'"
          </script>
          <log message="1">'[%s] %s %s %s' % (platform_name, ipv6BuildMachine, bash_shell, process)</log>

          <process name="'Stripping solaris binaries'">
            <location>ipv6BuildMachine</location>
            <command mode="'shell'">bash_shell</command>
            <parms>process</parms>
            <workdir>'%s/rel/%s/staf/%s' % (buildPath, platform_name, buildType)</workdir>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, ipv6BuildMachine, bash_shell, process)</log>

          <script>failMessage = '[%s] Stripping solaris binaries on IPv6 build machine (%s)' % (platform_name, ipv6BuildMachine)</script>
          <call function="'check-win-bash-process'"/>

        </sequence>
      </if>

      <log message="1">'[%s] End function BuildRemoteIPv6' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- PackageIt - This function is responsible for packaging the build  -->
  <!--             so that the installer can be created.                 -->
  <!-- ================================================================= -->

  <function name="PackageIt">
    <sequence>

      <log message="1">'[%s] Begin function PackageIt' % (platform_name)</log>

      <if expr="len(os_lib_files) > 0">
        <iterate var="libFile" in="os_lib_files">
          <sequence>

            <script>
              request = 'COPY FILE %s%s TOFILE %s/rel/%s/staf/%s/lib/%s TOMACHINE %s' % (os_lib_dir, libFile, buildPath, build_osname, buildType, libFile, build_machine)
            </script>
            <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

            <stafcmd name="'Copy OS Library File'">
              <location>build_machine</location>
              <service>'FS'</service>
              <request>request</request>
            </stafcmd>

            <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

            <script>failMessage = '[%s] Copy OS Library File on build machine (%s)' % (platform_name, build_machine)</script>
            <call function="'check-stafcmd'"/>

          </sequence>
        </iterate>
      </if>

      <script>
        if platform_name == 'hpux-ia64-32':
          build_arch = 'IA64-32'
        elif platform_name == 'hpux-ia64-64':
          build_arch = 'IA64-64'
        elif platform_name == 'hpux':
          build_arch = 'PA-RISC'
        elif platform_name == 'hpux-parisc64':
          build_arch = 'PA-RISC64'
        elif platform_name == 'solaris':
          build_arch = 'SPARC'
        elif platform_name == 'solaris-sparc64':
          build_arch = 'SPARC64'
        elif platform_name == 'solaris-x64-64':
          build_arch = 'x64-64'
        elif platform_name == 'macosx-i386':
          build_arch = 'i386'
        elif platform_name == 'macosx-ppc':
          build_arch = 'ppc'
        elif platform_name == 'macosx-universal':
          build_arch = 'universal'
        elif platform_name == 'macosx-ppc64':
          build_arch = 'ppc64'
        elif platform_name == 'zos64':
          build_arch = 'LP64'
        elif platform_name == 'zlinux-32':
          build_arch = 'm31'
        else:
          build_arch = ''

        process = "-c '%s'" % make
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

      <process name="'Package build'">
        <location>build_machine</location>
        <command>bash_shell</command>
        <parms>process</parms>
        <workdir>'%s/src/staf' % buildPath</workdir>
        <envs>
          [
            'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep),
            'PROJECTS=pkg',
            'BUILD_TYPE=%s' % buildType,
            'OS_NAME=%s' % build_osname,
            'VSCOMMONDIR=%s' % vs_common_dir,
            'MSVCDIR=%s' % ms_vc_dir,
            'BUILD_ARCH=%s' % build_arch,
            'MSSDKDIR=%s' % mssdkdir,
            'STAF_USE_IPV6=1',
            'CC_TYPE=%s' % cc_type,
            'STAF_USE_SSL=%s' % staf_use_ssl
          ]
        </envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
        <console use="'same'"/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

      <script>failMessage = '[%s] Packaging build on %s\n\n%s' % (platform_name, build_machine, STAXResult)</script>
      <call function="'check-win-bash-process'"/>

      <log message="1">'[%s] End function PackageIt' % (platform_name)</log>

    </sequence>
  </function>


  <!-- ================================================================= -->
  <!-- CreateInstallProperties - This function is responsible for        -->
  <!--     creating the install.properties file.  It creates the         -->
  <!--     file locally and copies it to the build machine.              -->
  <!-- ================================================================= -->

  <function name="CreateInstallProperties">
    <sequence>

      <log message="1">'[%s] Begin function CreateInstallProperties' % (platform_name)</log>

      <stafcmd name="'Getting local STAF temp dir'">
        <location>'local'</location>
        <service>'VAR'</service>
        <request>'RESOLVE STRING {STAF/DataDir}'</request>
      </stafcmd>

      <script>
        stafTempDir = STAFResult

        tmpIPFileName = '%s/tmp/%s-install.properties' % (stafTempDir, platform_name)

        # Open the file in write ('w') and text('t') mode.
        # Text mode means the appropriate line-endings with be set by Python.
        IPFile = open(tmpIPFileName, 'wt')

        IPFile.writelines(
          [
            'version=%s\n' % (staf_long_version),
            'platform=%s%s\n' % (platform_name, ismp_suffix),
            'architecture=%s\n' % (platform['architecture']),
            'installer=STAFInst\n',
            'file=STAF%s-%s%s.tar\n' % (staf_version, platform_name, ismp_suffix),
            'osname=%s\n' % (platform['osname']),
            'osversion=%s\n' % (platform['osversion']),
            'osarch=%s\n' % (platform['osarch'])
          ])

        IPFile.close()

        request = 'COPY FILE %s/tmp/%s-install.properties TOFILE %s/rel/%s/staf/%s/install.properties TOMACHINE %s TEXT' % (stafTempDir, platform_name, buildPath, build_osname, buildType, build_machine)
      </script>

      <stafcmd name="'Copy install.properties file'">
        <location>'local'</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=local FS %s' % (platform_name, RC, STAFResult, request)</log>

      <log message="1">'[%s] End function CreateInstallProperties' % (platform_name)</log>

    </sequence>
  </function>


  <!-- ================================================================= -->
  <!-- CreateTarGZ - This function is responsible for creating the       -->
  <!--              files on Unix platforms                              -->
  <!-- ================================================================= -->

  <function name="CreateTarGZ">
    <sequence>

      <log message="1">'[%s] Begin function CreateTarGZ' % (platform_name)</log>

      <script>
        process = "-c 'cp stafpkg_%s.tar STAF%s-%s%s.tar'" % (build_osname, staf_version, platform_name, ismp_suffix)
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

      <process name="'Copy tar file'">
        <location>build_machine</location>
        <command mode="'shell'">bash_shell</command>
        <parms>process</parms>
        <workdir>'%s/pkg/%s/staf/%s' % (buildPath, build_osname, buildType)</workdir>
        <env>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

      <script>failMessage = '[%s] Renaming tar file on build machine (%s)' % (platform_name, build_machine)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        if platform_name == 'zos' or platform_name == 'zos64':
          process = "-c 'compress STAF%s-%s%s.tar'" % (staf_version, platform_name, ismp_suffix)
        else:
          process = "-c 'gzip STAF%s-%s%s.tar'" % (staf_version, platform_name, ismp_suffix)                  
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, build_machine, bash_shell, process)</log>

      <process name="'Gzip/compress file'">
        <location>build_machine</location>
        <command mode="'shell'">bash_shell</command>
        <parms>process</parms>
        <workdir>'%s/pkg/%s/staf/%s' % (buildPath, build_osname, buildType)</workdir>
        <env>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</env>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, build_machine, bash_shell, process)</log>

      <script>failMessage = '[%s] Gzip file on build machine (%s)' % (platform_name, build_machine)</script>
      <call function="'check-win-bash-process'"/>

      <script>
        if platform_name == 'zos' or platform_name == 'zos64':
          request = 'COPY FILE %s/pkg/%s/staf/%s/STAF%s-%s%s.tar.Z TOFILE %s/%s/STAF%s-%s%s.tar.Z TOMACHINE %s' % (buildPath, build_osname, buildType, staf_version, platform_name, ismp_suffix, ftp_path, platform_name, staf_version, platform_name, ismp_suffix, ftp_machine)
        else:
          request = 'COPY FILE %s/pkg/%s/staf/%s/STAF%s-%s%s.tar.gz TOFILE %s/%s/STAF%s-%s%s.tar.gz TOMACHINE %s' % (buildPath, build_osname, buildType, staf_version, platform_name, ismp_suffix, ftp_path, platform_name, staf_version, platform_name, ismp_suffix, ftp_machine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Transfer tar.gz File'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Transferring tar.gz file from build machine (%s) to ftp machine (%s)' % (platform_name, build_machine, ftp_machine)</script>
      <call function="'check-stafcmd'"/>

      <if expr="copy_to_ga">
        <sequence>
          <script>
            if platform_name == 'zos' or platform_name == 'zos64':
              request = 'COPY FILE %s/pkg/%s/staf/%s/STAF%s-%s%s.tar.Z TOFILE %s/%sga-test/STAF%s-%s%s.tar.Z TOMACHINE %s' % (buildPath, build_osname, buildType, staf_version, platform_name, ismp_suffix, ftp_path, staf_version, staf_version, platform_name, ismp_suffix, ftp_machine)
            else:
              request = 'COPY FILE %s/pkg/%s/staf/%s/STAF%s-%s%s.tar.gz TOFILE %s/%sga-test/STAF%s-%s%s.tar.gz TOMACHINE %s' % (buildPath, build_osname, buildType, staf_version, platform_name, ismp_suffix, ftp_path, staf_version, staf_version, platform_name, ismp_suffix, ftp_machine)
          </script>
          <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Transfer tar.gz File to ftp server GA directory'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
        </sequence>
      </if>

      <script>binaryFiles.append('%s/%s/STAF%s-%s%s.tar.gz' % (ftp_path, platform_name, staf_version, platform_name, ismp_suffix))</script>

      <script>
        if platform_name == 'zos' or platform_name == 'zos64':
          platform_build_output_files.append([
                                               'STAF%s-%s%s.tar.Z' % (staf_version, platform_name, ismp_suffix),
                                               '%s/%s/STAF%s-%s%s.tar.Z' % (ftpRoot, platform_name, staf_version, platform_name, ismp_suffix)
                                             ])
        else:
          platform_build_output_files.append([
                                               'STAF%s-%s%s.tar.gz' % (staf_version, platform_name, ismp_suffix),
                                               '%s/%s/STAF%s-%s%s.tar.gz' % (ftpRoot, platform_name, staf_version, platform_name, ismp_suffix)
                                             ])
      </script>

      <log message="1">'[%s] End function CreateTarGZ' % (platform_name)</log>

    </sequence>
  </function>


  <!-- ================================================================= -->
  <!-- TransferToISMP - This function is responsible for transferring    -->
  <!--                  the package tarball to the ISMP build machine    -->
  <!--                  and untarring at the destination.                -->
  <!-- ================================================================= -->

  <function name="TransferToISMP">
    <sequence>

      <log message="1">'[%s] Begin function TransferToISMP' % (platform_name)</log>

      <script>request = 'REQUEST MUTEX ismpBuild'</script>
      <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>

      <stafcmd name="'Requesting ISMP Build resource'">
        <location>ismpMach</location>
        <service>'SEM'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)</log>

      <script>failMessage = '[%s] Requesting ISMP Build resource on IPMP machine (%s)' % (platform_name, ismpMach)</script>
      <call function="'check-stafcmd'"/>

      <script>
        if platform_name == 'aix433':
          build_osname2 = 'aix'
        else:
          build_osname2 = build_osname     
      </script>

      <!-- Transfer it -->

      <script>
        request = 'COPY FILE %s/pkg/%s/staf/%s/stafpkg_%s.tar TOFILE %s/%s/stafpkg_%s.tar TOMACHINE %s' % (buildPath, build_osname, buildType, build_osname, ismpInputPath, build_osname2, build_osname, ismpMach)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Transfer package file'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Transferring source package from build machine (%s) to ISMP machine (%s)' % (platform_name, build_machine, ismpMach)</script>
      <call function="'check-stafcmd'"/>

      <!-- Untar it -->

      <script>process = "-c 'tar xf stafpkg_%s.tar'" % (build_osname)</script>
      <log message="1">'[%s] %s %s %s' % (platform_name, ismpMach, cygwinBashShell, process)</log>

      <process name="'Unpack package file'">
        <location>ismpMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>'%s/%s' % (ismpInputPath, build_osname2)</workdir>
        <envs>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, ismpMach, cygwinBashShell, process)</log>

      <script>failMessage = '[%s] Unpacking package file on ISMP machine (%s)' % (platform_name, ismpMach)</script>
      <call function="'check-win-bash-process'"/>

      <log message="1">'[%s] End function TransferToISMP' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- BuildISMP - This function is responsible for                      -->
  <!-- ================================================================= -->

  <function name="BuildISMP">
    <sequence>

      <log message="1">'[%s] Begin function BuildISMP' % (platform_name)</log>

      <script>process = '%s/build-%s.cmd' % (ismpInputPath, platform_name)</script>
      <log message="1">'[%s] %s %s' % (platform_name, ismpMach, process)</log>

      <process name="'ISMP Build'">
        <location>ismpMach</location>
        <command>process</command>
        <title>'Building %s ISMP binaries' % build_osname</title>
        <statichandlename>'STAF-ISMP-Build'</statichandlename>
        <!-- Need to use SAMECONSOLE so that the Windows "xcopy" works correctly -->
        <console use="'same'"/>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s' % (platform_name, RC, STAFResult, STAXResult, ismpMach, process)</log>

      <script>
        if STAXResult != None:
          errorData = STAXResult[0][1]
        else:
          errorData = STAFResult
          
        project_output = ['ismp', errorData]
        platform_build_output.append(project_output)
      </script>

      <script>request = 'RELEASE MUTEX ismpBuild FORCE'</script>
      <log message="1">'[%s] %s SEM %s' % (platform_name, ismpMach, request)</log>

      <stafcmd name="'Release ISMP Build resource'">
        <location>ismpMach</location>
        <service>'SEM'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, ismpMach, request)</log>

      <script>failMessage = '[%s] Build ISMP installers on ISIMP machine (%s)' % (platform_name, ismpMach)</script>
      <call function="'check-process'"/>

      <log message="1">'[%s] End function BuildISMP' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- CopyInstallers - This function is responsible for transferring    -->
  <!--                  the installers to the ftp machine.               -->
  <!-- ================================================================= -->

  <function name="CopyInstallers">
    <sequence>

      <log message="1">'[%s] Begin function CopyInstallers' % (platform_name)</log>

      <script>
        request = 'COPY FILE %s/%s/STAF%s-setup-%s%s.jar TOFILE %s/%s/STAF%s-setup-%s%s.jar TOMACHINE %s' % (ismpOutputPath, platform_name, staf_version, platform_name, ismp_suffix, ftp_path, platform_name, staf_version, platform_name, ismp_suffix, ftp_machine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ismpMach, request)</log>

      <stafcmd name="'Transfer Jar File'">
        <location>ismpMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ismpMach, request)</log>

      <script>failMessage = '[%s] Transferring Jar File from ISMP machine (%s) to FTP machine (%s)' % (platform_name, ismpMach, ftp_machine)</script>
      <call function="'check-stafcmd'"/>

      <if expr="copy_to_ga">
        <sequence>
          <script>
            request = 'COPY FILE %s/%s/STAF%s-setup-%s%s.jar TOFILE %s/%sga-test/STAF%s-setup-%s%s.jar TOMACHINE %s' % (ismpOutputPath, platform_name, staf_version, platform_name, ismp_suffix, ftp_path, staf_version, staf_version, platform_name, ismp_suffix, ftp_machine)
          </script>
          <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Transfer Jar File to ftp server GA directory'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
        </sequence>
      </if>


      <script>binaryFiles.append('%s/%s/STAF%s-setup-%s%s.jar' % (ftp_path, platform_name, staf_version, platform_name, ismp_suffix))</script>

      <script>
        platform_build_output_files.append([
                                             'STAF%s-setup-%s%s.jar' % (staf_version, platform_name, ismp_suffix),
                                             '%s/%s/STAF%s-setup-%s%s.jar' % (ftpRoot, platform_name, staf_version, platform_name, ismp_suffix)
                                           ])
      </script>

      <script>
        request = 'COPY FILE %s/%s/STAF%s-setup-%s%s%s TOFILE %s/%s/STAF%s-setup-%s%s%s TOMACHINE %s' % (ismpOutputPath, platform_name, staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_path, platform_name, staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_machine)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, ismpMach, request)</log>

      <stafcmd name="'Transfer Executable File'">
        <location>ismpMach</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, ismpMach, request)</log>

      <script>failMessage = '[%s] Transferring Executable File from ISMP machine (%s) to FTP machine (%s)' % (platform_name, ismpMach, ftp_machine)</script>
      <call function="'check-stafcmd'"/>

      <if expr="copy_to_ga">
        <sequence>
          <script>
            request = 'COPY FILE %s/%s/STAF%s-setup-%s%s%s TOFILE %s/%sga-test/STAF%s-setup-%s%s%s TOMACHINE %s' % (ismpOutputPath, platform_name, staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_path, staf_version, staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_machine)
          </script>
          <log message="1">'[main]%s FS %s' % (extractMach, request)</log>

          <stafcmd name="'Transfer Executable File to ftp server GA directory'">
            <location>extractMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, extractMach, request)</log>
        </sequence>
      </if>

      <script>binaryFiles.append('%s/%s/STAF%s-setup-%s%s%s' % (ftp_path, platform_name, staf_version, platform_name, ismp_suffix, ismp_exe_suffix))</script>

      <script>
        platform_build_output_files.append([
                                             'STAF%s-setup-%s%s%s' % (staf_version, platform_name, ismp_suffix, ismp_exe_suffix),
                                             '%s/%s/STAF%s-setup-%s%s%s' % (ftpRoot, platform_name, staf_version, platform_name, ismp_suffix, ismp_exe_suffix)
                                           ])
      </script>

      <log message="1">'[%s] End function CopyInstallers' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- TransferToIA - This function is responsible for transferring      -->
  <!--                  the package tarball to the IA build machine      -->
  <!--                  and untarring at the destination.                -->
  <!-- ================================================================= -->

  <function name="TransferToIA">
    <sequence>

      <log message="1">'[%s] Begin function TransferToIA' % (platform_name)</log>

      <script>
        request = 'REQUEST MUTEX iaBuild'
      </script>
      <log message="1">'[%s] %s SEM %s' % (platform_name, iaMach, request)</log>

      <stafcmd name="'Requesting IA Build resource'">
        <location>iaMach</location>
        <service>'SEM'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, iaMach, request)</log>

      <script>failMessage = '[%s] Requesting IA Build resource on iaMach (%s)' % (platform_name, iaMach)</script>
      <call function="'check-stafcmd'"/>

      <script>
        if platform_name == 'aix433':
          build_osname2 = 'aix'
        else:
          build_osname2 = build_osname
      </script>

      <!-- Transfer it -->

      <script>
        request = 'COPY FILE %s/pkg/%s/staf/%s/stafpkg_%s.tar TOFILE %s/%s/stafpkg_%s.tar TOMACHINE %s' % (buildPath, build_osname, buildType, build_osname, iaInputPath, ia_platform, build_osname, iaMach)
      </script>
      <log message="1">'[%s] %s FS %s' % (platform_name, build_machine, request)</log>

      <stafcmd name="'Transfer package file'">
        <location>build_machine</location>
        <service>'FS'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, build_machine, request)</log>

      <script>failMessage = '[%s] Transferring source package from build machine (%s) to IA machine (%s)' % (platform_name, build_machine, iaMach)</script>
      <call function="'check-stafcmd'"/>

      <!-- Delete the "staf" directory in iaInputPath/ia_platform -->

      <script>
        iaPlatformSTAFdir = '%s/%s/staf' % (iaInputPath, ia_platform)
      </script>
      
      <call function="'DeleteEntry'">
        {'entry': iaPlatformSTAFdir, 'machine': iaMach, 'isDirectory': 1, 'platform': platform_name }
      </call>

      <!-- Untar it -->

      <script>
        process = "-c 'tar xf stafpkg_%s.tar'" % (build_osname)
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, iaMach, cygwinBashShell, process)</log>

      <process name="'Unpack package file'">
        <location>iaMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>'%s/%s' % (iaInputPath, ia_platform)</workdir>
        <envs>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, iaMach, cygwinBashShell, process)</log>

      <script>failMessage = '[%s] Unpacking package file on IA machine (%s)' % (platform_name, iaMach)</script>
      <call function="'check-win-bash-process'"/>

      <!-- Make all files writeable -->

      <script>
        process = "-c 'find . -exec chmod +w ^{} \;'"
      </script>
      <log message="1">'[%s] %s %s %s' % (platform_name, iaMach, cygwinBashShell, process)</log>

      <process name="'Turn on writeable bit for each file in the unpacked package file'">
        <location>iaMach</location>
        <command>cygwinBashShell</command>
        <parms>process</parms>
        <workdir>'%s/%s/staf' % (iaInputPath, ia_platform)</workdir>
        <envs>'Path=%s%s{STAF/Env/Path}' % (cygwinBinPath, path_sep)</envs>
        <stderr mode="'stdout'"/>
        <returnstdout/>
      </process>

      <log message="1">'[%s] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (platform_name, RC, STAFResult, STAXResult, iaMach, cygwinBashShell, process)</log>

      <script>failMessage = '[%s] Turning on writeable bit for each file in the unpacked package file on IA machine (%s)' % (platform_name, iaMach)</script>
      <call function="'check-win-bash-process'"/>

      <log message="1">'[%s] End function TransferToIA' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- CopyIAInstallers - This function is responsible for transferring  -->
  <!--                    the installers to the ftp machine.             -->
  <!-- ================================================================= -->

  <function name="CopyIAInstallers">
    <sequence>

      <log message="1">'[%s] Begin function CopyIAInstallers' % (platform_name)</log>

      <if expr="platform_name == 'macosx-i386' or platform_name == 'macosx-ppc' or platform_name == 'macosx-universal'">
        <sequence>
          <script>
            request = 'COPY FILE %s/%s/STAF%s-setup-%s%s%s TOFILE %s/%s/STAF%s-setup-%s%s%s TOMACHINE %s' % (iaOutputPath, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, ismpMach, request)</log>

          <stafcmd name="'Transfer Zip File'">
            <location>ismpMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, iaMach, request)</log>

          <script>failMessage = '[%s] Transferring Zip File from ISMP machine (%s) to FTP machine (%s)' % (platform_name, ismpMach, ftp_machine)</script>
          <call function="'check-stafcmd'"/>
          <script>binaryFiles.append('%s/%s/STAF%s-setup-%s%s%s' % (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix))</script>

          <script>
            platform_build_output_files.append([
                                                 'STAF%s-setup-%s%s%s' % (ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix),
                                                 '%s/%s/STAF%s-setup-%s%s%s' % (ftpRoot, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix)
                                               ])
          </script>

          <script>
            request = 'COPY FILE %s/%s/STAF%s-setup-%s%s.bin TOFILE %s/%s/STAF%s-setup-%s%s.bin TOMACHINE %s' % (iaOutputPath, platform_name, ia_staf_version, platform_name, ismp_suffix, ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ftp_machine)
          </script>
          <log message="1">'[%s] %s FS %s' % (platform_name, ismpMach, request)</log>

          <stafcmd name="'Transfer NoJVM File'">
            <location>iaMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, iaMach, request)</log>

          <script>failMessage = '[%s] Transferring NoJVM File from IA machine (%s) to FTP machine (%s)' % (platform_name, iaMach, ftp_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>binaryFiles.append('%s/%s/STAF%s-setup-%s%s.bin' % (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix))</script>

          <script>
            platform_build_output_files.append([
                                                 'STAF%s-setup-%s%s.bin' % (ia_staf_version, platform_name, ismp_suffix),
                                                 '%s/%s/STAF%s-setup-%s%s.bin' % (ftpRoot, platform_name, ia_staf_version, platform_name, ismp_suffix)
                                               ])
          </script>
        </sequence>

        <else>
          <sequence>

            <script>
              request = 'COPY FILE %s/%s/STAF%s-setup-%s%s-NoJVM%s TOFILE %s/%s/STAF%s-setup-%s%s-NoJVM%s TOMACHINE %s' % (iaOutputPath, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_machine)
            </script>
            <log message="1">'[%s] %s FS %s' % (platform_name, ismpMach, request)</log>

            <stafcmd name="'Transfer NoJVM File'">
              <location>iaMach</location>
              <service>'FS'</service>
              <request>request</request>
            </stafcmd>

            <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, iaMach, request)</log>

            <script>failMessage = '[%s] Transferring NoJVM File from IA machine (%s) to FTP machine (%s)' % (platform_name, iaMach, ftp_machine)</script>
            <call function="'check-stafcmd'"/>

            <script>binaryFiles.append('%s/%s/STAF%s-setup-%s%s-NoJVM%s' % (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix))</script>

            <script>
              platform_build_output_files.append([
                                                   'STAF%s-setup-%s%s-NoJVM%s' % (ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix),
                                                   '%s/%s/STAF%s-setup-%s%s-NoJVM%s' % (ftpRoot, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix)
                                                 ])
            </script>

            <if expr="platform_name != 'freebsd'">
              <sequence>
                <script>
                  request = 'COPY FILE %s/%s/STAF%s-setup-%s%s%s TOFILE %s/%s/STAF%s-setup-%s%s%s TOMACHINE %s' % (iaOutputPath, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix, ftp_machine)
                </script>
                <log message="1">'[%s] %s FS %s' % (platform_name, ismpMach, request)</log>

                <stafcmd name="'Transfer JVM File'">
                  <location>ismpMach</location>
                  <service>'FS'</service>
                  <request>request</request>
                </stafcmd>

                <log message="1">'[%s] RC=%s, Result=%s, Request=%s FS %s' % (platform_name, RC, STAFResult, iaMach, request)</log>

                <script>failMessage = '[%s] Transferring JVM File from ISMP machine (%s) to FTP machine (%s)' % (platform_name, ismpMach, ftp_machine)</script>
                <call function="'check-stafcmd'"/>

                <script>binaryFiles.append('%s/%s/STAF%s-setup-%s%s%s' % (ftp_path, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix))</script>

                <script>
                  platform_build_output_files.append([
                                                       'STAF%s-setup-%s%s%s' % (ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix),
                                                       '%s/%s/STAF%s-setup-%s%s%s' % (ftpRoot, platform_name, ia_staf_version, platform_name, ismp_suffix, ismp_exe_suffix)
                                                     ])
                </script>
              </sequence>
            </if>

          </sequence>
        </else>
      </if>

      <!-- This semaphore is released in the finally element
      <script>
        request = 'RELEASE MUTEX iaBuild'
      </script>
      <log message="1">'[%s] %s SEM %s' % (platform_name, iaMach, request)</log>

      <stafcmd name="'Releasing IA Build resource'">
        <location>iaMach</location>
        <service>'SEM'</service>
        <request>request</request>
      </stafcmd>

      <log message="1">'[%s] RC=%s, Result=%s, Request=%s SEM %s' % (platform_name, RC, STAFResult, iaMach, request)</log>
      -->

      <log message="1">'[%s] End function CopyIAInstallers' % (platform_name)</log>

    </sequence>
  </function>

  <!-- ================================================================= -->
  <!-- CreateJavaServiceReleases - This function is responsible for      -->
  <!--                             creating the Java service release     -->
  <!--                             files.                                -->
  <!-- ================================================================= -->

  <function name="CreateJavaServiceReleases">

    <sequence>

      <log message="1">'[%s] Begin function CreateJavaServiceReleases' % (platform_name)</log>

      <script>
        platform_build_output = []
        platform_build_output_files = []
        serviceReleaseStartTime = time.strftime("%Y%m%d-%H:%M:%S")
      </script>

      <iterate var="release" in="javaServiceReleases">
        <sequence>

          <script>
            serviceName = release[0]
            serviceRelease = release[1]
            serviceRoot = ""
          </script>

          <if expr="buildVersion == 'mainline'">
            <script>serviceRoot = '/%s' % serviceName</script>
          </if>

          <script>
            request = 'CREATE DIRECTORY %s' % (serviceReleaseRoot)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Creating service release main directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'CREATE DIRECTORY %s/%s' % (serviceReleaseRoot, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Creating service release %s directory on ISMP machine (%s)' % (serviceRelease, ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'CREATE DIRECTORY %s/%s/zip' % (serviceReleaseRoot, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Creating service release zip directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'CREATE DIRECTORY %s/%s/tar' % (serviceReleaseRoot, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Creating service release tar directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'DELETE ENTRY %s/%s/zip CHILDREN RECURSE CONFIRM' % (serviceReleaseRoot, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Removing contents of service release zip directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'DELETE ENTRY %s/%s/tar CHILDREN RECURSE CONFIRM' % (serviceReleaseRoot, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Removing contents of service release tar directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'CREATE DIRECTORY %s/%s/zip%s' % (serviceReleaseRoot, serviceRelease, serviceRoot)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Creating service release zip/root directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'CREATE DIRECTORY %s/%s/tar%s' % (serviceReleaseRoot, serviceRelease, serviceRoot)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'fs'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Creating service release tar/root directory on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-stafcmd'"/>

          <if expr="serviceName == 'stax'">
            <sequence>

              <script>
                request = 'CREATE DIRECTORY %s/%s/zip%s/samples' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/zip%s/libraries' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/zip%s/ext' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/tar%s/samples' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/tar%s/libraries' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/tar%s/ext' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/zip%s/docs FULLPATH' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release zip/stax/docs directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/tar%s/docs FULLPATH' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release tar/stax/docs directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/zip%s/libraries/docs/libraries FULLPATH' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release zip/stax/libraries/docs/libraries directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'CREATE DIRECTORY %s/%s/tar%s/libraries/docs/libraries FULLPATH' % (serviceReleaseRoot, serviceRelease, serviceRoot)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Creating service release tar/stax/libraries/docs/libraries directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

            </sequence>
          </if>

          <iterate var="filedata" in="release[2]">
            <sequence>

              <script>
                filename = filedata[0]
                filepath = filedata[1]
                targetFilename = filedata[0]

                if len(filedata) == 3:
                  targetFilename = filedata[2]
              </script>

              <script>
                request = 'COPY FILE %s/%s TOMACHINE %s TOFILE %s/%s/zip%s/%s' % \
                  (filepath, filename, ismpMach, serviceReleaseRoot, serviceRelease, serviceRoot, targetFilename)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Copying service release file to zip directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

              <script>
                request = 'COPY FILE %s/%s TOMACHINE %s TOFILE %s/%s/tar%s/%s' % \
                  (filepath, filename, ismpMach, serviceReleaseRoot, serviceRelease, serviceRoot, targetFilename)
              </script>
              <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

              <stafcmd>
                <location>ismpMach</location>
                <service>'FS'</service>
                <request>request</request>
              </stafcmd>

              <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

              <script>failMessage = '[main] Copying service release file to tar directory: STAF %s FS %s' % (ismpMach, request)</script>
              <call function="'check-stafcmd'"/>

            </sequence>
          </iterate>

          <script>
            process = "-c 'tar cf %s.tar *'" % serviceRelease
          </script>
          <log message="1">'[main] %s %s %s' % (ismpMach, cygwinBashShell, process)</log>

          <process name="'Create service release tar'">
            <location>ismpMach</location>
            <command>cygwinBashShell</command>
            <parms>process</parms>
            <workdir>'%s/%s/tar' %(serviceReleaseRoot, serviceRelease)</workdir>
            <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, ismpMach, cygwinBashShell, process)</log>

          <script>failMessage = '[main] Create service release tar on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-win-bash-process'"/>

          <script>
            process = "-c 'zip -r %s.zip *'" % serviceRelease
          </script>
          <log message="1">'[main] %s %s %s' % (ismpMach, cygwinBashShell, process)</log>

          <process name="'Create service release zip'">
            <location>ismpMach</location>
            <command>cygwinBashShell</command>
            <parms>process</parms>
            <workdir>'%s/%s/zip' %(serviceReleaseRoot, serviceRelease)</workdir>
            <env>'Path=%s;{STAF/Env/Path}' % cygwinBinPath</env>
            <stderr mode="'stdout'"/>
            <returnstdout/>
          </process>

          <log message="1">'[main] RC=%s, STAFResult=%s, STAXResult=%s, Process=%s %s %s' % (RC, STAFResult, STAXResult, ismpMach, cygwinBashShell, process)</log>

          <script>failMessage = '[main] Create service release zip on ISMP machine (%s)' % (ismpMach)</script>
          <call function="'check-win-bash-process'"/>

          <script>
            request = 'CREATE DIRECTORY %s/%s' % (ftp_path, serviceName)
          </script>
          <log message="1">'[main] %s FS %s' % (ftp_machine, request)</log>

          <stafcmd>
            <location>ftp_machine</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ftp_machine, request)</log>

          <script>failMessage = '[main] Creating ftp_machine service release main directory on FTP machine (%s)' % (ftp_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>
            request = 'COPY FILE %s/%s/tar/%s.tar TOMACHINE %s TOFILE %s/%s/%s.tar' % (serviceReleaseRoot, serviceRelease, serviceRelease, ftp_machine, ftp_path, serviceName, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <log message="1">'[main] RC=%s, Result=%s, Request=%s FS %s' % (RC, STAFResult, ismpMach, request)</log>

          <script>failMessage = '[main] Copying service release tar file from ISMP machine (%s) to ftp server (%s)' % (ismpMach, ftp_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>binaryFiles.append('%s/%s/%s.tar' % (ftp_path, serviceName, serviceRelease))</script>

          <script>
            request = 'COPY FILE %s/%s/zip/%s.zip TOMACHINE %s TOFILE %s/%s/%s.zip' % (serviceReleaseRoot, serviceRelease, serviceRelease, ftp_machine, ftp_path, serviceName, serviceRelease)
          </script>
          <log message="1">'[main] %s FS %s' % (ismpMach, request)</log>

          <stafcmd>
            <location>ismpMach</location>
            <service>'FS'</service>
            <request>request</request>
          </stafcmd>

          <script>failMessage = '[main] Copying service release zip file from ISMP machine (%s) to ftp server (%s)' % (ismpMach, ftp_machine)</script>
          <call function="'check-stafcmd'"/>

          <script>binaryFiles.append('%s/%s/%s.zip' % (ftp_path, serviceName, serviceRelease))</script>

          <script>
            platform_build_output_files.append([
                                                 '%s.tar' % (serviceRelease),
                                                 '%s/%s/%s.tar' % (ftpRoot, serviceName, serviceRelease)
                                               ])
            platform_build_output_files.append([
                                                 '%s.zip' % (serviceRelease),
                                                 '%s/%s/%s.zip' % (ftpRoot, serviceName, serviceRelease)
                                               ])
          </script>

        </sequence>

      </iterate>

      <script>
        platform_output = {
                            'platform_name' : 'service releases',
                            'platform_build_output' : platform_build_output,
                            'platform_build_output_files' : platform_build_output_files,
                            'platform_build_machine' : ismpMach,
                            'platform_build_started' : serviceReleaseStartTime,
                            'platform_build_completed' : time.strftime("%Y%m%d-%H:%M:%S"),
                            'platform_build_status' : 'Pass'
                          }

        build_output.append(platform_output)
      </script>

      <log message="1">'[%s] End function CreateJavaServiceReleases' % (platform_name)</log>

    </sequence>

  </function>

  <function name="convertLogQueryOutputToHTMLTable" scope="local">
   <function-prolog>
    Accepts unmarshalled data (e.g. a list of maps) from a STAF LOG QUERY request and converts
    the data to an HTML table format
    </function-prolog>
    <function-single-arg>
      <function-required-arg name="logList"/>
    </function-single-arg>
    
    <sequence>
    
      <script>
        logTable = """
        &lt;table border="0">
        &lt;tr bgcolor=4477BB>
        &lt;td>&lt;font face="Arial, Helvetica">&lt;b>Date-Time&lt;/b>&lt;/font>&lt;/td>
        &lt;td>&lt;font face="Arial, Helvetica">&lt;b>Level&lt;/b>&lt;/font>&lt;/td>
        &lt;td>&lt;font face="Arial, Helvetica">&lt;b>Message&lt;/b>&lt;/font>&lt;/td>
        &lt;/tr>"""
        
        rowSwitch = 0

        for logMap in logList :

          if rowSwitch == 0 :
            bgcolor = 'DDEEFF'
            rowSwitch = 1
          else :
            bgcolor = '99CCFF'
            rowSwitch = 0

          logTable += """
        &lt;tr bgcolor=%s>&lt;td>&lt;font face="Arial, Helvetica">%s&lt;/font>&lt;/td>
        &lt;td>&lt;font face="Arial, Helvetica">%s&lt;/font>&lt;/td>
        &lt;td>&lt;font face="Arial, Helvetica">&lt;xmp>%s&lt;/xmp>&lt;/font>&lt;/td>
        &lt;/tr>""" % (bgcolor, logMap['timestamp'], logMap['level'], logMap['message'])
                       
        logTable  += """
        &lt;/table>"""
      </script>
      
      <return>logTable</return>
    
    </sequence>
  </function>
  
  <function name="formatElapsedTime" scope="local">
    <function-prolog>
    Accepts time in seconds as the input argument and returns the time in format hh:mm:ss
    </function-prolog>
    <function-single-arg>
      <function-required-arg name="timeInSeconds"/>
    </function-single-arg>
    
    <sequence>
    
      <script>
        hours = int(timeInSeconds / 3600)
        timeInSeconds = timeInSeconds - (hours * 3600)
        minutes = int(timeInSeconds / 60)
        timeInSeconds = timeInSeconds - (minutes * 60)
        seconds = timeInSeconds
     
        if hours &lt; 100:
          elapsedTime = '%02d:%02d:%02d' % (hours, minutes, seconds)
        else:
          elapsedTime = '%03d:%02d:%02d' % (hours, minutes, seconds)
      </script>  

      <return>elapsedTime</return>
      
    </sequence>
    
  </function>

</stax>
